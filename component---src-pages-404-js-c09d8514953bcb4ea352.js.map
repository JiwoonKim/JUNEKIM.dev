{"version":3,"sources":["webpack:///./src/pages/404.js","webpack:///./src/components/layouts/menu.js","webpack:///./src/components/layouts/header.js","webpack:///./src/components/layouts/footer.js","webpack:///./src/components/layouts/layout.js","webpack:///./src/components/seo.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_layouts_layout__WEBPACK_IMPORTED_MODULE_1__","_components_seo__WEBPACK_IMPORTED_MODULE_2__","NotFoundPage","a","createElement","title","ToggleMenu","showSettings","event","preventDefault","render","react_default","BurgerMenu","gatsby_browser_entry","to","React","Component","Header","_ref","metaDataType","metaData","layouts_menu","className","header_HeaderTitle","header_MetaData","HeaderTitle","_ref2","header_TitleSting","TitleSting","_ref3","MetaData","_ref4","header_BlogPostMetaData","header_PostListMetaData","header_DefaultMetaData","DefaultMetaData","BlogPostMetaData","_ref5","react_fontawesome_index_es","icon","date","tags","map","tag","toLowerCase","PostListMetaData","_ref6","propTypes","PropTypes","string","defaultProps","library","add","faCalendarAlt","faTags","faSearch","Footer","query","data","Date","getFullYear","site","siteMetadata","author","href","_1041092198","fab","Layout","children","Fragment","layouts_header","layouts_footer","node","isRequired","SEO","description","lang","meta","keywords","react__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_4__","detailsQuery","metaDescription","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","concat","length","join","_public_static_d_1025518380_json__WEBPACK_IMPORTED_MODULE_0__","array","arrayOf"],"mappings":"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","file":"component---src-pages-404-js-c09d8514953bcb4ea352.js","sourcesContent":["import React from 'react'\r\n\r\nimport Layout from '../components/layouts/layout'\r\nimport SEO from '../components/seo'\r\n\r\nconst NotFoundPage = () => (\r\n  <Layout>\r\n    <SEO title=\"404: Not found\" />\r\n    <h1>NOT FOUND</h1>\r\n    <p>You just hit a route that doesn&#39;t exist... the sadness.</p>\r\n  </Layout>\r\n)\r\n\r\nexport default NotFoundPage\r\n","import React from 'react'\r\nimport { Link } from 'gatsby'\r\n\r\nimport { slide as Menu } from 'react-burger-menu'\r\nimport './menu.css'\r\n\r\nclass ToggleMenu extends React.Component {\r\n    showSettings(event) {\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        return <Menu >\r\n            <Link to=\"/\">Home</Link>\r\n            <Link to=\"/about\">About</Link>\r\n            <Link to=\"/postlist\">Category</Link>\r\n          </Menu>\r\n    }\r\n}\r\n\r\nexport default ToggleMenu;","import { Link } from 'gatsby'\r\nimport PropTypes from 'prop-types'\r\nimport React from 'react'\r\n\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTags, faSearch, faCalendarAlt } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport ToggleMenu from './menu'\r\nimport './header.css'\r\n\r\n// header component (title + meta data)\r\nconst Header = ({ title, metaDataType, metaData }) => (\r\n  <header>\r\n    <nav>\r\n      <ToggleMenu />\r\n    </nav>\r\n    <div className=\"banner-container\">\r\n      <HeaderTitle title={title} metaDataType={metaDataType}/>\r\n      <MetaData metaDataType={metaDataType} metaData={metaData}/>\r\n    </div>\r\n  </header>\r\n)\r\n\r\n// title portion of header component\r\nconst HeaderTitle = ({title, metaDataType}) => (\r\n  <div className=\"banner-title-container\">\r\n    <h1 className=\"tag-decoration tag-decoration-left\">\r\n      <span>&lt;h1&gt;</span>  \r\n    </h1>\r\n    <TitleSting title={title} metaDataType={metaDataType} />\r\n    <h1 className=\"tag-decoration tag-decoration-right\">\r\n      <span>&lt;/h1&gt;</span>\r\n    </h1>\r\n  </div>\r\n)\r\n\r\nconst TitleSting = ({title, metaDataType}) => {\r\n  if (metaDataType === 'blog-post' || metaDataType === 'all') {\r\n    return (<h1 className=\"banner-title\">{title}</h1>)\r\n  }\r\n  else {\r\n    return (\r\n      <h1 className=\"banner-title\">\r\n        {title}\r\n        <span className=\"banner-title-include-string\">에 해당하는 글</span>\r\n      </h1>)\r\n  }\r\n}\r\n\r\n/** meta data portion of header component\r\n *  (renders differently depending on type of post)\r\n */\r\nconst MetaData = ({metaDataType, metaData}) => {\r\n\r\n  if (metaDataType === 'blog-post') {\r\n    return <BlogPostMetaData metaData={metaData} />\r\n  } \r\n  else if (metaDataType === 'post-list') {\r\n    return <PostListMetaData metaData={metaData} />\r\n  }\r\n  else {\r\n    return <DefaultMetaData />\r\n  }\r\n}\r\n\r\n// no meta data in default\r\nconst DefaultMetaData = () => (\r\n  <div className=\"header-meta-data\"></div>\r\n)\r\n\r\n/** for blog posts,\r\n *  meta data: date + tags\r\n */\r\nconst BlogPostMetaData = ({metaData}) => (\r\n  <div className=\"header-meta-data\">\r\n    <span>\r\n      <FontAwesomeIcon className=\"meta-data-icon\" icon=\"calendar-alt\" />\r\n      <span>{metaData.date}</span>\r\n    </span>\r\n    <span>\r\n      <FontAwesomeIcon className=\"meta-data-icon\" icon=\"tags\" /> \r\n      {metaData.tags.map(tag => (\r\n        <Link to={`tags/${tag.toLowerCase()}`} className=\"tag\">\r\n          <span>{tag}</span>\r\n          <span>&#183;</span>\r\n        </Link>\r\n      ))}\r\n    </span>\r\n  </div>\r\n)\r\n\r\n/** for tag lists,\r\n *  meta data: number of blog posts under tag category\r\n */\r\nconst PostListMetaData = ({metaData}) => (\r\n  <div className=\"header-meta-data\">\r\n    <span>\r\n      <FontAwesomeIcon className=\"meta-data-icon\" icon=\"search\" /> \r\n      <span className=\"header-posts-count\">{metaData}</span>\r\n      <span>matching articles</span>\r\n    </span>\r\n  </div>\r\n)\r\n\r\nHeader.propTypes = {\r\n  title: PropTypes.string,\r\n}\r\n\r\nHeader.defaultProps = {\r\n  title: ``,\r\n}\r\n\r\nlibrary.add(faCalendarAlt, faTags, faSearch);\r\n\r\nexport default Header","import { Link } from 'gatsby'\r\nimport PropTypes from 'prop-types'\r\nimport React from 'react'\r\nimport { StaticQuery, graphql } from 'gatsby'\r\n\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { fab } from '@fortawesome/free-brands-svg-icons'\r\n\r\nimport './footer.css'\r\n\r\nconst Footer = () => (\r\n  <StaticQuery\r\n    query={graphql`\r\n      query SiteAuthorQuery {\r\n        site {\r\n          siteMetadata {\r\n            author\r\n          }\r\n        }\r\n      }\r\n    `}\r\n    render={data => (\r\n      <footer>\r\n        <h1>\r\n          <span>© {new Date().getFullYear()}, Built by {` `}</span>\r\n          <Link to=\"/\">\r\n          {data.site.siteMetadata.author}\r\n          </Link>\r\n          <span>{` `}</span>\r\n          <a className=\"footer-github-link\" href=\"https://github.com/JiwoonKim\">\r\n            <FontAwesomeIcon icon={['fab', 'github']} /> \r\n          </a>\r\n        </h1>\r\n      </footer>\r\n    )}\r\n  />\r\n)\r\n\r\nFooter.propTypes = {\r\n  author: PropTypes.string,\r\n}\r\n\r\nFooter.defaultProps = {\r\n  author: ``,\r\n}\r\n\r\nlibrary.add(fab);\r\n\r\nexport default Footer\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { StaticQuery, graphql } from 'gatsby'\r\n\r\nimport Header from './header'\r\nimport Footer from './footer'\r\nimport './layout.css'\r\n\r\nconst Layout = ({ title, metaDataType, metaData, children }) => (\r\n  <>\r\n    <Header title={title} metaDataType={metaDataType} metaData={metaData} />\r\n    <main>\r\n      {children}\r\n    </main>\r\n    <Footer />\r\n  </>\r\n)\r\n\r\nLayout.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n}\r\n\r\nexport default Layout\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Helmet from 'react-helmet'\r\nimport { StaticQuery, graphql } from 'gatsby'\r\n\r\nfunction SEO({ description, lang, meta, keywords, title }) {\r\n  return (\r\n    <StaticQuery\r\n      query={detailsQuery}\r\n      render={data => {\r\n        const metaDescription =\r\n          description || data.site.siteMetadata.description\r\n        return (\r\n          <Helmet\r\n            htmlAttributes={{\r\n              lang,\r\n            }}\r\n            title={title}\r\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\r\n            meta={[\r\n              {\r\n                name: `description`,\r\n                content: metaDescription,\r\n              },\r\n              {\r\n                property: `og:title`,\r\n                content: title,\r\n              },\r\n              {\r\n                property: `og:description`,\r\n                content: metaDescription,\r\n              },\r\n              {\r\n                property: `og:type`,\r\n                content: `website`,\r\n              },\r\n              {\r\n                name: `twitter:card`,\r\n                content: `summary`,\r\n              },\r\n              {\r\n                name: `twitter:creator`,\r\n                content: data.site.siteMetadata.author,\r\n              },\r\n              {\r\n                name: `twitter:title`,\r\n                content: title,\r\n              },\r\n              {\r\n                name: `twitter:description`,\r\n                content: metaDescription,\r\n              },\r\n            ]\r\n              .concat(\r\n                keywords.length > 0\r\n                  ? {\r\n                      name: `keywords`,\r\n                      content: keywords.join(`, `),\r\n                    }\r\n                  : []\r\n              )\r\n              .concat(meta)}\r\n          />\r\n        )\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nSEO.defaultProps = {\r\n  lang: `en`,\r\n  meta: [],\r\n  keywords: [],\r\n}\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.array,\r\n  keywords: PropTypes.arrayOf(PropTypes.string),\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default SEO\r\n\r\nconst detailsQuery = graphql`\r\n  query DefaultSEOQuery {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        description\r\n        author\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}