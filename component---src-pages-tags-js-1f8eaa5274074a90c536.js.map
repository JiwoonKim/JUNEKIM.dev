{"version":3,"sources":["webpack:///./src/pages/tags.js","webpack:///./src/components/layouts/footer.js","webpack:///./src/components/layouts/menu.js","webpack:///./src/components/layouts/header.js","webpack:///./src/components/layouts/layout.js"],"names":["__webpack_require__","r","__webpack_exports__","d","tagQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby__WEBPACK_IMPORTED_MODULE_1__","_components_layouts_layout__WEBPACK_IMPORTED_MODULE_3__","TagsPage","props","data","allMarkdownRemark","group","a","createElement","title","metaDataType","map","tag","i","tagPath","require","kebabCase","fieldValue","key","to","totalCount","Footer","react__WEBPACK_IMPORTED_MODULE_3___default","query","render","Date","getFullYear","site","siteMetadata","author","className","href","_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_5__","icon","_public_static_d_1041092198_json__WEBPACK_IMPORTED_MODULE_0__","propTypes","PropTypes","string","defaultProps","library","add","fab","ToggleMenu","showSettings","event","preventDefault","react_default","BurgerMenu","gatsby_browser_entry","React","Component","Header","_ref","metaData","layouts_menu","header_HeaderTitle","header_MetaData","HeaderTitle","_ref2","header_TitleSting","TitleSting","_ref3","MetaData","_ref4","header_BlogPostMetaData","header_PostListMetaData","header_DefaultMetaData","DefaultMetaData","BlogPostMetaData","_ref5","react_fontawesome_index_es","date","tags","PostListMetaData","_ref6","faCalendarAlt","faTags","faSearch","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","_header__WEBPACK_IMPORTED_MODULE_3__","_footer__WEBPACK_IMPORTED_MODULE_4__","Layout","children","Fragment","node","isRequired"],"mappings":"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","file":"component---src-pages-tags-js-1f8eaa5274074a90c536.js","sourcesContent":["import React from 'react'\r\nimport { Link, graphql } from 'gatsby'\r\nimport 'lodash.kebabcase'\r\n\r\nimport Layout from '../components/layouts/layout'\r\n\r\nconst TagsPage = (props) => {\r\n\r\n    const data = props.data.allMarkdownRemark.group;\r\n    return (\r\n        <Layout title=\"모든 태크\" metaDataType='all'>\r\n        <section>\r\n            {data.map((tag, i) => {\r\n              var _ = require('lodash');\r\n              const tagPath = 'tags/' + _.kebabCase(tag.fieldValue);\r\n              return (\r\n                <ul>\r\n                  <li>\r\n                    <Link key={i} to={tagPath}>\r\n                      {tag.fieldValue} {`( ${tag.totalCount} )`}\r\n                    </Link>\r\n                  </li>\r\n                </ul>\r\n              )}\r\n            )}\r\n        </section>\r\n        </Layout>\r\n    )\r\n};\r\n\r\nexport const tagQuery = graphql`\r\n  query TagIndexQuery {\r\n    allMarkdownRemark(\r\n      limit: 2000) {\r\n      group(field: frontmatter___tags) {\r\n        fieldValue\r\n        totalCount\r\n      }\r\n    }\r\n  }\r\n\r\n`\r\n\r\nexport default TagsPage","import { Link } from 'gatsby'\r\nimport PropTypes from 'prop-types'\r\nimport React from 'react'\r\nimport { StaticQuery, graphql } from 'gatsby'\r\n\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { fab } from '@fortawesome/free-brands-svg-icons'\r\n\r\nimport './footer.css'\r\n\r\nconst Footer = () => (\r\n  <StaticQuery\r\n    query={graphql`\r\n      query SiteAuthorQuery {\r\n        site {\r\n          siteMetadata {\r\n            author\r\n          }\r\n        }\r\n      }\r\n    `}\r\n    render={data => (\r\n      <footer>\r\n        <h1>\r\n          <span>© {new Date().getFullYear()}, Built by {` `}</span>\r\n          <Link to=\"/\">\r\n          {data.site.siteMetadata.author}\r\n          </Link>\r\n          <span>{` `}</span>\r\n          <a className=\"footer-github-link\" href=\"https://github.com/JiwoonKim\">\r\n            <FontAwesomeIcon icon={['fab', 'github']} /> \r\n          </a>\r\n        </h1>\r\n      </footer>\r\n    )}\r\n  />\r\n)\r\n\r\nFooter.propTypes = {\r\n  author: PropTypes.string,\r\n}\r\n\r\nFooter.defaultProps = {\r\n  author: ``,\r\n}\r\n\r\nlibrary.add(fab);\r\n\r\nexport default Footer\r\n","import React from 'react'\r\nimport { Link } from 'gatsby'\r\n\r\nimport { slide as Menu } from 'react-burger-menu'\r\nimport './menu.css'\r\n\r\nclass ToggleMenu extends React.Component {\r\n    showSettings(event) {\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        return <Menu >\r\n            <Link to=\"/\">Home</Link>\r\n            <Link to=\"/about\">About</Link>\r\n            <Link to=\"/tags\">Category</Link>\r\n            <Link to=\"/postlist\">All Posts</Link>\r\n          </Menu>\r\n    }\r\n}\r\n\r\nexport default ToggleMenu;","import { Link } from 'gatsby'\r\nimport PropTypes from 'prop-types'\r\nimport React from 'react'\r\nimport 'lodash.kebabcase'\r\n\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTags, faSearch, faCalendarAlt } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport ToggleMenu from './menu'\r\nimport './header.css'\r\n\r\n// header component (title + meta data)\r\nconst Header = ({ title, metaDataType, metaData }) => (\r\n  <header>\r\n    <nav>\r\n      <ToggleMenu />\r\n    </nav>\r\n    <div className=\"banner-container\">\r\n      <HeaderTitle title={title} metaDataType={metaDataType}/>\r\n      <MetaData metaDataType={metaDataType} metaData={metaData}/>\r\n    </div>\r\n  </header>\r\n)\r\n\r\n// title portion of header component\r\nconst HeaderTitle = ({title, metaDataType}) => (\r\n  <div className=\"banner-title-container\">\r\n    <h1 className=\"tag-decoration tag-decoration-left\">\r\n      <span>&lt;h1&gt;</span>  \r\n    </h1>\r\n    <TitleSting title={title} metaDataType={metaDataType} />\r\n    <h1 className=\"tag-decoration tag-decoration-right\">\r\n      <span>&lt;/h1&gt;</span>\r\n    </h1>\r\n  </div>\r\n)\r\n\r\nconst TitleSting = ({title, metaDataType}) => {\r\n  if (metaDataType === 'blog-post' || metaDataType === 'all') {\r\n    return (<h1 className=\"banner-title\">{title}</h1>)\r\n  }\r\n  else {\r\n    return (\r\n      <h1>\r\n        <h1 className=\"banner-title\">{title}</h1>\r\n        <span className=\"banner-title-include-string\">에 해당하는 글</span>\r\n      </h1>)\r\n  }\r\n}\r\n\r\n/** meta data portion of header component\r\n *  (renders differently depending on type of post)\r\n */\r\nconst MetaData = ({metaDataType, metaData}) => {\r\n\r\n  if (metaDataType === 'blog-post') {\r\n    return <BlogPostMetaData metaData={metaData} />\r\n  } \r\n  else if (metaDataType === 'post-list') {\r\n    return <PostListMetaData metaData={metaData} />\r\n  }\r\n  else {\r\n    return <DefaultMetaData />\r\n  }\r\n}\r\n\r\n// no meta data in default\r\nconst DefaultMetaData = () => (\r\n  <div className=\"header-meta-data\"></div>\r\n)\r\n\r\n/** for blog posts,\r\n *  meta data: date + tags\r\n */\r\nconst BlogPostMetaData = ({metaData}) => (\r\n  <div className=\"header-meta-data\">\r\n    <span>\r\n      <FontAwesomeIcon className=\"meta-data-icon\" icon=\"calendar-alt\" />\r\n      <span>{metaData.date}</span>\r\n    </span>\r\n    <span>\r\n      <FontAwesomeIcon className=\"meta-data-icon\" icon=\"tags\" /> \r\n      {metaData.tags.map(tag => {\r\n\r\n        var _ = require('lodash');\r\n        const tagPath = 'tags/' + _.kebabCase(tag);\r\n        return (\r\n          <Link to={tagPath} className=\"tag\">\r\n            <span>{tag}</span>\r\n            <span>&#183;</span>\r\n          </Link>\r\n        )\r\n      })}\r\n    </span>\r\n  </div>\r\n)\r\n\r\n/** for list pages (by tags),\r\n *  meta data: number of blog posts under tag category\r\n */\r\nconst PostListMetaData = ({metaData}) => (\r\n  <div className=\"header-meta-data\">\r\n    <span>\r\n      <FontAwesomeIcon className=\"meta-data-icon\" icon=\"search\" /> \r\n      <span className=\"header-posts-count\">{metaData}</span>\r\n      <span>matching articles</span>\r\n    </span>\r\n  </div>\r\n)\r\n\r\nHeader.propTypes = {\r\n  title: PropTypes.string,\r\n}\r\n\r\nHeader.defaultProps = {\r\n  title: ``,\r\n}\r\n\r\nlibrary.add(faCalendarAlt, faTags, faSearch);\r\n\r\nexport default Header","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { StaticQuery, graphql } from 'gatsby'\r\n\r\nimport Header from './header'\r\nimport Footer from './footer'\r\nimport './layout.css'\r\n\r\nconst Layout = ({ title, metaDataType, metaData, children }) => (\r\n  <>\r\n    <Header title={title} metaDataType={metaDataType} metaData={metaData} />\r\n    <main>\r\n      {children}\r\n    </main>\r\n    <Footer />\r\n  </>\r\n)\r\n\r\nLayout.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n}\r\n\r\nexport default Layout\r\n"],"sourceRoot":""}