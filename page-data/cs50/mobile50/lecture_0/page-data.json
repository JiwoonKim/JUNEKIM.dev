{"componentChunkName":"component---src-components-templates-blog-post-js","path":"/CS50/mobile50/lecture_0/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>Understanding JavaScript</p>\n</blockquote>\n<h3>JavaScript</h3>\n<ul>\n<li><em>interpreted language</em>: read and execute line by line</li>\n<li>each browser has their own JavaScript engine that interprets the code</li>\n<li><strong>ECMAScript standard</strong></li>\n</ul>\n<h3>Types</h3>\n<p>JavaScript has <strong>dynamic typing</strong></p>\n<ul>\n<li>variables are not associated w/ specific types</li>\n<li>\n<p><strong>primitive types</strong>: <em>no methods, immutable</em></p>\n<ul>\n<li><code>undefined</code>: <em>falsy</em> value</li>\n<li><code>null</code>: <em>falsy</em> value</li>\n<li><code>boolean</code>: false = <em>falsy</em> value</li>\n<li><code>number</code>: 0 = <em>falsy</em> value</li>\n<li><code>string</code></li>\n<li><code>symbol</code></li>\n</ul>\n</li>\n<li><strong>objects</strong>: every other type is object</li>\n</ul>\n<h4>Typecasting</h4>\n<p>changing one type to another type (a.k.a <strong>coercion</strong>)</p>\n<ul>\n<li>\n<p><em>explicit coercion</em>: being explicit in changing types</p>\n<ul>\n<li>ex. const string_x = String(x);</li>\n</ul>\n</li>\n<li>\n<p><em>implicit coercion</em></p>\n<ul>\n<li>ex. const string_x = x + \" \";</li>\n</ul>\n</li>\n</ul>\n<h4>Check Types</h4>\n<ul>\n<li><strong>check type</strong>: <code>typeof</code></li>\n<li>\n<p><strong>compare values</strong></p>\n<ul>\n<li>\n<p><code>==</code>: coerce the types (types don't have to be equivalent)</p>\n<ul>\n<li><strong>never use!</strong> (bcuz) you have to know all the coerce types to use it</li>\n</ul>\n</li>\n<li><code>===</code>: requires equivalent types</li>\n</ul>\n</li>\n</ul>\n<h3>Objects</h3>\n<p>everything else than the primitive types</p>\n<ul>\n<li>include <strong>objects, arrays, and functions</strong></li>\n<li>mutable and stored by reference</li>\n<li>\n<p><em>three ways</em> to <strong>create objects</strong>:</p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk9\">const</span><span class=\"mtk1\"> </span><span class=\"mtk3\">d</span><span class=\"mtk1\"> </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk5\">new</span><span class=\"mtk1\"> </span><span class=\"mtk7\">Object</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk6\">d</span><span class=\"mtk1\">.</span><span class=\"mtk3\">name</span><span class=\"mtk1\"> </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk12\">&quot;dragon&quot;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk6\">d</span><span class=\"mtk1\">.</span><span class=\"mtk3\">isAlive</span><span class=\"mtk1\"> </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk5\">true</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk6\">o</span><span class=\"mtk1\">.</span><span class=\"mtk7\">fire</span><span class=\"mtk1\"> </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9\">function</span><span class=\"mtk1\"> () {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk5\">console</span><span class=\"mtk1\">.</span><span class=\"mtk7\">log</span><span class=\"mtk1\">(</span><span class=\"mtk12\">&#39;fire!&#39;</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<pre class=\"andromeda vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk9\">const</span><span class=\"mtk1\"> </span><span class=\"mtk3\">d</span><span class=\"mtk1\"> </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> {}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk6\">d</span><span class=\"mtk1\">.</span><span class=\"mtk3\">name</span><span class=\"mtk1\"> </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk12\">&#39;dragon&#39;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">d</span><span class=\"mtk1\">{</span><span class=\"mtk12\">&#39;isAlive&#39;</span><span class=\"mtk1\">} </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk5\">true</span></span></code></pre>\n<pre class=\"andromeda vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk9\">const</span><span class=\"mtk1\"> </span><span class=\"mtk3\">d</span><span class=\"mtk1\"> </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">name: </span><span class=\"mtk12\">&quot;dragon&quot;</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">isAlive: </span><span class=\"mtk5\">true</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk7\">fire</span><span class=\"mtk1\">: </span><span class=\"mtk9\">function</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk5\">console</span><span class=\"mtk1\">.</span><span class=\"mtk7\">log</span><span class=\"mtk1\">(</span><span class=\"mtk12\">&#39;fire!&#39;</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">},</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n</li>\n<li><strong>access</strong>: by <code>.key</code> or <code>['key']</code></li>\n</ul>\n<h4>Object Mutation</h4>\n<ul>\n<li>objects are <strong>passed by reference</strong></li>\n<li>acts like pointers</li>\n<li>assigning <code>=</code>: <em>pointing to the reference</em></li>\n<li>\n<p>copying <code>Object.assign({}, _copy_)</code>: create new object and merge the values</p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">// o1 and o2 point to the same object</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">const</span><span class=\"mtk1\"> </span><span class=\"mtk3\">o1</span><span class=\"mtk1\"> </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    a: </span><span class=\"mtk12\">&#39;a&#39;</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">const</span><span class=\"mtk1\"> </span><span class=\"mtk3\">o2</span><span class=\"mtk1\"> </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk3\">o1</span><span class=\"mtk1\"> </span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">// o3 points to a completely different object</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">// but same values bcuz merged o1&#39;s values into o3</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">const</span><span class=\"mtk1\"> </span><span class=\"mtk3\">o3</span><span class=\"mtk1\"> </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk5\">Object</span><span class=\"mtk1\">.</span><span class=\"mtk7\">assign</span><span class=\"mtk1\">({}, </span><span class=\"mtk3\">o1</span><span class=\"mtk1\">)</span></span></code></pre>\n</li>\n</ul>\n<h4>Prototypal Inheritance</h4>\n<ul>\n<li>\n<p>primitive types do not have methods associated w/ them</p>\n<ul>\n<li>but can use <strong>wrappers</strong> which give access to methods</li>\n<li>primitive types are <em>automatically wrapped/boxed</em> when used as variable</li>\n</ul>\n</li>\n<li>\n<p><strong>non-primitive types (objects)</strong> have <strong>properties</strong> and <strong>methods</strong></p>\n<ul>\n<li>each object stores a <strong>reference to its prototype</strong></li>\n<li>the more specific prototype, its methods</li>\n</ul>\n</li>\n<li>it is __dangerous to make changes to prototypes</li>\n</ul>\n<h3>Scope</h3>\n<p>variable lifetime (how long a variable exists)</p>\n<ul>\n<li>lexical scoping: <code>var</code></li>\n<li>block scoping: <code>const</code> and <code>let</code></li>\n<li>global scoping: declared w/o scoping</li>\n</ul>\n<h4>How JavaScript Engine Works</h4>\n<ul>\n<li>\n<p>before executing the code, the <strong>engine read the entire file first</strong> and will <em>throw a syntax error if one is found</em></p>\n<ul>\n<li><em>any function definition will be saved in memory</em></li>\n<li>variable initializations will not be run, but <em>lexically-scoped variable (var) names will be declared</em></li>\n</ul>\n</li>\n<li>\n<p>then, <strong>code is executed</strong></p>\n<ul>\n<li><em>block-scoped variables (let, const) names will be declared</em></li>\n</ul>\n</li>\n</ul>\n<h4>Hoisting</h4>\n<ul>\n<li><strong>variables and function declarations</strong> are <strong>moved to the top</strong> of their scope <strong>before code execution</strong></li>\n</ul>\n<h3>Global Object</h3>\n<ul>\n<li>\n<p><strong>all variables and functions</strong>: <em>parameters and methods on the global object</em></p>\n<ul>\n<li><em>Browser global object</em> = <strong>window object</strong></li>\n<li><em>Node.js global object</em> = <strong>global object</strong></li>\n</ul>\n</li>\n</ul>\n<style class=\"vscode-highlight-styles\">\n  :root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n\n  .andromeda {\nbackground-color: #23262E;\ncolor: #D5CED9;\n}\n\n.andromeda .mtk1 { color: #D5CED9; }\n.andromeda .mtk2 { color: #23262E; }\n.andromeda .mtk3 { color: #00E8C6; }\n.andromeda .mtk4 { color: #5F6167; }\n.andromeda .mtk5 { color: #EE5D43; }\n.andromeda .mtk6 { color: #F39C12; }\n.andromeda .mtk7 { color: #FFE66D; }\n.andromeda .mtk8 { color: #F92672; }\n.andromeda .mtk9 { color: #C74DED; }\n.andromeda .mtk10 { color: #7CB7FF; }\n.andromeda .mtk11 { color: #FF00AA; }\n.andromeda .mtk12 { color: #96E072; }\n.andromeda .mtki { font-style: italic; }\n.andromeda .mtkb { font-weight: bold; }\n.andromeda .mtku { text-decoration: underline; text-underline-position: under; }\n</style>","frontmatter":{"title":"Mobile50 lecture 0 - JavaScript","date":"2019-03-15","tags":["CS50","Mobile50","JavaScript"]}}},"pageContext":{"slug":"/CS50/mobile50/lecture_0/"}}}