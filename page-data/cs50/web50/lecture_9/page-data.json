{"componentChunkName":"component---src-components-templates-blog-post-js","path":"/CS50/web50/lecture_9/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>Harvard's Web Programming with Python and Javascript lecture 9 정리</p>\n</blockquote>\n<h3>CI / CD</h3>\n<ul>\n<li>\n<p><strong>Continuous Integration</strong>: </p>\n<ul>\n<li>consistently and frequently integrating code together for a team (merging to main branch)</li>\n<li><strong>automating unit testing</strong></li>\n</ul>\n</li>\n<li>\n<p><strong>Continuous Delivery</strong>:</p>\n<ul>\n<li>making <strong>incremental deliveries</strong> to application</li>\n<li><strong>automating application deployment</strong></li>\n</ul>\n</li>\n<li>\n<p><code>continuous</code> is the main key!</p>\n<ul>\n<li>have integration and delivery continuously and frequently to avoid the overload and complications of doing each all in one cue</li>\n</ul>\n</li>\n<li>\n<p><strong>virtualization</strong>: create virtual environments to ensure reproducability of apps</p>\n<ul>\n<li>virtual machines(vmware), containers (docker)</li>\n</ul>\n</li>\n</ul>\n<h3>CI (Continuous Integration)</h3>\n<p>a development strategy that revolves around continually and frequently adding code to a codebase (to avoid the complications in integration all in once)</p>\n<ul>\n<li>\n<p><strong>testing</strong>: </p>\n<ul>\n<li>automated tests vs. manual tests</li>\n<li>functional tests vs. non-functional tests </li>\n</ul>\n</li>\n<li>\n<p><strong>CI Tools</strong>: automated testing tool</p>\n<ul>\n<li>CircleCI, Codeship, Jenkins, Travis CI</li>\n</ul>\n</li>\n</ul>\n<h3>Travis CI</h3>\n<ul>\n<li>\n<p><strong>how Travis CI works</strong>:</p>\n<ol>\n<li>push code to GitHub</li>\n<li>GitHub notifies changes to Travis</li>\n<li>Travis pulls code from repo and runs tests</li>\n<li>GitHub notified of test results</li>\n</ol>\n</li>\n<li>\n<p><strong>setup Travis CI</strong>:</p>\n<ol>\n<li>sync GitHub account w/ Travis (<a href=\"https://travis-ci.org\">https://travis-ci.org</a>)</li>\n<li>select repository to be tracked by Travis</li>\n<li>include <code>.travis.yml</code> file in repository</li>\n<li>then, after pushes to repo, Travis automatically runs tests and notifies user on Github (in commits)</li>\n</ol>\n</li>\n</ul>\n<h4>Travis YAML</h4>\n<ul>\n<li>\n<p>YAML: common file format used for creating <strong>configuration files</strong></p>\n<ul>\n<li>lists tests, installations, etc.</li>\n<li><strong>set of keys and values</strong></li>\n</ul>\n</li>\n<li>\n<p><strong>Travis YAML file</strong> (<code>.travis.yml</code>)</p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"yml\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk3\">language</span><span class=\"mtk1\">: </span><span class=\"mtk12\">python</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">python</span><span class=\"mtk1\">: </span><span class=\"mtk6\">3.6</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">install</span><span class=\"mtk1\">: </span><span class=\"mtk12\">pip install -r requirements.txt</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">script</span><span class=\"mtk1\">: </span><span class=\"mtk12\">python manage.py test</span></span></code></pre>\n</li>\n</ul>\n<h3>Virtualization</h3>\n<p>isolating an app and its dependencies into a self-contained unit so that they can run anywhere w/o compatibility issues; abstracting the complexities of installing necessary dependencies for an app</p>\n<ul>\n<li>\n<p><strong>compatibility issues</strong>: development environment &#x3C;-> production environment</p>\n<ul>\n<li>how to ensure the production environment will be identical to to development environment?</li>\n</ul>\n</li>\n<li>\n<p><strong>solutions</strong>:</p>\n<ul>\n<li>사진</li>\n<li><strong>virtual machine</strong>: set a virtual operating system w/ configurations and dependencies</li>\n<li><strong>containerization</strong>: creating isolated containers that have just the things we want to have installed on them and use images instead of full-blown virtual machines; very useful in that do not have to install separate parts of app (ex. web server &#x26; database)</li>\n</ul>\n</li>\n</ul>\n<h4>Docker</h4>\n<p>type of container </p>\n<ul>\n<li>\n<p><code>DockerFile</code>: <strong>define docker image</strong> (= <strong>instructions for how container should be made</strong>, where app will live in)</p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"yml\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\"># inherit python:3 image</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk12\">FROM python:3</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\"># set working directory for app</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk12\">WORKDIR /usr/src/app</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\"># install all the dependencies</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk12\">ADD requirements.txt /usr/src/app</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk12\">RUN pip install -r requirements.txt</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\"># add all the contents of current directory to app directory</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk12\">ADD . /usr/src/app</span></span></code></pre>\n</li>\n<li>\n<p><strong>docker commands</strong>:</p>\n<ul>\n<li><code>docker ps</code>: list current docker containers</li>\n<li><code>docker build {dir_to_build_image}</code>: build an  image from docker file (by following the instructions)</li>\n<li><code>docker run {image_id}</code>: create container based on image and run it</li>\n<li><code>docker exec -it {container_id} bash -l</code>: run bash interactively in docker's container</li>\n</ul>\n</li>\n<li>\n<p>cf) <code>settings.py</code>: set database for project</p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"python\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk5\">...</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\"># example for Django app (airline project)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk6\">DATABASES</span><span class=\"mtk1\"> </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> [</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">&#39;default&#39;</span><span class=\"mtk1\">: {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\"># setting db to postgres for scalability reasons</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">&#39;ENGINE&#39;</span><span class=\"mtk1\">: </span><span class=\"mtk12\">&#39;django.db.backends.postgresql&#39;</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">&#39;NAME&#39;</span><span class=\"mtk1\">: </span><span class=\"mtk12\">&#39;postgres&#39;</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">&#39;USER&#39;</span><span class=\"mtk1\">: </span><span class=\"mtk12\">&#39;postgres&#39;</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">&#39;HOST&#39;</span><span class=\"mtk1\">: </span><span class=\"mtk12\">&#39;db&#39;</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">&#39;PORT&#39;</span><span class=\"mtk1\">: </span><span class=\"mtk6\">5432</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">]</span></span></code></pre>\n</li>\n<li>\n<p><code>docker-compose.yml</code>: <strong>define all of the different services that make up the app</strong>; compose multiple containers</p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"yml\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk3\">version</span><span class=\"mtk1\">: </span><span class=\"mtk12\">&#39;3&#39;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">services</span><span class=\"mtk1\">:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\"># define database service</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">db</span><span class=\"mtk1\">:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\"># use postgres image to construct db</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">image</span><span class=\"mtk1\">: </span><span class=\"mtk12\">postgres</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\"># define service for migrating changes</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">migration</span><span class=\"mtk1\">:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\"># build based on the docker file in current directory (-&gt; will tell how to install all dependencies)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">build</span><span class=\"mtk1\">: </span><span class=\"mtk6\">.</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">command</span><span class=\"mtk1\">: </span><span class=\"mtk12\">python3 manage.py migrate</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\"># link btw different files (current directory and app directory)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">volumes</span><span class=\"mtk1\">:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        - </span><span class=\"mtk12\">.:/usr/src/app</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\"># define dependency (make sure db is up first before using migration service)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">depends_on</span><span class=\"mtk1\">:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        - </span><span class=\"mtk12\">db</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\"># define web service</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">web</span><span class=\"mtk1\">:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\"># build based on docker file in current directory</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">build</span><span class=\"mtk1\">: </span><span class=\"mtk6\">.</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">command</span><span class=\"mtk1\">: </span><span class=\"mtk12\">python3 manage.py runserver 0.0.0.0:8000</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">volumes</span><span class=\"mtk1\">:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        - </span><span class=\"mtk12\">.:usr/src/app</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\"># map port 8000 in container to port 8000 on current environment (computer)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">ports</span><span class=\"mtk1\">:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        - </span><span class=\"mtk12\">&quot;8000:8000&quot;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">depends_on</span><span class=\"mtk1\">:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        - </span><span class=\"mtk12\">db</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        - </span><span class=\"mtk12\">migration</span></span></code></pre>\n</li>\n<li>\n<p><strong>docker-compose commands</strong>:</p>\n<ul>\n<li><code>docker-compose build</code>: build images based on yml file</li>\n<li><code>docker-compose up</code>: build images and start containers</li>\n</ul>\n</li>\n</ul>\n<h3>CD (Continuous Delivery)</h3>\n<p>a development strategy that revolves around continually and frequently delivering code to production</p>\n<ul>\n<li>\n<p><strong>CD Tools</strong>: </p>\n<ul>\n<li><strong>deployment</strong>: Heroku, Amazon AWS</li>\n</ul>\n</li>\n</ul>\n<h3>Deployment</h3>\n<h4>Heroku</h4>\n<ul>\n<li>\n<p><strong>how Heroku works</strong>:</p>\n<ol>\n<li></li>\n</ol>\n</li>\n<li>\n<p><strong>deploy app to Heroku</strong>:</p>\n<ol>\n<li>create a new app</li>\n<li>generate Heroku API key -> authorize Travis CI</li>\n</ol>\n</li>\n</ul>\n<h3>Development Workflow</h3>\n<p>a typical day for developers (using ex of GitHub Classroom)</p>\n<h4>Feature-branch Development</h4>\n<p>paradigm to develop new branch for each feature and merge back to master branch (= production branch); a type of strategy for continuous deployment</p>\n<ol>\n<li><strong>fork repo</strong></li>\n<li><code>git clone {repo_url}</code>: clone repo to local computer</li>\n<li>\n<p><code>git checkout -b {branch_name}</code>: create a feature branch</p>\n<ul>\n<li>make changes for feature </li>\n<li>check the change w/ unit tests</li>\n</ul>\n</li>\n<li><code>git push {forked_repo} {branch_name}</code>: push branch to forked repo</li>\n<li>\n<p><strong>compare and pull request</strong>: start conversation about the changes made</p>\n<ul>\n<li>check <code>from</code> and <code>to</code> repos</li>\n<li><strong>automatically starts a build</strong> (Travis runs unit tests)</li>\n<li><strong>co-workers reviews changes, provide feedback, and discuss changes</strong></li>\n</ul>\n</li>\n<li>\n<p><strong>deployment</strong> (once the pull request is reviewed and accepted)</p>\n<ul>\n<li>\n<p><strong>Feature Flipper</strong>: add code (<strong>feature toggle</strong>) so that a certain feature will appear only in the specified condition (used to deploy new features w/o impacting all users: can beta test while the original one is used for all users); ultimately, the feature toggle will be removed as the code is deployed to an increasing number of users and fully deployed</p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"html\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">&lt;!-- if user exists and feature enabled for that user --&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{% if current_user &amp;&amp; current_user.feature_enabled %}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">&lt;!-- toggle feature on --&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">... feature code</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{% endif %}</span></span></code></pre>\n<ul>\n<li>use feature flipping to <strong>continuously deploy features and code</strong></li>\n</ul>\n</li>\n<li><strong>pull request to actual repo and push code</strong> not the forked repo (Travis creates builds)</li>\n<li>\n<p><strong>deploy for production</strong></p>\n<ul>\n<li>deployment may occur in chatroom (slack) instead of in command line</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p>cf) <strong>released-based development</strong>: builds up the version 1.0 branch while also working on a 1.1 branch</p>\n<style class=\"vscode-highlight-styles\">\n  :root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n\n  .andromeda {\nbackground-color: #23262E;\ncolor: #D5CED9;\n}\n\n.andromeda .mtk1 { color: #D5CED9; }\n.andromeda .mtk2 { color: #23262E; }\n.andromeda .mtk3 { color: #00E8C6; }\n.andromeda .mtk4 { color: #5F6167; }\n.andromeda .mtk5 { color: #EE5D43; }\n.andromeda .mtk6 { color: #F39C12; }\n.andromeda .mtk7 { color: #FFE66D; }\n.andromeda .mtk8 { color: #F92672; }\n.andromeda .mtk9 { color: #C74DED; }\n.andromeda .mtk10 { color: #7CB7FF; }\n.andromeda .mtk11 { color: #FF00AA; }\n.andromeda .mtk12 { color: #96E072; }\n.andromeda .mtki { font-style: italic; }\n.andromeda .mtkb { font-weight: bold; }\n.andromeda .mtku { text-decoration: underline; text-underline-position: under; }\n</style>","frontmatter":{"title":"Web50 lecture 9 - CI/CD","date":"2019-06-18","tags":["CS50","Web50","CI/CD"]}}},"pageContext":{"slug":"/CS50/web50/lecture_9/"}}}