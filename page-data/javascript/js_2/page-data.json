{"componentChunkName":"component---src-components-templates-blog-post-js","path":"/Javascript/js_2/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>Understanding JavaScript</p>\n<ul>\n<li>debugging, coding style, automated testing, polyfills</li>\n<li>based on <a href=\"http://javascript.info/\">tutorial</a></li>\n</ul>\n</blockquote>\n<h3>Debugging</h3>\n<p><strong>finding and fixing errors</strong></p>\n<h4>Breakpoints</h4>\n<ol>\n<li>\n<p><strong>set breakpoints</strong>: </p>\n<ul>\n<li>click the number line in the source file via developer tools</li>\n<li>use <code>debugger</code> in code to set breakpoint</li>\n</ul>\n</li>\n<li>\n<p><strong>execute code</strong>: may have to reload page if necessary</p>\n<ul>\n<li>can make a step to next command (but not enter internal function)</li>\n<li>can make a step to next command, going into internal function</li>\n<li>can continue execution until end of current function</li>\n<li>can enable automatic pause in case of error</li>\n<li><a href=\"http://javascript.info/debugging-chrome\">버튼 참고</a></li>\n</ul>\n</li>\n</ol>\n<h4>Logging</h4>\n<ul>\n<li><code>console.log()</code>: to log code in the console tab in developer tools</li>\n</ul>\n<h3>Coding Style</h3>\n<p><strong>clean and easy to read</strong> as possible</p>\n<h4>Clean Code Recipe</h4>\n<p>keep the code simple and self-descriptive</p>\n<ul>\n<li>\n<p><strong>factor out functions</strong>: <strong>replace a code piece w/ a function</strong></p>\n<ul>\n<li><em>functions should be self-descriptive</em></li>\n</ul>\n</li>\n<li>\n<p><strong>space for readability</strong>:</p>\n<ul>\n<li><strong>indentation</strong>: 2 spaces, 4 spaces, or tab</li>\n<li>space after for/if/while, etc.</li>\n<li><strong>empty line between logical blocks</strong></li>\n<li>spaces around a nested call (앞뒤로)</li>\n<li><strong>avoid nesting code too many levels deep</strong></li>\n</ul>\n</li>\n</ul>\n<h3>Comments</h3>\n<p>describe how and why code works</p>\n<ul>\n<li>\n<p><strong>describe the architecture</strong>: provide a high-level overview of components</p>\n<ul>\n<li>how they interact, what the control flow is in various situations, etc.</li>\n<li><strong>[UML]</strong>(<a href=\"https://en.wikipedia.org/wiki/Unified_Modeling_Language\">https://en.wikipedia.org/wiki/Unified_Modeling_Language</a>): special diagram language for high-level architecture diagrams</li>\n</ul>\n</li>\n<li>\n<p><strong>document a function usage</strong>: to understand the purpose of the function and how to use it w/o looking in its code</p>\n<ul>\n<li>use <a href=\"https://en.wikipedia.org/wiki/JSDoc\">JSDoc</a> to document a function's usage, parameters, returned value.</li>\n</ul>\n</li>\n<li><strong>explain why it coded this way</strong>: provide an explanation of why a task was solved exactly this way and not any other way</li>\n</ul>\n<p><em>if the code is so unclear that it requires a comment, then maybe it should be rewritten instead</em></p>\n<h4>Style Guides</h4>\n<p>general rule about how to write code</p>\n<ul>\n<li><a href=\"https://google.github.io/styleguide/javascriptguide.xml\">Google JavaScript Style Guide</a></li>\n<li><a href=\"https://github.com/airbnb/javascript\">Airbnb JavaScript Style Guide</a></li>\n<li><a href=\"https://github.com/rwaldron/idiomatic.js\">IdiomaticJS</a></li>\n<li><a href=\"https://standardjs.com/\">StandardJS</a></li>\n</ul>\n<h4>Linters</h4>\n<p>tools that automatically check the style of your code and make suggestions for refactoring</p>\n<ul>\n<li>ex. ESLint</li>\n</ul>\n<h3>Automated Testing</h3>\n<p>tests are written separately (in addition to code) to execute easily and check all the main use cases</p>\n<ul>\n<li>instead of manual re-runs (code-run-check-fix)</li>\n<li>\n<p><em>use following libraries for tests</em>:</p>\n<ul>\n<li><strong>Mocha</strong>: the core framework, provides common testing functions (<code>describe</code> and <code>it</code>) and the main function to run tests</li>\n<li><strong>Chai</strong>: library w/ many assertions</li>\n<li><strong>Sinon</strong>: library to spy over functions, emulate built-in functions and more</li>\n</ul>\n</li>\n</ul>\n<h4>Behavior Driven Development (BDD) Approach</h4>\n<ul>\n<li>three things in one: <strong>spec = tests + documentation + examples</strong></li>\n<li><strong>spec first</strong> and <strong>followed by implementation</strong></li>\n<li>using spec: <strong>can safely improve, change, even rewrite function</strong> from scratch and make sure it still works right</li>\n<li><strong>better architecture</strong> bcuz the code is organized by having every function w/ a <strong>clear task</strong> and <strong>well-defined input/output</strong></li>\n</ul>\n<h4>Development Flow</h4>\n<ol>\n<li>\n<p><strong>write spec</strong> (<em>specification</em>): use <code>describe</code>, <code>it</code>, and assertions</p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">// one test to check one thing each (it)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk7\">describe</span><span class=\"mtk1\">(</span><span class=\"mtk12\">&quot;pow&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk9\">function</span><span class=\"mtk1\">() {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk7\">it</span><span class=\"mtk1\">(</span><span class=\"mtk12\">&quot;2 raised to power 3 is 8&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk9\">function</span><span class=\"mtk1\">() {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk6\">assert</span><span class=\"mtk1\">.</span><span class=\"mtk7\">equal</span><span class=\"mtk1\">(</span><span class=\"mtk7\">pow</span><span class=\"mtk1\">(</span><span class=\"mtk6\">2</span><span class=\"mtk1\">, </span><span class=\"mtk6\">3</span><span class=\"mtk1\">), </span><span class=\"mtk6\">8</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">});</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk7\">it</span><span class=\"mtk1\">(</span><span class=\"mtk12\">&quot;3 raised to power 3 is 27&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk9\">function</span><span class=\"mtk1\">() {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk6\">assert</span><span class=\"mtk1\">.</span><span class=\"mtk7\">equal</span><span class=\"mtk1\">(</span><span class=\"mtk7\">pow</span><span class=\"mtk1\">(</span><span class=\"mtk6\">3</span><span class=\"mtk1\">, </span><span class=\"mtk6\">3</span><span class=\"mtk1\">), </span><span class=\"mtk6\">27</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">});</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">});</span></span></code></pre>\n</li>\n<li>\n<p><strong>implement code</strong></p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">// passes test but is incorrect</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">function</span><span class=\"mtk1\"> </span><span class=\"mtk7\">pow</span><span class=\"mtk1\">(</span><span class=\"mtk3\">x</span><span class=\"mtk1\">, </span><span class=\"mtk3\">n</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">let</span><span class=\"mtk1\"> </span><span class=\"mtk3\">result</span><span class=\"mtk1\"> </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">1</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk9\">let</span><span class=\"mtk1\"> </span><span class=\"mtk3\">i</span><span class=\"mtk1\"> </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">0</span><span class=\"mtk1\">; </span><span class=\"mtk3\">i</span><span class=\"mtk1\"> </span><span class=\"mtk5\">&lt;</span><span class=\"mtk1\"> </span><span class=\"mtk3\">n</span><span class=\"mtk1\">; </span><span class=\"mtk3\">i</span><span class=\"mtk5\">++</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">result</span><span class=\"mtk1\"> </span><span class=\"mtk5\">*=</span><span class=\"mtk1\"> </span><span class=\"mtk3\">x</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">return</span><span class=\"mtk1\"> </span><span class=\"mtk3\">result</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n</li>\n<li><strong>run testing framework</strong>(Mocha) to run the spec and display errors</li>\n<li>make corrections until everything works</li>\n<li>\n<p><strong>add more use cases to the spec</strong>: </p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">// improve spec w/ &#39;for&#39; loop</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk7\">describe</span><span class=\"mtk1\">(</span><span class=\"mtk12\">&quot;pow&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk9\">function</span><span class=\"mtk1\">() {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">// nested describe to group makeTest and for loop</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk7\">describe</span><span class=\"mtk1\">(</span><span class=\"mtk12\">&quot;raises x to power 3&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk9\">function</span><span class=\"mtk1\"> () {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">// define function to test</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk9\">function</span><span class=\"mtk1\"> </span><span class=\"mtk7\">makeTest</span><span class=\"mtk1\">(</span><span class=\"mtk3\">x</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk9\">let</span><span class=\"mtk1\"> </span><span class=\"mtk3\">expected</span><span class=\"mtk1\"> </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk3\">x</span><span class=\"mtk1\"> </span><span class=\"mtk5\">*</span><span class=\"mtk1\"> </span><span class=\"mtk3\">x</span><span class=\"mtk1\"> </span><span class=\"mtk5\">*</span><span class=\"mtk1\"> </span><span class=\"mtk3\">x</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk7\">it</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">&#96;</span><span class=\"mtk8\">${</span><span class=\"mtk3\">x</span><span class=\"mtk8\">}</span><span class=\"mtk12\"> in the power 3 is </span><span class=\"mtk8\">${</span><span class=\"mtk3\">expected</span><span class=\"mtk8\">}</span><span class=\"mtk12\">&#96;</span><span class=\"mtk1\">, </span><span class=\"mtk9\">function</span><span class=\"mtk1\">() {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk6\">assert</span><span class=\"mtk1\">.</span><span class=\"mtk7\">equal</span><span class=\"mtk1\">(</span><span class=\"mtk7\">pow</span><span class=\"mtk1\">(</span><span class=\"mtk3\">x</span><span class=\"mtk1\">, </span><span class=\"mtk6\">3</span><span class=\"mtk1\">), </span><span class=\"mtk3\">expected</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        });</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">// execute tests</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk9\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk9\">let</span><span class=\"mtk1\"> </span><span class=\"mtk3\">x</span><span class=\"mtk1\"> </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">1</span><span class=\"mtk1\">; </span><span class=\"mtk3\">x</span><span class=\"mtk1\"> </span><span class=\"mtk5\">&lt;=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">5</span><span class=\"mtk1\">; </span><span class=\"mtk3\">x</span><span class=\"mtk5\">++</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk7\">makeTest</span><span class=\"mtk1\">(</span><span class=\"mtk3\">x</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">})</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">// more tests to follow (describe + it)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">});</span></span></code></pre>\n<ul>\n<li>\n<p>also include <strong>error cases to improve spec</strong></p>\n<ul>\n<li>ex. return NaN when n is negative or non-integer (make the spec fail to show errors)</li>\n</ul>\n</li>\n<li><strong>appropriate error cases indicate successful code</strong></li>\n</ul>\n</li>\n<li><strong>improve code</strong> till no errors in tests</li>\n<li><strong>repeat 5 and 6</strong></li>\n</ol>\n<h3>Polyfills</h3>\n<p><strong>scripts that fill in the gap and add missing implementations</strong></p>\n<ul>\n<li>worthy new proposals to the JavaScript language are appended to the <a href=\"https://tc39.github.io/ecma262/\">list</a> and progressed to the <a href=\"http://www.ecma-international.org/publications/standards/Ecma-262.htm\">specification</a></li>\n<li>JavaScript engines may decide to implement or postpone things in the spec depending on the team's decision</li>\n</ul>\n<h4>Babel</h4>\n<ul>\n<li>\n<p><strong>transpiler</strong> which rewrites modern JavaScript code into the previous standard</p>\n<ul>\n<li>modern project build system (ex. webpack, brunch) provide means to run transpiler automatically on every code change</li>\n</ul>\n</li>\n<li><strong>polyfill</strong> to fill in missing implementations and modify built-in functions</li>\n<li><strong>use Babel if you need to use old engines to support modern features</strong>, not if you simply use modern engines (which support features and thus, do not need a tranpiler and polyfill)</li>\n</ul>\n<style class=\"vscode-highlight-styles\">\n  :root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n\n  .andromeda {\nbackground-color: #23262E;\ncolor: #D5CED9;\n}\n\n.andromeda .mtk1 { color: #D5CED9; }\n.andromeda .mtk2 { color: #23262E; }\n.andromeda .mtk3 { color: #00E8C6; }\n.andromeda .mtk4 { color: #5F6167; }\n.andromeda .mtk5 { color: #EE5D43; }\n.andromeda .mtk6 { color: #F39C12; }\n.andromeda .mtk7 { color: #FFE66D; }\n.andromeda .mtk8 { color: #F92672; }\n.andromeda .mtk9 { color: #C74DED; }\n.andromeda .mtk10 { color: #7CB7FF; }\n.andromeda .mtk11 { color: #FF00AA; }\n.andromeda .mtk12 { color: #96E072; }\n.andromeda .mtki { font-style: italic; }\n.andromeda .mtkb { font-weight: bold; }\n.andromeda .mtku { text-decoration: underline; text-underline-position: under; }\n</style>","frontmatter":{"title":"JavaScript 2 - Code Quality","date":"2019-03-19","tags":["웹개발","프론트엔드","JavaScript"]}}},"pageContext":{"slug":"/Javascript/js_2/"}}}