{"componentChunkName":"component---src-components-templates-blog-post-js","path":"/Javascript/js_3/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>Understanding JavaScript</p>\n<ul>\n<li>based on <a href=\"http://javascript.info/\">tutorial</a></li>\n</ul>\n</blockquote>\n<h3>Primitive Data Types</h3>\n<p>single valued data types</p>\n<ul>\n<li>6 types: <strong>numbers</strong>, <strong>strings</strong>, <strong>boolean</strong>, <strong>null</strong>, <strong>undefined</strong>, and <strong>symbols</strong></li>\n</ul>\n<h4>Primitive Methods</h4>\n<ul>\n<li>JavaScript creates <strong>object wrappers</strong> when <strong>numbers, strings, booleans and symbols</strong> are accessed by <code>.</code> to allow extra functionalities such as <strong>methods and properties</strong></li>\n<li>the wrapper (a.k.a String, Number, Boolean, Symbol) is different for each primitive type; provide different methods</li>\n<li>the wrapper is destroyed right after it is used</li>\n</ul>\n<h3>1. Numbers</h3>\n<ul>\n<li>\n<p>use <code>e</code> to specify zero count</p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk9\">let</span><span class=\"mtk1\"> </span><span class=\"mtk3\">million</span><span class=\"mtk1\"> </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">1e6</span><span class=\"mtk1\">; </span><span class=\"mtk4\">// 1000,000</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">let</span><span class=\"mtk1\"> </span><span class=\"mtk3\">milli</span><span class=\"mtk1\"> </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">1e-3</span><span class=\"mtk1\">; </span><span class=\"mtk4\">// 0.001</span></span></code></pre>\n</li>\n</ul>\n<h4>Conversion</h4>\n<ul>\n<li>\n<p><strong>to Number</strong>: <code>+</code> or <code>Number()</code>, </p>\n<ul>\n<li><code>parseInt()</code> &#x26; <code>parseFloat()</code>: to convert and parse</li>\n</ul>\n</li>\n<li>\n<p><strong>from Number</strong>: <code>.toString()</code></p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk9\">let</span><span class=\"mtk1\"> </span><span class=\"mtk3\">num</span><span class=\"mtk1\"> </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">255</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk6\">num</span><span class=\"mtk1\">.</span><span class=\"mtk7\">toString</span><span class=\"mtk1\">();  </span><span class=\"mtk4\">// &quot;255&quot;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk6\">num</span><span class=\"mtk1\">.</span><span class=\"mtk7\">toString</span><span class=\"mtk1\">(</span><span class=\"mtk6\">2</span><span class=\"mtk1\">); </span><span class=\"mtk4\">// &quot;11111111&quot;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk6\">100.</span><span class=\"mtk1\">.</span><span class=\"mtk7\">toString</span><span class=\"mtk1\">(); (</span><span class=\"mtk6\">100</span><span class=\"mtk1\">).</span><span class=\"mtk7\">toString</span><span class=\"mtk1\">(); </span><span class=\"mtk4\">// to use directly on value</span></span></code></pre>\n</li>\n</ul>\n<h4>Rounding</h4>\n<ul>\n<li>Rounding to <strong>Integers</strong>: <code>Math.floor()</code>, <code>Math.ceil()</code>, <code>Math.round()</code>, <code>Math.trunc()</code></li>\n<li>\n<p>Rounding to <strong>Floating-point values</strong>:</p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk9\">let</span><span class=\"mtk1\"> </span><span class=\"mtk3\">num</span><span class=\"mtk1\"> </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">3.145</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">// rounds to n digits after the point, returns string</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">// then, must convert it back to number type</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk5\">+</span><span class=\"mtk6\">num</span><span class=\"mtk1\">.</span><span class=\"mtk7\">toFixed</span><span class=\"mtk1\">(</span><span class=\"mtk6\">2</span><span class=\"mtk1\">); </span><span class=\"mtk4\">// 3.145 -&gt; &quot;3.14&quot; -&gt; 3.14</span></span></code></pre>\n</li>\n</ul>\n<h4>Imprecison</h4>\n<p>since floating-point values are actually represented as endless fractions in binary form, they produce imprecise calculations. <strong>So Beware!</strong> </p>\n<ul>\n<li>can use <code>.toFixed()</code> to round result into desired outcome and lose imprecise calculations</li>\n</ul>\n<h4>Other Math Functions</h4>\n<ul>\n<li><code>Math.random()</code>: returns random number from 0 to 1</li>\n<li><code>Math.max()</code> &#x26; <code>Math.min()</code>: returns max/min from number or arguments</li>\n<li><code>**</code>: returns n^power</li>\n</ul>\n<h3>2. Strings</h3>\n<p>textual data encoded in UTF-16</p>\n<ul>\n<li><code>.length</code>: return length of string</li>\n<li><code>.toLowerCase()</code> &#x26; <code>.toUpperCase()</code>: convert to lower/uppercase</li>\n</ul>\n<h4>Substrings</h4>\n<ul>\n<li>find position of substring: <code>.indexOf()</code></li>\n<li>checks containing of substring: <code>.includes()</code>, <code>.startsWith()</code>, <code>.endsWith()</code></li>\n<li>return a substring: <code>.slice()</code>, <code>.substring()</code></li>\n</ul>\n<h4>Comparison</h4>\n<ul>\n<li>use <code>localeCompare</code>, otherwise they are compared by character codes</li>\n</ul>\n<h3>3. Boolean</h3>\n<p><code>true</code> or <code>false</code></p>\n<h3>4. Null</h3>\n<p><strong>nothing, empty, value unknown</strong></p>\n<ul>\n<li><code>null</code>:used to assign an empty or unkown value to variable</li>\n</ul>\n<h3>5. Undefined</h3>\n<p><strong>value is not assigned</strong></p>\n<ul>\n<li><code>undefined</code>: used to check if variable has been assigned a value</li>\n</ul>\n<h3>6. Symbols</h3>\n<p>primitive type for unique identifiers</p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk9\">let</span><span class=\"mtk1\"> </span><span class=\"mtk3\">s</span><span class=\"mtk1\"> </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk5\">Symbol</span><span class=\"mtk1\">();</span></span></code></pre>\n<ul>\n<li>symbols are <strong>always unique</strong> even if they have the same name</li>\n<li><strong>used to create hidden properties for objects</strong></li>\n<li>symbol -> string: need to use <code>.toString()</code> (do not auto-convert)</li>\n<li>\n<p><strong>global symbols</strong>: symbols that can access the same value</p>\n<ul>\n<li>same-named symbols are equal in global registry</li>\n<li>\n<p>use <code>Symbol.for(__name__)</code></p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">// s === ss</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">let</span><span class=\"mtk1\"> </span><span class=\"mtk3\">s</span><span class=\"mtk1\"> </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk5\">Symbol</span><span class=\"mtk1\">.</span><span class=\"mtk7\">for</span><span class=\"mtk1\">(</span><span class=\"mtk12\">&quot;id&quot;</span><span class=\"mtk1\">); </span><span class=\"mtk4\">// create if not exists</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">let</span><span class=\"mtk1\"> </span><span class=\"mtk3\">ss</span><span class=\"mtk1\"> </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk5\">Symbol</span><span class=\"mtk1\">.</span><span class=\"mtk7\">for</span><span class=\"mtk1\">(</span><span class=\"mtk12\">&quot;id&quot;</span><span class=\"mtk1\">);</span></span></code></pre>\n</li>\n<li><code>Symbol.keyFor(__symVar__)</code>: returns symbol name</li>\n</ul>\n</li>\n</ul>\n<h4>System Symbols</h4>\n<p>system symbols JavaScript uses internally, can be used to fine-tune various various aspects of objects</p>\n<ul>\n<li><code>Symbol.hasInstance</code>, <code>Symbol.isConcatSpreadable</code>, <code>Symbol.iterator</code>, <code>Symbol.toPrimitive</code>, etc.</li>\n</ul>\n<style class=\"vscode-highlight-styles\">\n  :root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n\n  .andromeda {\nbackground-color: #23262E;\ncolor: #D5CED9;\n}\n\n.andromeda .mtk1 { color: #D5CED9; }\n.andromeda .mtk2 { color: #23262E; }\n.andromeda .mtk3 { color: #00E8C6; }\n.andromeda .mtk4 { color: #5F6167; }\n.andromeda .mtk5 { color: #EE5D43; }\n.andromeda .mtk6 { color: #F39C12; }\n.andromeda .mtk7 { color: #FFE66D; }\n.andromeda .mtk8 { color: #F92672; }\n.andromeda .mtk9 { color: #C74DED; }\n.andromeda .mtk10 { color: #7CB7FF; }\n.andromeda .mtk11 { color: #FF00AA; }\n.andromeda .mtk12 { color: #96E072; }\n.andromeda .mtki { font-style: italic; }\n.andromeda .mtkb { font-weight: bold; }\n.andromeda .mtku { text-decoration: underline; text-underline-position: under; }\n</style>","frontmatter":{"title":"JavaScript 3 - Primitive Data Types","date":"2019-03-20","tags":["웹개발","프론트엔드","JavaScript"]}}},"pageContext":{"slug":"/Javascript/js_3/"}}}