{"componentChunkName":"component---src-components-templates-blog-post-js","path":"/Javascript/js_4/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>Understanding JavaScript</p>\n<ul>\n<li>objects, primitive data types</li>\n<li>based on <a href=\"http://javascript.info/\">tutorial</a></li>\n</ul>\n</blockquote>\n<h3>Objects</h3>\n<p>store <strong>keyed collections</strong> of <strong>various data</strong> and more complex entities</p>\n<ul>\n<li>\n<p><strong>create empty objects</strong></p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk9\">let</span><span class=\"mtk1\"> </span><span class=\"mtk3\">obj</span><span class=\"mtk1\"> </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk5\">new</span><span class=\"mtk1\"> </span><span class=\"mtk7\">Object</span><span class=\"mtk1\">(); </span><span class=\"mtk4\">// object constructor</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">let</span><span class=\"mtk1\"> </span><span class=\"mtk3\">obj</span><span class=\"mtk1\"> </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> {}; </span><span class=\"mtk4\">// object literal syntax</span></span></code></pre>\n</li>\n<li>\n<p><strong>define properties</strong>: <code>key: value</code> pairs</p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk9\">let</span><span class=\"mtk1\"> </span><span class=\"mtk3\">obj</span><span class=\"mtk1\"> </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    name: </span><span class=\"mtk12\">&quot;Oh&quot;</span><span class=\"mtk1\">, </span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    age: </span><span class=\"mtk6\">15</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk7\">sayOh</span><span class=\"mtk1\">() {   </span><span class=\"mtk4\">// method</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk7\">alert</span><span class=\"mtk1\">( </span><span class=\"mtk11\">this</span><span class=\"mtk1\">.</span><span class=\"mtk3\">name</span><span class=\"mtk1\"> ); </span><span class=\"mtk4\">// use &#39;this&#39;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<pre class=\"andromeda vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">// if key == value, can use shorthand</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">let</span><span class=\"mtk1\"> </span><span class=\"mtk3\">obj</span><span class=\"mtk1\"> </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> { </span><span class=\"mtk3\">name</span><span class=\"mtk1\">, </span><span class=\"mtk3\">age</span><span class=\"mtk1\">, };</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">// { name: name, age: age,}</span></span></code></pre>\n<ul>\n<li><strong>keys</strong>: <strong>string</strong> or <strong>symbol</strong></li>\n</ul>\n</li>\n<li>\n<p><strong>access properties</strong>: use <code>.</code> or <code>[]</code></p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk6\">obj</span><span class=\"mtk1\">.</span><span class=\"mtk3\">isAlphabet</span><span class=\"mtk1\"> </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk5\">true</span><span class=\"mtk1\">;    </span><span class=\"mtk4\">// dot notation</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk7\">alert</span><span class=\"mtk1\">( </span><span class=\"mtk3\">obj</span><span class=\"mtk1\">[</span><span class=\"mtk3\">isAlphabet</span><span class=\"mtk1\">] ); </span><span class=\"mtk4\">// bracket notation</span></span></code></pre>\n<pre class=\"andromeda vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">/* bracket notation is more powerful: </span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">can use variables as properties and can create computed properties */</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">let</span><span class=\"mtk1\"> </span><span class=\"mtk3\">input</span><span class=\"mtk1\"> </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk7\">prompt</span><span class=\"mtk1\">(</span><span class=\"mtk12\">&quot;Insert an input&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">&quot;default&quot;</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">let</span><span class=\"mtk1\"> </span><span class=\"mtk3\">obj</span><span class=\"mtk1\"> </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    [</span><span class=\"mtk3\">input</span><span class=\"mtk1\">]: </span><span class=\"mtk6\">1</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk7\">alert</span><span class=\"mtk1\">( </span><span class=\"mtk6\">obj</span><span class=\"mtk1\">.</span><span class=\"mtk3\">default</span><span class=\"mtk1\"> ) </span><span class=\"mtk4\">// access by inputted key</span></span></code></pre>\n<ul>\n<li>if property name is <strong>simple</strong>, use <strong>dot</strong></li>\n<li>for more <strong>complex</strong>, use <strong>brackets</strong></li>\n</ul>\n</li>\n<li>\n<p><strong>delete properties</strong>: use <code>delete</code> operator</p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk5\">delete</span><span class=\"mtk1\"> </span><span class=\"mtk6\">obj</span><span class=\"mtk1\">.</span><span class=\"mtk3\">age</span><span class=\"mtk1\">;</span></span></code></pre>\n</li>\n<li>\n<p><strong>check property exists</strong>: use <code>!== undefined</code> or <code>in</code> operator</p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">// true means that property does not exist</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk7\">alert</span><span class=\"mtk1\"> ( </span><span class=\"mtk6\">obj</span><span class=\"mtk1\">.</span><span class=\"mtk3\">noP</span><span class=\"mtk1\"> </span><span class=\"mtk5\">===</span><span class=\"mtk1\"> </span><span class=\"mtk5\">undefined</span><span class=\"mtk1\"> );</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">// true means property exists</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk7\">alert</span><span class=\"mtk1\">( </span><span class=\"mtk12\">&quot;noP&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk5\">in</span><span class=\"mtk1\"> </span><span class=\"mtk3\">obj</span><span class=\"mtk1\"> );</span></span></code></pre>\n<ul>\n<li><code>in</code> <strong>works better</strong> since a property's value could be set to <code>undefined</code></li>\n</ul>\n</li>\n<li>\n<p><strong>iterate over all keys</strong>: use <code>for</code> and <code>in</code></p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk9\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk9\">let</span><span class=\"mtk1\"> </span><span class=\"mtk3\">key</span><span class=\"mtk1\"> </span><span class=\"mtk5\">in</span><span class=\"mtk1\"> </span><span class=\"mtk3\">obj</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk7\">alert</span><span class=\"mtk1\">( </span><span class=\"mtk12\">&#96;</span><span class=\"mtk8\">${</span><span class=\"mtk3\">key</span><span class=\"mtk8\">}</span><span class=\"mtk12\">: </span><span class=\"mtk8\">${</span><span class=\"mtk3\">obj</span><span class=\"mtk1\">[</span><span class=\"mtk3\">key</span><span class=\"mtk1\">]</span><span class=\"mtk8\">}</span><span class=\"mtk12\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk12\">}</span></span></code></pre>\n<ul>\n<li>properties are <strong>ordered</strong>: integers are sorted while others are in order of creation</li>\n<li>symbol properties do not appear in for loops bcuz they are hidden properties</li>\n</ul>\n</li>\n</ul>\n<h4>This</h4>\n<p><code>this</code> points to object within the context</p>\n<ul>\n<li>defined at run-time</li>\n<li>arrow functions do not have <code>this</code></li>\n</ul>\n<h4>Copied by Reference</h4>\n<p>objects are stored and copied by reference</p>\n<ul>\n<li>objects store the <strong>address in memory</strong></li>\n<li>properties of objects declared as <code>const</code> <strong>can be changed</strong></li>\n<li>\n<p><strong>cloning/merging an object</strong>: use <code>Object.assign</code></p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">// clone object</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">let</span><span class=\"mtk1\"> </span><span class=\"mtk3\">copied</span><span class=\"mtk1\"> </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk5\">Object</span><span class=\"mtk1\">.</span><span class=\"mtk7\">assign</span><span class=\"mtk1\">({},  </span><span class=\"mtk3\">obj</span><span class=\"mtk1\">);</span></span></code></pre>\n<pre class=\"andromeda vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">// merge several objects into one</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">let</span><span class=\"mtk1\"> </span><span class=\"mtk3\">obj</span><span class=\"mtk1\"> </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> { name: </span><span class=\"mtk12\">&quot;oh&quot;</span><span class=\"mtk1\"> };</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">let</span><span class=\"mtk1\"> </span><span class=\"mtk3\">add1</span><span class=\"mtk1\"> </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> { canAdd: </span><span class=\"mtk6\">1</span><span class=\"mtk1\"> };</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">let</span><span class=\"mtk1\"> </span><span class=\"mtk3\">sub1</span><span class=\"mtk1\"> </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> { canSub: </span><span class=\"mtk6\">2</span><span class=\"mtk1\"> };</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk5\">Object</span><span class=\"mtk1\">.</span><span class=\"mtk7\">assign</span><span class=\"mtk1\">(</span><span class=\"mtk3\">obj</span><span class=\"mtk1\">, </span><span class=\"mtk3\">add1</span><span class=\"mtk1\">, </span><span class=\"mtk3\">sub1</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">// obj = { name: oh, canAdd: 1, canSub: 2}</span></span></code></pre>\n<pre class=\"andromeda vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">// more simply,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk5\">Object</span><span class=\"mtk1\">.</span><span class=\"mtk7\">assign</span><span class=\"mtk1\">(</span><span class=\"mtk3\">obj</span><span class=\"mtk1\">, { canAdd: </span><span class=\"mtk6\">1</span><span class=\"mtk1\">, canSub: </span><span class=\"mtk6\">2</span><span class=\"mtk1\"> })</span></span></code></pre>\n<ul>\n<li>need more sophisticated algorithm for <strong>deep cloning</strong> (<em>to clone objects within objects</em>)</li>\n</ul>\n</li>\n</ul>\n<h3>Garbage Collector</h3>\n<p><strong>monitors all objects</strong> and <strong>removes unreachable objects</strong> for memory management in JavaScript</p>\n<ul>\n<li>\n<p>reachable: values that are accessible or usable somehow</p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">// obj has reference to object (reachable)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">let</span><span class=\"mtk1\"> </span><span class=\"mtk3\">obj</span><span class=\"mtk1\"> </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> { name: </span><span class=\"mtk12\">&quot;oh&quot;</span><span class=\"mtk1\"> };</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">/* value object is overwritten</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">reference to object is lost (unreachable) */</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">obj</span><span class=\"mtk1\"> </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk5\">null</span><span class=\"mtk1\">;</span></span></code></pre>\n<ul>\n<li>reachable = can be referenced from the root somehow</li>\n</ul>\n</li>\n<li>garbage collector <strong>junks the data</strong> and <strong>frees the memory</strong></li>\n</ul>\n<p>think <strong>objects like pointers</strong>:\n- if object variable is overwritten, the actual object value is lost and garbage collector frees the memory\n- if another object variable has reference, the object value is not lost or collected by garbage collector</p>\n<h4>How it works</h4>\n<ul>\n<li>it remembers roots, its references, and its references ...</li>\n<li>in the end, those that were unreachable in this process (objects which do not have links) are removed</li>\n</ul>\n<style class=\"vscode-highlight-styles\">\n  :root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n\n  .andromeda {\nbackground-color: #23262E;\ncolor: #D5CED9;\n}\n\n.andromeda .mtk1 { color: #D5CED9; }\n.andromeda .mtk2 { color: #23262E; }\n.andromeda .mtk3 { color: #00E8C6; }\n.andromeda .mtk4 { color: #5F6167; }\n.andromeda .mtk5 { color: #EE5D43; }\n.andromeda .mtk6 { color: #F39C12; }\n.andromeda .mtk7 { color: #FFE66D; }\n.andromeda .mtk8 { color: #F92672; }\n.andromeda .mtk9 { color: #C74DED; }\n.andromeda .mtk10 { color: #7CB7FF; }\n.andromeda .mtk11 { color: #FF00AA; }\n.andromeda .mtk12 { color: #96E072; }\n.andromeda .mtki { font-style: italic; }\n.andromeda .mtkb { font-weight: bold; }\n.andromeda .mtku { text-decoration: underline; text-underline-position: under; }\n</style>","frontmatter":{"title":"JavaScript 4 - Objects","date":"2019-03-20","tags":["웹개발","프론트엔드","JavaScript"]}}},"pageContext":{"slug":"/Javascript/js_4/"}}}