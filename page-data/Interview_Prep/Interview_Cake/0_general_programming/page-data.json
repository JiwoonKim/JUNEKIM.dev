{"componentChunkName":"component---src-components-templates-blog-post-js","path":"/Interview_Prep/Interview_Cake/0_general_programming/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>Interview Cake의 General Programming 파트 정리</p>\n</blockquote>\n<h3>Short Circuit Evaluation</h3>\n<p>strategy of <strong>stop evaluating logical expression as soon as the result is certain to avoid unnecessary work</strong></p>\n<ul>\n<li><code>(first &#x26;&#x26; second)</code>: stop if first is false; don't even bother to check second bcuz the whole expression is false anyway</li>\n<li><code>(first || second)</code>: stop if first is true; the whole expression is true anyway</li>\n</ul>\n<p><strong>use to filter out edge cases</strong> (especially seg fault cases!)</p>\n<ul>\n<li>ex. (cur &#x26;&#x26; cur->data > 0)</li>\n</ul>\n<h3>Garbage Collection</h3>\n<p>C++ (manual memory management) &#x3C;-> Java (garbage collector)</p>\n<ul>\n<li>\n<p><strong>manual memory management</strong>:</p>\n<ul>\n<li>\n<p>manually free allocated memory (ex. <code>new</code>)</p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">// manual memory management for C++</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">char</span><span class=\"mtk5\">*</span><span class=\"mtk1\"> str </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk5\">new</span><span class=\"mtk1\"> </span><span class=\"mtk9\">char</span><span class=\"mtk1\">[</span><span class=\"mtk6\">15</span><span class=\"mtk1\">];</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk5\">delete[]</span><span class=\"mtk1\"> str;</span></span></code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>garbage collector</strong>: automatically frees up memory that a program is not using anymore</p>\n<ul>\n<li>strategies: tracing garbage collection, reference counting</li>\n</ul>\n</li>\n</ul>\n<h4>cf) Smart Pointers in C++</h4>\n<p>a wrapper class over pointers to help <strong>automatically manage and free resources</strong></p>\n<ul>\n<li>\n<p><strong>unique pointers</strong>: the only reference to its allocated resource (single ownership)</p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk9\">#include</span><span class=\"mtk1\"> </span><span class=\"mtk12\">&lt;memory&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">using</span><span class=\"mtk1\"> </span><span class=\"mtk9\">namespace</span><span class=\"mtk1\"> std;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">// unique pointer</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk7\">unique_ptr</span><span class=\"mtk1\">&lt;</span><span class=\"mtk9\">int</span><span class=\"mtk1\">&gt; </span><span class=\"mtk7\">p1</span><span class=\"mtk1\">(</span><span class=\"mtk5\">new</span><span class=\"mtk1\"> </span><span class=\"mtk9\">int</span><span class=\"mtk1\">(</span><span class=\"mtk6\">5</span><span class=\"mtk1\">));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">// prevents copying of its contained pointer</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">unique_ptr</span><span class=\"mtk5\">&lt;</span><span class=\"mtk9\">int</span><span class=\"mtk5\">&gt;</span><span class=\"mtk1\"> p2 </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> p1;</span><span class=\"mtk4\"> // compile error</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">// as soon as the unique pointer is out of scope, it is deallocated</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">p2 </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk7\">move</span><span class=\"mtk1\">(p1);</span><span class=\"mtk4\"> // transferred ownership</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">cout </span><span class=\"mtk5\">&lt;&lt;</span><span class=\"mtk1\"> p1;</span><span class=\"mtk4\"> // prints null</span></span></code></pre>\n</li>\n<li>\n<p><strong>shared pointers</strong>: multiple pointers can reference the same resource</p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">// shared pointer</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk7\">shared_ptr</span><span class=\"mtk1\">&lt;</span><span class=\"mtk9\">int</span><span class=\"mtk1\">&gt; </span><span class=\"mtk7\">p1</span><span class=\"mtk1\">(</span><span class=\"mtk5\">new</span><span class=\"mtk1\"> </span><span class=\"mtk9\">int</span><span class=\"mtk1\">(</span><span class=\"mtk6\">5</span><span class=\"mtk1\">));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">// another pointer shares the reference</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk7\">shared_ptr</span><span class=\"mtk1\">&lt;</span><span class=\"mtk9\">int</span><span class=\"mtk1\">&gt; </span><span class=\"mtk7\">p2</span><span class=\"mtk1\">(</span><span class=\"mtk7\">p1</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">// refernce count</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">cout </span><span class=\"mtk5\">&lt;&lt;</span><span class=\"mtk1\"> </span><span class=\"mtk3\">p1</span><span class=\"mtk1\">.</span><span class=\"mtk7\">use_count</span><span class=\"mtk1\">();</span><span class=\"mtk4\"> // prints 2</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">// freed when all the references are out of scope</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">p1</span><span class=\"mtk1\">.</span><span class=\"mtk7\">reset</span><span class=\"mtk1\">();</span><span class=\"mtk4\"> // relinquish ownership</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">p2</span><span class=\"mtk1\">.</span><span class=\"mtk7\">reset</span><span class=\"mtk1\">();</span></span></code></pre>\n</li>\n</ul>\n<h3>Mutable vs. Immutable Objects</h3>\n<ul>\n<li>\n<p><strong>mutable object</strong>: can be changed after it's created</p>\n<ul>\n<li>mutable objects are nice bcuz you can make <strong>changes in-place</strong></li>\n<li>but be careful since the changes are reflecting into all references of that object</li>\n</ul>\n</li>\n<li><strong>immutable object</strong>: cannot be changed</li>\n</ul>\n<h4>in C++</h4>\n<p><strong>everything is mutable by default</strong></p>\n<ul>\n<li><code>const</code> keyword to make immutable</li>\n<li>\n<p>but <code>const_cast</code> lets you cast away const keyword so nothing is truly immutable</p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">// immutable vector</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">const</span><span class=\"mtk1\"> vector</span><span class=\"mtk5\">&lt;</span><span class=\"mtk9\">int</span><span class=\"mtk5\">&gt;</span><span class=\"mtk1\"> v </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> {</span><span class=\"mtk6\">0</span><span class=\"mtk1\">, </span><span class=\"mtk6\">1</span><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">// modified to mutable vector</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk5\">const_cast&lt;</span><span class=\"mtk1\">vector</span><span class=\"mtk5\">&lt;</span><span class=\"mtk9\">int</span><span class=\"mtk5\">&gt;&amp;&gt;</span><span class=\"mtk1\">(v)[</span><span class=\"mtk6\">0</span><span class=\"mtk1\">] </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">1</span><span class=\"mtk1\">;</span></span></code></pre>\n</li>\n</ul>\n<style class=\"vscode-highlight-styles\">\n  :root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n\n  .andromeda {\nbackground-color: #23262E;\ncolor: #D5CED9;\n}\n\n.andromeda .mtk1 { color: #D5CED9; }\n.andromeda .mtk2 { color: #23262E; }\n.andromeda .mtk3 { color: #00E8C6; }\n.andromeda .mtk4 { color: #5F6167; }\n.andromeda .mtk5 { color: #EE5D43; }\n.andromeda .mtk6 { color: #F39C12; }\n.andromeda .mtk7 { color: #FFE66D; }\n.andromeda .mtk8 { color: #F92672; }\n.andromeda .mtk9 { color: #C74DED; }\n.andromeda .mtk10 { color: #7CB7FF; }\n.andromeda .mtk11 { color: #FF00AA; }\n.andromeda .mtk12 { color: #96E072; }\n.andromeda .mtki { font-style: italic; }\n.andromeda .mtkb { font-weight: bold; }\n.andromeda .mtku { text-decoration: underline; text-underline-position: under; }\n</style>","frontmatter":{"title":"Interview Cake - 0. General Programming","date":"2019-06-27","tags":["Interview Cake"]}}},"pageContext":{"slug":"/Interview_Prep/Interview_Cake/0_general_programming/"}}}