{"componentChunkName":"component---src-components-templates-blog-post-js","path":"/CS_Core/OOP/6/","result":{"data":{"markdownRemark":{"html":"<p>추상 클래스 = 미완성의 설계도\n자식 클래스가 상속해 자기의 필요에 맞게 다시 정의해서 사용할 수 있다. 다시 말하면 클래스를 설계할 때 이미 사전에 추상 클래스에 필요한 공통된 기준을 정의해 놓았다면 클래스를 완성하는 것이 보다 더 효율적인 작업이 가능하고, 자식 클래스에서 완성해야 하는 추상 메소드의 기능상 자유도가 보장된다는 것이다.</p>\n<p>당장 해당 클래스를 만들기가 애매한 공통적인 기능을 미리 구현할 때 사용이 가능하다.</p>\n<p>인터페이스\n구현』이라는 의미를 지닌 『implements』 키워드를 사용한다. 그리고 실제로 이를 한글로 표현할 때도 『자손 클래스가 조상 인터페이스를 구현한다.』라는 말을 사용한다.서로 관계없는 클래스들에게 관계를 맺어줄 수 있다.\n서로 상속관계에 있지 않고, 같은 조상 클래스를 갖고 있지 않은 서로 아무런 관계도 없는 클래스에게 하나의 인터페이스를 공통적으로 구현하도록 함으로써 관계를 맺어줄 수 있다.</p>\n<p>공통적인 특성들과 행동들을 한데 묶어(추상화) 클래스에서 재사용(상속)하고, 오버로딩과 오버라이딩을 통해 클래스 간 서로 다른 변화를 적용(그 결과로 다형성을 띰)한다\n궁극적으로 상속과 오버라이딩을 사용하여 다형성을 구현하기 위해 추상클래스/인터페이스 사용</p>\n<h3>추상화 (Abstraction)</h3>\n<p>상속을 목적으로 공통적인 특성들을 묶는 템플릿을 만들거면\n(객체가 필요없는 슈퍼클래스)\n-> 추상클래스 사용하기,\n-> 한 단계 더 가면 인터페이스</p>\n<h3>추상 클래스 (Abstract Class)</h3>\n<p><strong>자식 클래스들의 공통 분모</strong> 를 추상적으로 정의한 클래스</p>\n<ul>\n<li>\n<p>추상 클래스에서는 <strong>추상 메소드를 사용하여 선언만</strong> 하고, 상속을 통해 서브 클래스에서 이를 <strong>오버라이딩함으로써 구체적인 구현 방법을 정의</strong> 한다.</p>\n<ul>\n<li><strong>추상 메소드</strong> (<strong>abstract method</strong>): 선언되어 있으나 구현되어 있지 않은 메소드</li>\n</ul>\n</li>\n<li>\n<p>실제로 객체를 만드는 용도가 아니기 때문에, 추상 클래스는 <strong>객체를 만들 수 없다</strong> (컴파일 오류만 남)</p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"java\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">// 추상 클래스: 플레이어 (트레이너 플레이어, 리서처 등으로서만 의미가 있고 실제로 플레이어 객체 자체를 만드는데는 큰 의미가 없다) </span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">public</span><span class=\"mtk1\"> </span><span class=\"mtk9\">abstract</span><span class=\"mtk1\"> </span><span class=\"mtk9\">class</span><span class=\"mtk1\"> </span><span class=\"mtk7\">Player</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk9\">public</span><span class=\"mtk1\"> </span><span class=\"mtk9\">String</span><span class=\"mtk1\"> </span><span class=\"mtk3\">name</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk9\">public</span><span class=\"mtk1\"> </span><span class=\"mtk9\">abstract</span><span class=\"mtk1\"> </span><span class=\"mtk9\">void</span><span class=\"mtk1\"> </span><span class=\"mtk7\">play</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<pre class=\"andromeda vscode-highlight\" data-language=\"java\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">// 추상 클래스를 상속받는 실체 클래스들: 피카츄와 파이리</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">public</span><span class=\"mtk1\"> </span><span class=\"mtk9\">class</span><span class=\"mtk1\"> </span><span class=\"mtk7\">Trainer</span><span class=\"mtk1\"> </span><span class=\"mtk9\">extends</span><span class=\"mtk1\"> </span><span class=\"mtk7 mtku\">Player</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk9\">public</span><span class=\"mtk1\"> </span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk9\">public</span><span class=\"mtk1\"> </span><span class=\"mtk9\">abstract</span><span class=\"mtk1\"> void play() {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">public</span><span class=\"mtk1\"> class </span><span class=\"mtk9\">Charmander</span><span class=\"mtk1\"> extends Pokemon {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk9\">public</span><span class=\"mtk1\"> </span><span class=\"mtk9\">final</span><span class=\"mtk1\"> </span><span class=\"mtk9\">int</span><span class=\"mtk1\"> </span><span class=\"mtk3\">POKEDEX</span><span class=\"mtk1\"> </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">4</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<ul>\n<li>선언: <code>abstract</code> 접근 지정자 + 리턴 타입 + 이름</li>\n<li>추상 메소드를 하나라도 가지고 있거나, 추상 클래스로 선언된 경우 모두 추상 클래스로 인정된다</li>\n</ul>\n</li>\n</ul>\n<h3>인터페이스 (Interface)</h3>\n<p>서로 관계가 없는 객체들이 상호 작용을 하기 위해서 사용하는 장치나 시스템</p>\n<p>클래스가 구현해야 하는 동작을 지정하는 데 사용됨\n인터페이스는 다양한 유형의 계층이 공유하는 유사점을 인코딩하기 위해 사용되지만 반드시 클래스 관계를 구성하는 것은 아니다. 예를 들어, 인간과 앵무새는 둘 다 휘파람을 불 수 있다. 하지만 인간과 앵무새를 휘슬러 계급의 하위 계급으로 나타낸다는 것은 말이 안 된다. 오히려 그들은 동물 클래스의 하위 클래스일 가능성이 높지만, 둘 다 휘슬러 인터페이스를 구현할 것이다.</p>\n<ul>\n<li></li>\n<li>\n<p><strong>상수와 추상 메소드로만</strong> 이루어진 <strong>완전한 추상 클래스</strong> 형태이며, <strong>다중 상속을 지원</strong> 한다 (자바의 클래스는 다중 상속이 불가능하지만, 인터페이스를 이용해서 구현이 가능)</p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"java\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">// 전자기구를 </span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">public</span><span class=\"mtk1\"> </span><span class=\"mtk9\">interface</span><span class=\"mtk1\"> </span><span class=\"mtk7\">pocketball</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk9\">public</span><span class=\"mtk1\"> </span><span class=\"mtk9\">String</span><span class=\"mtk1\"> </span><span class=\"mtk7\">hit</span><span class=\"mtk1\">(</span><span class=\"mtk9\">Pokemon</span><span class=\"mtk1\"> </span><span class=\"mtk3\">p</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<ul>\n<li>선언: 접근 지정자 + <code>interface</code> + 이름</li>\n<li>모든 변수 및 메소드가 상수 및 추상 메소드이므로 <code>public static final</code>와 <code>public abstract</code> 생략 가능</li>\n</ul>\n</li>\n<li>\n<p>주로 한 클래스가 다른 클래스</p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"java\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk9\">public</span><span class=\"mtk1\"> </span><span class=\"mtk9\">class</span><span class=\"mtk1\"> </span><span class=\"mtk7\">Trainer</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk9\">public</span><span class=\"mtk1\"> </span><span class=\"mtk7\">throwPokeball</span><span class=\"mtk1\">(</span><span class=\"mtk9\">Pokemon</span><span class=\"mtk1\"> </span><span class=\"mtk3\">P</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n</li>\n<li>추상 클래스와 마찬가지로 상속을 통한 계층 구조를 만드는 목적으로 만들어졌기 때문에 객체를 생성할 수 없다 (단, 레퍼런스 변수 타입으로는 사용 가능)</li>\n</ul>\n<h4>인터페이스가 필요한 이유</h4>\n<ul>\n<li>\n<p>주로 한 클래스가 다른 클래스를\nZooKeeper클래스가 동물들의 종류에 의존적인 클래스에서 동물들의 종류와 상관없는 독립적인 클래스가 되었다는 점이다. 바로 이 점이 인터페이스의 핵심이다.\n이번에는 좀 더 개념적으로 인터페이스를 생각해 보자.\n아마도 여러분은 컴퓨터의 USB 포트에 대해서 알고 있을 것이다. USB 포트에 연결할 수 있는 기기는 하드디스크, 메모리스틱, 디지털카메라 등등 무척 많다.\n바로 이 USB포트가 물리적 세계의 인터페이스라고 할 수 있다.\nUSB포트의 규격만 알면 어떤 기기도 만들 수 있다. 또 컴퓨터는 USB 포트만 제공하고 어떤 기기가 만들어지는 지 신경쓸 필요가 없다. 바로 이 점이 인터페이스의 핵심이다.\n위에서 만든 사육사(ZooKeeper)가 어떤 육식동물(Tiger, Lion...)이던지 상관하지 않고 먹이를 주는 것처럼.. ^^</p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"java\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">// </span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">public</span><span class=\"mtk1\"> </span><span class=\"mtk9\">class</span><span class=\"mtk1\"> </span><span class=\"mtk7\">Trainer</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk9\">public</span><span class=\"mtk1\"> </span><span class=\"mtk9\">void</span><span class=\"mtk1\"> </span><span class=\"mtk7\">useStone</span><span class=\"mtk1\">(</span><span class=\"mtk9\">Pikachu</span><span class=\"mtk1\"> </span><span class=\"mtk3\">p</span><span class=\"mtk1\">) { </span><span class=\"mtk3\">System</span><span class=\"mtk1\">.</span><span class=\"mtk3\">out</span><span class=\"mtk1\">.</span><span class=\"mtk7\">println</span><span class=\"mtk1\">(</span><span class=\"mtk12\">&quot;use thunderstone&quot;</span><span class=\"mtk1\">); }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk9\">public</span><span class=\"mtk1\"> </span><span class=\"mtk9\">void</span><span class=\"mtk1\"> </span><span class=\"mtk7\">useStone</span><span class=\"mtk1\">(</span><span class=\"mtk9\">Charmander</span><span class=\"mtk1\"> </span><span class=\"mtk3\">p</span><span class=\"mtk1\">) { </span><span class=\"mtk3\">System</span><span class=\"mtk1\">.</span><span class=\"mtk3\">out</span><span class=\"mtk1\">.</span><span class=\"mtk7\">println</span><span class=\"mtk1\">(</span><span class=\"mtk12\">&quot;use firestone&quot;</span><span class=\"mtk1\">); }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    ... 수 없이 많은 포켓몬들에 대해 </span><span class=\"mtk7\">useStone</span><span class=\"mtk1\">() 정의 ...</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<pre class=\"andromeda vscode-highlight\" data-language=\"java\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk9\">public</span><span class=\"mtk1\"> </span><span class=\"mtk9\">interface</span><span class=\"mtk1\"> </span><span class=\"mtk7\">ElectricType</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">public</span><span class=\"mtk1\"> </span><span class=\"mtk9\">String</span><span class=\"mtk1\"> </span><span class=\"mtk7\">matchingStone</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">public</span><span class=\"mtk1\"> </span><span class=\"mtk9\">class</span><span class=\"mtk1\"> </span><span class=\"mtk7\">Pikachu</span><span class=\"mtk1\"> </span><span class=\"mtk9\">extends</span><span class=\"mtk1\"> </span><span class=\"mtk7 mtku\">Pokemon</span><span class=\"mtk1\"> </span><span class=\"mtk9\">implements</span><span class=\"mtk1\"> </span><span class=\"mtk7 mtku\">ElectricType</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">public</span><span class=\"mtk1\"> </span><span class=\"mtk9\">String</span><span class=\"mtk1\"> </span><span class=\"mtk7\">matchingStone</span><span class=\"mtk1\">() {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk9\">return</span><span class=\"mtk1\"> evolutionStone;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">public</span><span class=\"mtk1\"> </span><span class=\"mtk9\">class</span><span class=\"mtk1\"> </span><span class=\"mtk7\">Trainer</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk9\">public</span><span class=\"mtk1\"> </span><span class=\"mtk9\">void</span><span class=\"mtk1\"> </span><span class=\"mtk7\">useStone</span><span class=\"mtk1\">(</span><span class=\"mtk9\">ElectricType</span><span class=\"mtk1\"> </span><span class=\"mtk3\">p</span><span class=\"mtk1\">) { </span><span class=\"mtk3\">System</span><span class=\"mtk1\">.</span><span class=\"mtk3\">out</span><span class=\"mtk1\">.</span><span class=\"mtk7\">println</span><span class=\"mtk1\">(</span><span class=\"mtk12\">&quot;use thunderstone&quot;</span><span class=\"mtk1\">); }</span></span></code></pre>\n<pre class=\"andromeda vscode-highlight\" data-language=\"java\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk9\">public</span><span class=\"mtk1\"> </span><span class=\"mtk9\">interface</span><span class=\"mtk1\"> </span><span class=\"mtk7\">Type</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">public</span><span class=\"mtk1\"> </span><span class=\"mtk9\">String</span><span class=\"mtk1\"> </span><span class=\"mtk7\">getStone</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">public</span><span class=\"mtk1\"> </span><span class=\"mtk9\">interface</span><span class=\"mtk1\"> </span><span class=\"mtk7\">Fire</span><span class=\"mtk1\"> {}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">public</span><span class=\"mtk1\"> </span><span class=\"mtk9\">interface</span><span class=\"mtk1\"> </span><span class=\"mtk7\">Flying</span><span class=\"mtk1\"> {}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">public</span><span class=\"mtk1\"> </span><span class=\"mtk9\">class</span><span class=\"mtk1\"> </span><span class=\"mtk7\">Pikachu</span><span class=\"mtk1\"> </span><span class=\"mtk9\">extends</span><span class=\"mtk1\"> </span><span class=\"mtk7 mtku\">Pokemon</span><span class=\"mtk1\"> </span><span class=\"mtk9\">implements</span><span class=\"mtk1\"> </span><span class=\"mtk7 mtku\">Electric</span><span class=\"mtk1\"> {}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">public</span><span class=\"mtk1\"> </span><span class=\"mtk9\">class</span><span class=\"mtk1\"> </span><span class=\"mtk7\">Charizard</span><span class=\"mtk1\"> </span><span class=\"mtk9\">extends</span><span class=\"mtk1\"> </span><span class=\"mtk7 mtku\">Pokemon</span><span class=\"mtk1\"> </span><span class=\"mtk9\">implements</span><span class=\"mtk1\"> </span><span class=\"mtk7 mtku\">Fire</span><span class=\"mtk1\">, </span><span class=\"mtk7 mtku\">Flying</span><span class=\"mtk1\"> {}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">public</span><span class=\"mtk1\"> </span><span class=\"mtk9\">class</span><span class=\"mtk1\"> </span><span class=\"mtk7\">Trainor</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">public</span><span class=\"mtk1\"> </span><span class=\"mtk9\">void</span><span class=\"mtk1\"> </span><span class=\"mtk7\">useStone</span><span class=\"mtk1\">(</span><span class=\"mtk9\">Electric</span><span class=\"mtk1\"> </span><span class=\"mtk3\">p</span><span class=\"mtk1\">) { </span><span class=\"mtk3\">System</span><span class=\"mtk1\">.</span><span class=\"mtk3\">out</span><span class=\"mtk1\">.</span><span class=\"mtk7\">println</span><span class=\"mtk1\">(</span><span class=\"mtk12\">&quot;use thunderstone&quot;</span><span class=\"mtk1\">); }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n</li>\n</ul>\n<h4>인터페이스 상속 및 구현</h4>\n<ul>\n<li>인터페이스를 상속한 클래스를 정의함으로써 해당 클래스의 객체를 생성하여 사용할 수 있다.</li>\n<li>\n<p>상속된 클래스에서는 인터페이스의 추상 메소드 구현을 정의 (오버라이딩) 해야 사용이 가능하다 </p>\n<pre><code class=\"language-java\"></code></pre>\n</li>\n</ul>\n<h4>추상 클래스와 인터페이스 비교</h4>\n<ul>\n<li>추상 클래스: 일반 메소드 포함 가능, 상수, 변수 필드 포함 가능, 모든 서브 클래스에 공통된 메소드가 있는 경우, 추상 클래스가 적합</li>\n<li>인터페이스: 모든 메소드가 추상 메소드, 상수 필드만 포함 가능, 다중 상속 지원</li>\n</ul>\n<p>When we talk about abstract classes we are defining characteristics of an object type; specifying what an object is.\nWhen we talk about an interface and define capabilities that we promise to provide, we are talking about establishing a contract about what the object can do.</p>\n<p>Consider using abstract classes if :\nYou want to share code among several closely related classes.\nYou expect that classes that extend your abstract class have many common methods or fields, or require access modifiers other than public (such as protected and private).\nYou want to declare non-static or non-final fields.\nConsider using interfaces if :\nYou expect that unrelated classes would implement your interface. For example,many unrelated objects can implement Serializable interface.\nYou want to specify the behaviour of a particular data type, but not concerned about who implements its behaviour.\nYou want to take advantage of multiple inheritance of type.</p>\n<h3>인터페이스 레퍼런스</h3>\n<ul>\n<li>추상 클래스와 마찬가지로 상속을 통한 계층 구조를 만드는 목적으로 만들어졌기 때문에 객체를 생성할 수 없다</li>\n<li>\n<p>레퍼런스 변수 타입으로는 사용이 가능하다 </p>\n<pre><code class=\"language-java\"></code></pre>\n</li>\n</ul>\n<style class=\"vscode-highlight-styles\">\n  :root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n\n  .andromeda {\nbackground-color: #23262E;\ncolor: #D5CED9;\n}\n\n.andromeda .mtk1 { color: #D5CED9; }\n.andromeda .mtk2 { color: #23262E; }\n.andromeda .mtk3 { color: #00E8C6; }\n.andromeda .mtk4 { color: #5F6167; }\n.andromeda .mtk5 { color: #EE5D43; }\n.andromeda .mtk6 { color: #F39C12; }\n.andromeda .mtk7 { color: #FFE66D; }\n.andromeda .mtk8 { color: #F92672; }\n.andromeda .mtk9 { color: #C74DED; }\n.andromeda .mtk10 { color: #7CB7FF; }\n.andromeda .mtk11 { color: #FF00AA; }\n.andromeda .mtk12 { color: #96E072; }\n.andromeda .mtki { font-style: italic; }\n.andromeda .mtkb { font-weight: bold; }\n.andromeda .mtku { text-decoration: underline; text-underline-position: under; }\n</style>","frontmatter":{"title":"[OOP] 06. 추상 클래스와 인터페이스","date":"2019-10-01","tags":["Java","객체지향 프로그래밍"]}}},"pageContext":{"slug":"/CS_Core/OOP/6/"}}}