{"componentChunkName":"component---src-components-templates-blog-post-js","path":"/Baekjoon/1_BASICS/1_io/","result":{"data":{"markdownRemark":{"html":"<h3>알고리즘 (Algorithm)</h3>\n<ul>\n<li>프로그래밍을 많이 하는 것보다 <strong>어떻게 문제를 풀 것인지</strong> 를 생각을 더 많이 하는 것이 더 중요!</li>\n<li><strong>시간복잡도</strong> 와 <strong>입력의 크기</strong> 를 고려하여 문제 풀기</li>\n</ul>\n<h3>시간복잡도 (Time Complexity)</h3>\n<p>최악의 경우의 시간복잡도 O(n)을 통해 작성한 코드가 얼마나 걸릴 지를 예상.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">시간복잡도</th>\n<th align=\"center\">의미</th>\n<th align=\"center\">입력의 크기 for 1초</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">단순계산 (덧셈연산, 배열접근)</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">O(lgN)</td>\n<td align=\"center\">N개를 절반으로 계속해서 나눔</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">O(N)</td>\n<td align=\"center\">for문</td>\n<td align=\"center\">1억</td>\n</tr>\n<tr>\n<td align=\"center\">O(NlgN)</td>\n<td align=\"center\"></td>\n<td align=\"center\">5백만</td>\n</tr>\n<tr>\n<td align=\"center\">O(N^2)</td>\n<td align=\"center\">2중 for문</td>\n<td align=\"center\">1만</td>\n</tr>\n<tr>\n<td align=\"center\">O(N^3)</td>\n<td align=\"center\">3중 for문</td>\n<td align=\"center\">500</td>\n</tr>\n<tr>\n<td align=\"center\">O(2^N)</td>\n<td align=\"center\">크기가 N인 집합의 부분집합</td>\n<td align=\"center\">20</td>\n</tr>\n<tr>\n<td align=\"center\">O(N!)</td>\n<td align=\"center\">크기가 N인 순열</td>\n<td align=\"center\">10</td>\n</tr>\n</tbody>\n</table>\n<h3>C++ 입출력</h3>\n<ul>\n<li><code>ios_base::sync_with_stdio(false);</code>를 cin, cout 전에 사용하면 scanf, printf와 비슷한 속도로 입출력을 실행할 수 있다.</li>\n<li>\n<p><strong>입력</strong>: </p>\n<ul>\n<li><code>scanf(\"%d\\n\", &#x26;x)</code>: \\n을 자동으로 읽지 않으니 따로 명시하는 것 주의!</li>\n<li><code>cin >> s</code></li>\n<li><code>getline(cin, s)</code>: 공백 포함하여 \\n 전까지 line을 읽음 (빈줄도 읽기 가능)</li>\n<li>(cin 사용후 <code>cin.ignore</code>을 사용하여 getline 사용시 \\n flush가 필요)</li>\n</ul>\n</li>\n<li>\n<p><strong>출력</strong>:</p>\n<ul>\n<li><code>printf(\"%d\\n\", x)</code>: 사용 시 c++ string class를 읽을 수 없으니 주의!</li>\n<li><code>cout &#x3C;&#x3C; \"\\n\"</code>을 cout &#x3C;&#x3C; endl 대신 사용하기 (더 빠름)</li>\n</ul>\n</li>\n</ul>\n<h4>테스트 케이스</h4>\n<ul>\n<li>모든 테스트 케이스를 입력받은 후에 출력할 필요 없다. </li>\n<li>하나 입력받고, 하나 출력하여 진행 가능. (테스트 개수가 주어지지 않을 때 유용)</li>\n<li>\n<p>테스트 개수 t가 주어질 때, <code>while(t--)</code>을 사용.</p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk9\">int</span><span class=\"mtk1\"> t; cin </span><span class=\"mtk5\">&gt;&gt;</span><span class=\"mtk1\"> t;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">while</span><span class=\"mtk1\"> (t</span><span class=\"mtk5\">--</span><span class=\"mtk1\">) { ... }</span><span class=\"mtk4\"> // t의 개수가 0 (false)일 때까지 진행</span></span></code></pre>\n</li>\n<li>\n<p>테스트 케이스 개수가 주어지지 않을 때, 입력을 EOF까지 받으면 된다.</p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk9\">int</span><span class=\"mtk1\"> a, b;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">// 입력 개수가 일치할 경우 동안 진행</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">while</span><span class=\"mtk1\"> (</span><span class=\"mtk7\">scanf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">&quot;</span><span class=\"mtk5\">%d</span><span class=\"mtk12\"> </span><span class=\"mtk5\">%d\\n</span><span class=\"mtk12\">&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk5\">&amp;</span><span class=\"mtk1\">a, </span><span class=\"mtk5\">&amp;</span><span class=\"mtk1\">b) </span><span class=\"mtk5\">==</span><span class=\"mtk1\"> </span><span class=\"mtk6\">2</span><span class=\"mtk1\">)  { ... } </span></span></code></pre>\n<pre class=\"andromeda vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">// 입력 개수가 주어질 때까지 진행</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">while</span><span class=\"mtk1\"> (cin </span><span class=\"mtk5\">&gt;&gt;</span><span class=\"mtk1\"> a </span><span class=\"mtk5\">&gt;&gt;</span><span class=\"mtk1\"> b)  { ... } </span></span></code></pre>\n<pre class=\"andromeda vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">// 마찬가지 with getline</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">while</span><span class=\"mtk1\"> (</span><span class=\"mtk7\">getline</span><span class=\"mtk1\">(cin, a)) { ... } </span></span></code></pre>\n</li>\n</ul>\n<h4>Input 형태</h4>\n<ul>\n<li>\n<p>Input이 인접한 형태로 주어졌을 때 (ex. 12345), <code>scanf 길이 제한</code>을 사용하여 입력받기.</p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk7\">scanf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">&quot;</span><span class=\"mtk5\">%1d</span><span class=\"mtk12\">&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk5\">&amp;</span><span class=\"mtk1\">x);</span><span class=\"mtk4\"> // 12345에서 1자리씩 읽기</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk7\">scanf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">&quot;</span><span class=\"mtk5\">%10s</span><span class=\"mtk12\">&quot;</span><span class=\"mtk1\">, s);</span><span class=\"mtk4\"> // 문자열 길이 10씩 읽기</span></span></code></pre>\n</li>\n</ul>\n<style class=\"vscode-highlight-styles\">\n  :root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n\n  .andromeda {\nbackground-color: #23262E;\ncolor: #D5CED9;\n}\n\n.andromeda .mtk1 { color: #D5CED9; }\n.andromeda .mtk2 { color: #23262E; }\n.andromeda .mtk3 { color: #00E8C6; }\n.andromeda .mtk4 { color: #5F6167; }\n.andromeda .mtk5 { color: #EE5D43; }\n.andromeda .mtk6 { color: #F39C12; }\n.andromeda .mtk7 { color: #FFE66D; }\n.andromeda .mtk8 { color: #F92672; }\n.andromeda .mtk9 { color: #C74DED; }\n.andromeda .mtk10 { color: #7CB7FF; }\n.andromeda .mtk11 { color: #FF00AA; }\n.andromeda .mtk12 { color: #96E072; }\n.andromeda .mtki { font-style: italic; }\n.andromeda .mtkb { font-weight: bold; }\n.andromeda .mtku { text-decoration: underline; text-underline-position: under; }\n</style>","frontmatter":{"title":"[백준] 기초 01. 시간복잡도와 입출력","date":"2019-01-14","tags":["백준","백준 기초","알고리즘","Cpp"]}}},"pageContext":{"slug":"/Baekjoon/1_BASICS/1_io/"}}}