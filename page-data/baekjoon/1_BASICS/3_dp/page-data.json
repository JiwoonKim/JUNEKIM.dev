{"componentChunkName":"component---src-components-templates-blog-post-js","path":"/Baekjoon/1_BASICS/3_dp/","result":{"data":{"markdownRemark":{"html":"<h3>다이나믹 프로그래밍 (Dynamic Programming)</h3>\n<ul>\n<li><strong>큰 문제를 작은 부분 문제로 나눠서 푸는 알고리즘</strong>.</li>\n<li>dynamic은 사실 아무런 부여 의미가 없음 (멋있어서 이름이 지어졌다는 사실!)</li>\n<li>\n<p>두 가지 속성을 이해해야 다이나믹 프로그래밍으로 문제를 풀 수 있다.</p>\n<ol>\n<li><strong><code>Overlapping Subproblem</code></strong>: 작게 나누어진 부분 문제들이 서로 겹쳐야 한다.</li>\n<li><strong><code>Optimal Substructure</code></strong>: 같은 문제를 구할 때마다 정답이 일정하고 문제의 정답을 작은 문제의 정답으로부터 구할 수 있다.</li>\n</ol>\n</li>\n<li>작은 문제들의 정답 기록해 놓고 (<strong><code>Memoization</code></strong>) 다시 사용하는 방법을 이용한다.</li>\n</ul>\n<h4>피보나치 수 문제로 동적계획 알고리즘 이해하기</h4>\n<ul>\n<li>F0 = 0, F1 = 1, FN = FN-1 + FN-2 (N >= 2)</li>\n<li>문제: N번째 피보나치 수 구하기</li>\n<li>작은 문제: N-1번째 피보나치 수 구하기, N-2번째 피보나치 수 구하기</li>\n<li>\n<p>문제의 정답을 작은 문제의 정답을 합하는 것으로 구할 수 있다.</p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk9\">int</span><span class=\"mtk1\"> </span><span class=\"mtk3\">d</span><span class=\"mtk1\">[</span><span class=\"mtk6\">100</span><span class=\"mtk1\">];</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">int</span><span class=\"mtk1\"> </span><span class=\"mtk7\">fibonacci</span><span class=\"mtk1\">(</span><span class=\"mtk9\">int</span><span class=\"mtk1\"> </span><span class=\"mtk3\">n</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    // 베이스 케이스</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk9\">if</span><span class=\"mtk1\"> (n </span><span class=\"mtk5\">&lt;=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">1</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk9\">return</span><span class=\"mtk1\"> n;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    } </span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    // 값이 이미 존재하는 경우 (우연히 양수인 조건 사용)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk9\">else</span><span class=\"mtk1\"> </span><span class=\"mtk9\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk3\">d</span><span class=\"mtk1\">[n] </span><span class=\"mtk5\">&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk6\">0</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk9\">return</span><span class=\"mtk1\"> </span><span class=\"mtk3\">d</span><span class=\"mtk1\">[n];</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    // 기록하여 다음에 사용할 수 있게 하기 (memoriazation)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">d</span><span class=\"mtk1\">[n] </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk7\">fibonacci</span><span class=\"mtk1\">(n</span><span class=\"mtk5\">-</span><span class=\"mtk6\">1</span><span class=\"mtk1\">) </span><span class=\"mtk5\">+</span><span class=\"mtk1\"> </span><span class=\"mtk7\">fibonacci</span><span class=\"mtk1\">(n</span><span class=\"mtk5\">-</span><span class=\"mtk6\">2</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk9\">return</span><span class=\"mtk1\"> </span><span class=\"mtk3\">d</span><span class=\"mtk1\">[n];</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n</li>\n</ul>\n<h3>다이나믹을 푸는 두 가지 방법 (구현의 차이일 뿐)</h3>\n<ol>\n<li>\n<p><strong>Top-down</strong>: 큰 문제를 점점 작게 만들어나가면서 푸는 방법 </p>\n<ul>\n<li>시간복잡도: 메모에 채워야하는 칸의 수 x 1칸을 채우는 복잡도</li>\n<li>ex) 위의 피보나치 수 구하는 방식 (재귀함수 사용): O(N)</li>\n</ul>\n</li>\n<li>\n<p><strong>Bottom-up</strong>: 작은 문제부터 하나도 빠짐없이 차례대로 푸는 방법</p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk9\">int</span><span class=\"mtk1\"> </span><span class=\"mtk3\">d</span><span class=\"mtk1\">[</span><span class=\"mtk6\">100</span><span class=\"mtk1\">];</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">int</span><span class=\"mtk1\"> </span><span class=\"mtk7\">fibonacci</span><span class=\"mtk1\">(</span><span class=\"mtk9\">int</span><span class=\"mtk1\"> </span><span class=\"mtk3\">n</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    // 베이스 케이스</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">d</span><span class=\"mtk1\">[</span><span class=\"mtk6\">0</span><span class=\"mtk1\">] </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">0</span><span class=\"mtk1\">; </span><span class=\"mtk3\">d</span><span class=\"mtk1\">[</span><span class=\"mtk6\">1</span><span class=\"mtk1\">] </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">1</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    // 반복을 통해 값 쌓아나가기</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk9\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk9\">int</span><span class=\"mtk1\"> i </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">2</span><span class=\"mtk1\">; i </span><span class=\"mtk5\">&lt;=</span><span class=\"mtk1\"> n; i</span><span class=\"mtk5\">++</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk3\">d</span><span class=\"mtk1\">[i] </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk3\">d</span><span class=\"mtk1\">[i</span><span class=\"mtk5\">-</span><span class=\"mtk6\">1</span><span class=\"mtk1\">] </span><span class=\"mtk5\">+</span><span class=\"mtk1\"> </span><span class=\"mtk3\">d</span><span class=\"mtk1\">[i</span><span class=\"mtk5\">-</span><span class=\"mtk6\">2</span><span class=\"mtk1\">];</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    // 최종 값 리턴</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk9\">return</span><span class=\"mtk1\"> </span><span class=\"mtk3\">d</span><span class=\"mtk1\">[n];</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<ul>\n<li>시간복잡도: 위와 동일</li>\n<li>ex) for문으로 피보나치 수 구하는 방식: O(N)</li>\n</ul>\n</li>\n</ol>\n<p>top-down 또는 bottom-up <strong>편한대로 사용</strong> 하면 된다!</p>\n<h3>문제 풀이 전략</h3>\n<p><strong>d[n] 구하는 방식</strong> 으로 문제를 이해하기</p>\n<ol>\n<li><strong>d[i]에 무엇이 들어가야 하는지 파악</strong> 하여 식 적기 </li>\n<li>\n<p>d[n]과 d[n-1] 등의 관계가 어떻게 연결되는지 잘 살펴보기</p>\n<ul>\n<li>단순히 d[n]과 d[n-1]의 패턴을 고려할 것이 아니라,</li>\n<li><strong>문제에서 주어지는 조건들을 가지고 어떻게 d[n]을 만들어나갈 수 있는지 초점을 맞출 것!</strong></li>\n<li>\n<p>ex. 쉬운 계단 수 문제</p>\n<ul>\n<li>fail: d[n] = 2 * d[n-1] - (n-1) 방식으로 패턴을 만들어나가기 (그냥 운좋게 처음 d[1], d[2], d[3], d[4]까지는 맞으나, 그 후부터는 틀림.</li>\n<li>correct: 1~9를 숫자길이가 하나 짧은 숫자에 붙여나가는 패턴 사용하면 (문제 풀이 방식 참고)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>경우의 수가 나누어져서 따져야 하는 경우</strong>, <strong>이차원 배열 d[n][i]를 사용</strong> 하여 n번째마다 경우의 수 i를 각각 기록하는 방식 사용하기</li>\n<li><strong>최대 or 최소값</strong> 구하는 문제의 경우, 경우의 수를 따지고 그 중 </li>\n</ol>\n<style class=\"vscode-highlight-styles\">\n  :root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n\n  .andromeda {\nbackground-color: #23262E;\ncolor: #D5CED9;\n}\n\n.andromeda .mtk1 { color: #D5CED9; }\n.andromeda .mtk2 { color: #23262E; }\n.andromeda .mtk3 { color: #00E8C6; }\n.andromeda .mtk4 { color: #5F6167; }\n.andromeda .mtk5 { color: #EE5D43; }\n.andromeda .mtk6 { color: #F39C12; }\n.andromeda .mtk7 { color: #FFE66D; }\n.andromeda .mtk8 { color: #F92672; }\n.andromeda .mtk9 { color: #C74DED; }\n.andromeda .mtk10 { color: #7CB7FF; }\n.andromeda .mtk11 { color: #FF00AA; }\n.andromeda .mtk12 { color: #96E072; }\n.andromeda .mtki { font-style: italic; }\n.andromeda .mtkb { font-weight: bold; }\n.andromeda .mtku { text-decoration: underline; text-underline-position: under; }\n</style>","frontmatter":{"title":"[백준] 기초 03. 다이나믹 프로그래밍 1","date":"2019-02-03","tags":["백준","백준 기초","알고리즘","Cpp","다이나믹프로그래밍"]}}},"pageContext":{"slug":"/Baekjoon/1_BASICS/3_dp/"}}}