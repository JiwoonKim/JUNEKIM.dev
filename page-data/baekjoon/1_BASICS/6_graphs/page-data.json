{"componentChunkName":"component---src-components-templates-blog-post-js","path":"/Baekjoon/1_BASICS/6_graphs/","result":{"data":{"markdownRemark":{"html":"<h3>그래프 (Graph)</h3>\n<p><strong>정점과 간선으로 이루어진 자료구조의 일종</strong></p>\n<ul>\n<li>\n<p><strong>G = (V, E)</strong></p>\n<ul>\n<li>그래프는 정점 집합과 간선 집합으로 이루어졌다고 표현함</li>\n</ul>\n</li>\n<li>V = 정점 (node, vertex)</li>\n<li>\n<p>E = 간선 (edge)</p>\n<ul>\n<li>정점 사이를 연결; 정점간의 관계를 나타냄</li>\n</ul>\n</li>\n</ul>\n<h4># 경로 &#x26; 사이클</h4>\n<ul>\n<li><strong>경로 (Path)</strong>: <strong>정점 A에서 다른 정점 B로 가는 경로</strong> 이다.</li>\n<li><strong>사이클 (Cycle)</strong>: <strong>정점 A에서 다시 A로 돌아오는 경로</strong> 이다. (시작점 == 도착점)</li>\n</ul>\n<h4># 단순 경로 &#x26; 단순 사이클</h4>\n<p>Simple Path &#x26; Simple Cycle</p>\n<ul>\n<li>경로/사이클에서 같은 정점을 두 번 이상 방문하지 않는 경로/사이클이다.</li>\n<li>특별한 말이 없으면, <strong>일반적으로 사용하는 경로와 사이클은 단순 경로와 사이클을 말한다</strong>.</li>\n</ul>\n<h4># 방향</h4>\n<ul>\n<li><strong>방향 있는 그래프 (Directed Graph)</strong>: 간선에 방향이 있는 그래프이다.</li>\n<li>\n<p><strong>양방향 그래프 (Bidirectional Graph)</strong>: </p>\n<ul>\n<li>특별히 정해진 방향이 없는 그래프는 양방향이라고 이해</li>\n<li><strong>문제를 풀거나 그래프를 저장할 때는 양방향 그래프를 모두 방향 그래프로 바꾸어 저장함</strong></li>\n</ul>\n</li>\n</ul>\n<h4># 간선</h4>\n<ul>\n<li>간선이 여러 개인 경우 (Multiple Edge): 최단거리/비용을 구할 때면 값이 작은 것을 선택하면 된다.</li>\n<li>간성의 양 끝 점이 같은 경우 (Loop): A점에서 A점으로 바로 돌아올 수 있는 구조</li>\n</ul>\n<h4># 가중치 (Weight)</h4>\n<ul>\n<li><strong>A에서 B로 이동하는 거리, 시간, 비용을 나타낸다</strong>.</li>\n<li>가중치가 따로 표시가 되지 않는 경우, 모두 1이라고 생각하면 된다.</li>\n</ul>\n<h4># 차수 (Degree)</h4>\n<ul>\n<li><strong>정점과 연결되어 있는 간선의 개수</strong> 이다.</li>\n<li>방향이 있는 그래프의 경우, 들어오는 간선의 개수를 in-degree라고 하고 나가는 간선의 개수를 out-degree라고 한다.</li>\n</ul>\n<h3>그래프를 이용하여 문제풀기</h3>\n<ul>\n<li><strong>문제를 그래프로 모델링</strong> 하여 최단경로를 찾거나 경우의 수를 구하는 식으로 문제를 바꾸어 푼다.</li>\n<li>즉, 문제를 그래프 문제로 바꾸어 푸는 것이다.</li>\n</ul>\n<h3>그래프의 표현</h3>\n<p>그래프의 표현은 결국 <strong>간선을 저장하는 방식과 같다</strong></p>\n<ul>\n<li>정점: V개 ( ex. {1, 2, 3} ), 간선: 쌍으로 저장 ( ex. {(1,2), (1,3)} )</li>\n<li>종류: 인접 행렬, 인접 리스트, 간선 리스트</li>\n<li>\n<p><strong>일반적으로 인접 리스트를 사용한다</strong>. </p>\n<ul>\n<li>간선이 여러 개인 경우, 인접 행렬보다는 인접 리스트를 더 사용하는 것이 효율적임</li>\n</ul>\n</li>\n<li><strong>어떤 특별한 경우에만, 간선 리스트를 사용하기도 한다</strong>.</li>\n</ul>\n<h4># 인접 행렬 (Adjacency Matrix)</h4>\n<ul>\n<li>\n<p>V x V 크기의 <strong>이차원 배열로 표현</strong></p>\n<ul>\n<li>(i, j) 간선이 있으면, A[i][j] = 1 (없으면, A[i][j] = 0)</li>\n<li>가중치가 있다면 A[i][j] = 가중치</li>\n</ul>\n</li>\n<li>양방향 그래프일 경우, 행렬이 i == j를 기준으로 대칭을 이룬다.</li>\n<li>존재하지 않은 간선도 표현하기 때문에 비효율적인 측면이 존재한다.</li>\n<li>공간 복잡도: O(V^2)</li>\n</ul>\n<h3># 인접 리스트 (Adjacency List)</h3>\n<p>일반적으로 가장 많이 사용하는 경우!</p>\n<ul>\n<li><strong>링크드 리스트를 이용하여 구현</strong></li>\n<li>\n<p>A[i] = i와 연결된 정점들의 링크드 리스트</p>\n<ul>\n<li>실제로 간선이 저장되는 형태로 이해하면 됨 </li>\n<li>ex. A[1] = {2, 5} => 간선 (1, 2), (1 ,5)</li>\n</ul>\n</li>\n<li>가중치가 있다면, 정점과 가중치를 pair로 저장</li>\n<li>단, 링크드 리스트를 구현하는데 시간이 오래 걸리기 때문에 <strong>주로 vector과 같이 길이를 변경할 수 있는 배열을 이용하여 구현</strong></li>\n<li>\n<p>공간 복잡도: O(E)</p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">// vector&lt;int&gt; a를 총 n개 선언; 이차원 배열</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">vector</span><span class=\"mtk5\">&lt;</span><span class=\"mtk9\">int</span><span class=\"mtk5\">&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk3\">edges</span><span class=\"mtk1\">[n </span><span class=\"mtk5\">+</span><span class=\"mtk1\"> </span><span class=\"mtk6\">1</span><span class=\"mtk1\">];</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">edges</span><span class=\"mtk1\">[v1].</span><span class=\"mtk7\">push_back</span><span class=\"mtk1\">(v2);</span><span class=\"mtk4\"> // (v1, v2) 저장</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">edges</span><span class=\"mtk1\">[v2].</span><span class=\"mtk7\">push_back</span><span class=\"mtk1\">(v1);</span><span class=\"mtk4\"> // (v2, v1) 저장</span></span></code></pre>\n</li>\n</ul>\n<h4># 간선 리스트 (Edge List)</h4>\n<ul>\n<li>만약 STL을 사용할 수 없을 때는,</li>\n<li>배열을 이용하여 간선을 모두 저장하는 간선 리스트로 그래프를 저장한다.</li>\n<li>\n<p>e[i][2] = 간선의 개수 i만큼 저장된 간선들</p>\n<ul>\n<li>e[0][0] = 1, e[0][1] = 2 => 간선 (1, 2)</li>\n<li>e[i]의 e[i][0]이 작은 숫자부터 정렬하여 사용해야 함</li>\n</ul>\n</li>\n<li>\n<p>cnt[i] = 정점 i에 연결된 마지막 간선의 번호</p>\n<ul>\n<li>cnt[e[i][0]] += 1을 해서 구하면 됨</li>\n</ul>\n</li>\n<li>i번 정점과 연결된 간선은 cnt[i-1]부터 (cnt[i] - 1)까지 구하면 된다.</li>\n</ul>\n<h3>그래프 탐색</h3>\n<ul>\n<li>목적: <strong>모든 정점을 한 번씩만 방문하는 것!</strong></li>\n<li>DFS는 최대한 깊숙히 많이 가는 방법이고, BFS는 최대한 넓게 가는 방법이다.</li>\n</ul>\n<h3>DFS</h3>\n<p>깊이 우선 탐색</p>\n<ul>\n<li><strong>스택을 사용</strong> 한다.</li>\n<li>갈 수 있는만큼 최대한 많이 가고, 갈 수 없으면 이전 정점으로 돌아간다.</li>\n<li>\n<p>방법:</p>\n<ul>\n<li>check 배열을 사용하여 방문한 경우와 방문하지 않은 경우를 확인하며</li>\n<li>방문하는 경우에 스택에 push하여 경로를 기록</li>\n<li>더 이상 갈 수 있는 길이 없으면 스택에서 pop하여 경로를 되돌아감</li>\n<li>스택에 비어질 때까지 pop를 하고 모든 check 배열이 방문으로 체크되었는지를 확인</li>\n</ul>\n</li>\n<li><strong>구현</strong>: 재귀함수를 사용하여 구현\n- bcuz 이미 스택을 활용하기 때문에 사용하기 용이함</li>\n<li>\n<p><strong>인접 행렬을 이용한 구현</strong>: O(V^2)</p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">// x를 방문</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk9\">void</span><span class=\"mtk1\"> </span><span class=\"mtk7\">dfs</span><span class=\"mtk1\">(</span><span class=\"mtk9\">int</span><span class=\"mtk1\"> </span><span class=\"mtk3\">x</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    // 방문을 체크</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">check</span><span class=\"mtk1\">[x] </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk5\">true</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    // 경로 출력</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk7\">printf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">&quot;</span><span class=\"mtk5\">%d</span><span class=\"mtk12\">&quot;</span><span class=\"mtk1\">, x);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    // 방문하지 않은 정점으로 이동할 수 있다면 (간선 존재),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk9\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk9\">int</span><span class=\"mtk1\"> i  </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">1</span><span class=\"mtk1\">; i </span><span class=\"mtk5\">&lt;=</span><span class=\"mtk1\"> n; i</span><span class=\"mtk5\">++</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk9\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk3\">a</span><span class=\"mtk1\">[x][i] </span><span class=\"mtk5\">==</span><span class=\"mtk1\"> </span><span class=\"mtk6\">1</span><span class=\"mtk1\"> </span><span class=\"mtk5\">&amp;&amp;</span><span class=\"mtk1\"> </span><span class=\"mtk3\">check</span><span class=\"mtk1\">[i] </span><span class=\"mtk5\">==</span><span class=\"mtk1\"> </span><span class=\"mtk5\">false</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">            // 다음 정점으로 이동</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk7\">dfs</span><span class=\"mtk1\">(i);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">// 인접 행렬을 사용하였기 때문에 </span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">// a[x][i]는 간선 (x, i)의 존재여부를 나타냄</span></span></code></pre>\n</li>\n<li>\n<p><strong>인접 리스트를 이용한 구현</strong>: O(V + E)</p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk9\">void</span><span class=\"mtk1\"> </span><span class=\"mtk7\">dfs</span><span class=\"mtk1\">(</span><span class=\"mtk9\">int</span><span class=\"mtk1\"> </span><span class=\"mtk3\">x</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    // 방문을 체크</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">check</span><span class=\"mtk1\">[x] </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk5\">true</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    // 경로 출력</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk7\">printf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">&quot;</span><span class=\"mtk5\">%d</span><span class=\"mtk12\">&quot;</span><span class=\"mtk1\">, x);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    // 해당 정점과 연결된 모든 간선에서</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk9\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk9\">int</span><span class=\"mtk1\"> i </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">0</span><span class=\"mtk1\">; i </span><span class=\"mtk5\">&lt;</span><span class=\"mtk1\"> </span><span class=\"mtk3\">a</span><span class=\"mtk1\">[x].</span><span class=\"mtk7\">size</span><span class=\"mtk1\">(); i</span><span class=\"mtk5\">++</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk9\">int</span><span class=\"mtk1\"> y </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk3\">a</span><span class=\"mtk1\">[x][i];</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">        // 방문하지 않은 정점으로 이어지면</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk9\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk3\">check</span><span class=\"mtk1\">[y] </span><span class=\"mtk5\">==</span><span class=\"mtk1\"> </span><span class=\"mtk5\">false</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">            // 다음 정점으로 이동</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk7\">dfs</span><span class=\"mtk1\">(y);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n</li>\n<li>\n<p>cf) 재귀 대신 <strong>실제 스택으로 DFS 구현하기</strong> (인접 리스트 사용)</p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk9\">void</span><span class=\"mtk1\"> </span><span class=\"mtk7\">dfs</span><span class=\"mtk1\">(</span><span class=\"mtk9\">int</span><span class=\"mtk1\"> </span><span class=\"mtk3\">x</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    // 스택 선언</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    stack</span><span class=\"mtk5\">&lt;</span><span class=\"mtk9\">int</span><span class=\"mtk5\">&gt;</span><span class=\"mtk1\"> s;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    // 시작 정점부터 스택에 push</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">s</span><span class=\"mtk1\">.</span><span class=\"mtk7\">push</span><span class=\"mtk1\">(start)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    // 스택이 빌 때까지</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk9\">while</span><span class=\"mtk1\"> (</span><span class=\"mtk5\">!</span><span class=\"mtk3\">s</span><span class=\"mtk1\">.</span><span class=\"mtk7\">empty</span><span class=\"mtk1\">()) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">        // 제일 위의 정점을 pop하고</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk9\">int</span><span class=\"mtk1\"> x </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk3\">s</span><span class=\"mtk1\">.</span><span class=\"mtk7\">top</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk3\">s</span><span class=\"mtk1\">.</span><span class=\"mtk7\">pop</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk7\">printf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">&quot;</span><span class=\"mtk5\">%d</span><span class=\"mtk12\">&quot;</span><span class=\"mtk1\">, x);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">        // 해당 정점과 연결된 모든 간선에서</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk9\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk9\">int</span><span class=\"mtk1\"> i </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">0</span><span class=\"mtk1\">; i </span><span class=\"mtk5\">&lt;</span><span class=\"mtk1\"> </span><span class=\"mtk3\">a</span><span class=\"mtk1\">[x].</span><span class=\"mtk7\">size</span><span class=\"mtk1\">(); i</span><span class=\"mtk5\">++</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk9\">int</span><span class=\"mtk1\"> y </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk3\">a</span><span class=\"mtk1\">[x][i];</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">            // 방문하지 않은 정점을 스택에 push</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk9\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk3\">check</span><span class=\"mtk1\">[y] </span><span class=\"mtk5\">==</span><span class=\"mtk1\"> </span><span class=\"mtk5\">false</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">                </span><span class=\"mtk3\">check</span><span class=\"mtk1\">[x] </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk5\">true</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">                </span><span class=\"mtk3\">s</span><span class=\"mtk1\">.</span><span class=\"mtk7\">push</span><span class=\"mtk1\">(y);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n</li>\n</ul>\n<h3>BFS</h3>\n<p>너비 우선 탐색</p>\n<ul>\n<li><strong>큐를 사용</strong> 한다.</li>\n<li>모든 가중치가 1인 경우, 최단거리를 찾는 문제에서 주로 사용한다.</li>\n<li>\n<p>방법:</p>\n<ul>\n<li><strong>현재 정점에서 갈 수 있는 모든 정점을 큐에 push하면서 check 배열에 방문으로 체크</strong> (push하면서 check!)</li>\n<li>그 다음, 큐에서 다음 정점으로 이동하고 또 거기서 갈 수 있는 모든 정점을 또 큐에 push</li>\n<li>방문하지 않은 정점이 없다면 큐에서 해당 정점을 pop하고 큐의 다음 정점으로 이동</li>\n</ul>\n</li>\n<li>구현: 재귀함수보다는 <strong>루프를 사용하여 반복적으로 구현</strong></li>\n<li>\n<p><strong>인접 행렬을 이용한 구현</strong>: O(V^2)</p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk9\">void</span><span class=\"mtk1\"> </span><span class=\"mtk7\">bfs</span><span class=\"mtk1\">(</span><span class=\"mtk9\">int</span><span class=\"mtk1\"> </span><span class=\"mtk3\">start</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    // 큐 선언</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    queue</span><span class=\"mtk5\">&lt;</span><span class=\"mtk9\">int</span><span class=\"mtk5\">&gt;</span><span class=\"mtk1\"> q;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    // 시작 정점부터 큐에 push하고 체크</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">q</span><span class=\"mtk1\">.</span><span class=\"mtk7\">push</span><span class=\"mtk1\">(start);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">check</span><span class=\"mtk1\">[start] </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk5\">true</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    // 큐가 빌 때까지,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk9\">while</span><span class=\"mtk1\"> (</span><span class=\"mtk5\">!</span><span class=\"mtk3\">q</span><span class=\"mtk1\">.</span><span class=\"mtk7\">empty</span><span class=\"mtk1\">()) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">        // 제일 앞의 정점을 pop하고</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk9\">int</span><span class=\"mtk1\"> x </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk3\">q</span><span class=\"mtk1\">.</span><span class=\"mtk7\">front</span><span class=\"mtk1\">(); </span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk3\">q</span><span class=\"mtk1\">.</span><span class=\"mtk7\">pop</span><span class=\"mtk1\">()</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk7\">printf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">&quot;</span><span class=\"mtk5\">%d</span><span class=\"mtk12\">&quot;</span><span class=\"mtk1\">, x);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">        // 방문하지 않은 모든 연결된 정점을 push 및 체크</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk9\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk9\">int</span><span class=\"mtk1\"> i </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">1</span><span class=\"mtk1\">; i </span><span class=\"mtk5\">&lt;=</span><span class=\"mtk1\"> n; i</span><span class=\"mtk5\">++</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk9\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk3\">a</span><span class=\"mtk1\">[x][i] </span><span class=\"mtk5\">==</span><span class=\"mtk1\"> </span><span class=\"mtk6\">1</span><span class=\"mtk1\"> </span><span class=\"mtk5\">&amp;&amp;</span><span class=\"mtk1\"> </span><span class=\"mtk3\">check</span><span class=\"mtk1\">[i] </span><span class=\"mtk5\">==</span><span class=\"mtk1\"> </span><span class=\"mtk5\">false</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">                </span><span class=\"mtk3\">check</span><span class=\"mtk1\">[i] </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk5\">true</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">                </span><span class=\"mtk3\">q</span><span class=\"mtk1\">.</span><span class=\"mtk7\">push</span><span class=\"mtk1\">(i);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n</li>\n<li>\n<p><strong>인접리스트를 이용한 구현</strong>: O(V + E)</p>\n<pre class=\"andromeda vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk9\">void</span><span class=\"mtk1\"> </span><span class=\"mtk7\">bfs</span><span class=\"mtk1\">(</span><span class=\"mtk9\">int</span><span class=\"mtk1\"> </span><span class=\"mtk3\">start</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    queue</span><span class=\"mtk5\">&lt;</span><span class=\"mtk9\">int</span><span class=\"mtk5\">&gt;</span><span class=\"mtk1\"> q;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    // 시작 정점부터 큐에 push하고 체크</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">q</span><span class=\"mtk1\">.</span><span class=\"mtk7\">push</span><span class=\"mtk1\">(start);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">check</span><span class=\"mtk1\">[start] </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk5\">true</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    // 큐가 빌 때까지, </span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk9\">while</span><span class=\"mtk1\"> (</span><span class=\"mtk5\">!</span><span class=\"mtk3\">q</span><span class=\"mtk1\">.</span><span class=\"mtk3\">empty</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk9\">int</span><span class=\"mtk1\"> x </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk3\">q</span><span class=\"mtk1\">.</span><span class=\"mtk7\">front</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk3\">q</span><span class=\"mtk1\">.</span><span class=\"mtk7\">pop</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk7\">printf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">&quot;</span><span class=\"mtk5\">%d</span><span class=\"mtk12\">&quot;</span><span class=\"mtk1\">, x);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">        // 방문하지 않은 모든 연결된 정점을 push 및 체크</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk9\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk9\">int</span><span class=\"mtk1\"> i </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">0</span><span class=\"mtk1\">; i </span><span class=\"mtk5\">&lt;</span><span class=\"mtk1\"> </span><span class=\"mtk3\">a</span><span class=\"mtk1\">[x].</span><span class=\"mtk7\">size</span><span class=\"mtk1\">(); i</span><span class=\"mtk5\">++</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk9\">int</span><span class=\"mtk1\"> y </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk3\">a</span><span class=\"mtk1\">[x][i];</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk9\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk3\">check</span><span class=\"mtk1\">[y] </span><span class=\"mtk5\">==</span><span class=\"mtk1\"> </span><span class=\"mtk5\">false</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">                </span><span class=\"mtk3\">q</span><span class=\"mtk1\">.</span><span class=\"mtk7\">push</span><span class=\"mtk1\">(y);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">                </span><span class=\"mtk3\">check</span><span class=\"mtk1\">[y] </span><span class=\"mtk5\">=</span><span class=\"mtk1\"> </span><span class=\"mtk5\">true</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n</li>\n</ul>\n<h3>DFS vs. BFS</h3>\n<ol>\n<li>DFS는 최대한 깊숙히 많이 가는 방법이고, BFS는 최대한 넓게 가는 방법이다.</li>\n<li><strong>DFS는 스택을 사용</strong> 하고 <strong>BFS는 큐를 사용</strong> 한다.</li>\n<li>\n<p><strong>정점 체크</strong></p>\n<ul>\n<li><strong>재귀적인 DFS</strong>: 제일 먼저 <strong>해당 정점 check</strong></li>\n<li><strong>BFS</strong> &#x26; <strong>반복적인 DFS</strong>: 다음 정점 <strong>큐/스택에 push하면서 미리 check</strong> (해당 정점에서 자기 자신 check X)</li>\n</ul>\n</li>\n</ol>\n<style class=\"vscode-highlight-styles\">\n  :root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n\n  .andromeda {\nbackground-color: #23262E;\ncolor: #D5CED9;\n}\n\n.andromeda .mtk1 { color: #D5CED9; }\n.andromeda .mtk2 { color: #23262E; }\n.andromeda .mtk3 { color: #00E8C6; }\n.andromeda .mtk4 { color: #5F6167; }\n.andromeda .mtk5 { color: #EE5D43; }\n.andromeda .mtk6 { color: #F39C12; }\n.andromeda .mtk7 { color: #FFE66D; }\n.andromeda .mtk8 { color: #F92672; }\n.andromeda .mtk9 { color: #C74DED; }\n.andromeda .mtk10 { color: #7CB7FF; }\n.andromeda .mtk11 { color: #FF00AA; }\n.andromeda .mtk12 { color: #96E072; }\n.andromeda .mtki { font-style: italic; }\n.andromeda .mtkb { font-weight: bold; }\n.andromeda .mtku { text-decoration: underline; text-underline-position: under; }\n</style>","frontmatter":{"title":"[백준] 기초 06. 그래프 1","date":"2019-05-03","tags":["백준","백준 기초","알고리즘","Cpp","그래프"]}}},"pageContext":{"slug":"/Baekjoon/1_BASICS/6_graphs/"}}}