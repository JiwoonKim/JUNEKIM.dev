{"componentChunkName":"component---src-components-templates-blog-post-js","path":"/baekjoon/basic/data_structure_1","webpackCompilationHash":"18260c0ffdc80beff4d5","result":{"data":{"markdownRemark":{"html":"<h3>스택 (Stack)</h3>\n<ul>\n<li>Last-in-First-Out (<strong>LIFO</strong>)</li>\n<li>C++의 STL의 stack을 사용하여 <code class=\"language-text\">push</code>, <code class=\"language-text\">pop</code>, <code class=\"language-text\">top</code>, <code class=\"language-text\">empty</code>, <code class=\"language-text\">size</code> 연산을 사용.</li>\n<li>직접 구현할 경우, <strong>stack을 표현할 배열과 크기를 기록할 size 변수 사용</strong>.</li>\n<li>\n<p><strong>가장 가까운 원소를 O(1)만에 찾을 수 있는 장점</strong> (push &#x26; pop)을 적극적으로 활용해서 문제를 풀 것!</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">stack<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// push 연산</span>\nstack<span class=\"token punctuation\">[</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// pop 연산</span></code></pre></div>\n</li>\n</ul>\n<h4>괄호문제</h4>\n<ul>\n<li>empty check를 바탕으로 풀기 때문에 따로 스택을 만들 필요 없이, 그냥 size만 사용해도 풀 수 있다.</li>\n</ul>\n<h4>에디터문제</h4>\n<ul>\n<li>입력 크기를 고려하여 문자열 하나로 푸는 것이 아니라, 스택 두 개를 활용하여 풀어야 한다.</li>\n</ul>\n<h3>큐 (Queue)</h3>\n<ul>\n<li>First-in-First-Out (<strong>FIFO</strong>)</li>\n<li>C++의 STL의 queue을 사용하여 <code class=\"language-text\">push</code>, <code class=\"language-text\">pop</code>, <code class=\"language-text\">front</code>, <code class=\"language-text\">back</code>, <code class=\"language-text\">empty</code>, <code class=\"language-text\">size</code> 연산을 사용.</li>\n<li>한 쪽에서 자료를 넣고 다른 쪽에서 자료를 뺄 수 있는 구조.</li>\n<li>back보다 <strong>front가 더 중요</strong>.</li>\n<li><strong>양쪽에서 넣을 수 있다</strong></li>\n<li>\n<p>직접 구현할 경우, <strong>queue을 표현할 배열과 시작 인덱스를 기록할 begin 변수와 마지막 인덱스를 기록할 end를 사용</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">queue<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> end<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// push 연산</span>\nqueue<span class=\"token punctuation\">[</span>begin<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> begin <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// pop 연산</span>\nsize <span class=\"token operator\">=</span> end <span class=\"token operator\">-</span> begin<span class=\"token punctuation\">;</span>             <span class=\"token comment\">// size 연산 </span>\nempty <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>begin <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// empty 연산</span></code></pre></div>\n</li>\n</ul>\n<h4>조세퍼스문제</h4>\n<ul>\n<li>큐를 이용하여 풀기</li>\n</ul>\n<h3>덱 (Deque)</h3>\n<ul>\n<li><strong>double-ended queue</strong>: 양 끝에서 자료를 넣고 뺄 수 자료구조.</li>\n<li>C++의 STL의 queue을 사용하여 <code class=\"language-text\">push_front</code>, <code class=\"language-text\">push_back</code>, <code class=\"language-text\">pop_front</code>, <code class=\"language-text\">pop_back</code>, <code class=\"language-text\">front</code>, <code class=\"language-text\">back</code> 연산을 사용.</li>\n</ul>\n<h3>문자열 (String)</h3>\n<ul>\n<li><strong>ASCII 코드를 사용하여 저장함</strong>.</li>\n<li>\n<p>단어 길이가 필요 시, 아래와 같이 <code class=\"language-text\">len</code> 값을 따로 저장하여 사용해야 O(n) 실행 가능 (매번 루프에서 조건체크 시 strlen 호출하면 O(n^2)가 걸린다)</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li><strong>문자열 -> 정수 변환</strong>: <code class=\"language-text\">stoi()</code>, <code class=\"language-text\">stol()</code>, <code class=\"language-text\">stoll()</code> 사용</li>\n<li><strong>정수 -> 문자열 변한</strong>: <code class=\"language-text\">to_string()</code></li>\n</ul>","frontmatter":{"path":"/baekjoon/basic/data_structure_1","title":"[백준] 기초 02. 자료구조 1","date":"2019-01-25","tags":["백준","알고리즘","Cpp","자료구조"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}