{"componentChunkName":"component---src-components-templates-blog-post-js","path":"/webdevelopment/depromeet/projects/2","webpackCompilationHash":"18260c0ffdc80beff4d5","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>디프만 6기 미니 프로젝트의 서버 개발을 진행하면서 배우고 느낀 점을 정리.</p>\n</blockquote>\n<h3>프로젝트 간략 소개</h3>\n<ul>\n<li>question-ranking이라는 세미나를 위한 채팅 방 웹 애플리케이션을 기획.</li>\n<li>총 5명의 인원으로 디자이너 1명, 프론트엔드 개발자 2명과 백엔드 개발자 2명으로 진행.</li>\n<li>나는 프론트엔드 개발 역할 (API 개발)을 맡음.</li>\n</ul>\n<h3>협업에서 배운 점</h3>\n<h4>API 설계 과정</h4>\n<p>이번에 같이 진행하신 백엔드 개발자들과 설계 과정에서 소통이 원활하지 않아 개발 진행에 힘든 부분이 많았다. 효율적인 백엔드와 프론트엔드 개발을 위한 API 설계 과정을 정리하고자 함.</p>\n<ol>\n<li>먼저 백과 프론트가 같이 API 설계를 함. (대충 윤곽이 어느 정도 잡힐 정도로 회의; 그림)</li>\n<li>각각 개발을 하며, 백에서 swagger와 같은 툴을 통해 문서로 api 정리를 하여 공유.</li>\n<li>...? 프론트는 그럼 문서가 공유될 때까지 기다려야 하는 것인가??</li>\n<li>테스팅은?? 그럼 백은 또 프론트를 기다려야 하는 것인가??</li>\n</ol>\n<h4>프론트 분업 단위</h4>\n<ul>\n<li>같이 프론트를 진행한 용성님께서 개발을 시작하신지 얼마되지 않아 UI 개발과 API 개발 두 단위로 나누어 각각 개발을 진행하였다. 하지만 기능단위로 분리를 할 경우, API 개발자는 UI 코드를 전부 읽고 이해하여 코드를 바꿔야하는 상황이 일어날 수 있기에 대신, <strong>페이지 단위로 하는 방법이 효율적</strong> 으로 보인다. 각각 페이지의 UI와 API를 같이 진행해야 깔끔하게 분업이 될 것 같다.</li>\n</ul>\n<h4>Code 리뷰를 함</h4>\n<ul>\n<li>같이 프론트를 진행한 용성님께서 개발을 시작하신지 얼마되지 않아 용성님 코드를 보고 내가 리뷰를 해 볼 수 있는 기회였다. 용성님 코드를 리뷰하면서 나도 다른 사람들과 협업하면서 어떻게 하면 읽기 쉽게 코드를 정리하면 좋을 지 생각해 볼 수 있어 좋은 경험을 한 것 같다. 특히 <strong>DRY (Don't Repeat Yourself)</strong> 또는 <strong>DIE (Duplication Is Evil)</strong> 원칙을 지키며 다른 사람이 작성한 <strong>코드를 리팩토링</strong> 해보는 좋은 경험을 하였다.</li>\n</ul>\n<h3>개발하면서 배운점</h3>\n<h4>POST form vs. Ajax call</h4>\n<ul>\n<li><strong>POST request via HTML Form</strong>: form을 통해 name attribute가 정의된 input만 서버로 전달</li>\n<li><strong>Ajax call (= XMLHttpRequest)</strong>: </li>\n<li>\n<p>비교:</p>\n<ul>\n<li>\n<p><strong>공통</strong>: 둘 다 클라이언트쪽에서 서버로 데이터를 전송할 때 사용</p>\n<ul>\n<li>Both <strong>HTTP POST request 기반</strong></li>\n</ul>\n</li>\n<li>\n<p><strong>차이</strong>:</p>\n<ul>\n<li>post form: synchronous 코드 -> html, template, etc.이 return 됨 -> page reload가 필요시 사용.</li>\n<li>ajax call: asynchronous 코드 -> JSON이 return 됨 -> 다시 클리이언트쪽에서 데이터를 사용해 page의 일부분을 업데이트해야 할 때 사용.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>Summary</strong>: <strong>Post form은 클라이너트쪽에서 서버로 데이터를 보낸 후 page reload가 필요시 사용하고, Ajax call은 클라이언트쪽에서 서버로 데이터를 보낸 후 다시 json으로 데이터를 받아 비동기식으로 page의 일부분을 업데이트해야 할 때 사용</strong></li>\n</ul>\n<h4>파일 분리</h4>\n<ul>\n<li>.css, .js와 같은 파일은 <strong>재사용하는 경우가 아니면, 가능하면 항상 파일을 분리하는 편이 효율적</strong> 이다. </li>\n<li>왜냐하면, 서로 사용하는 selector명 또는 함수명이 겹쳐 오류가 날 경우가 있기 때문에 가능하면 분리를 지향.</li>\n</ul>\n<h4>CSS 코드 정리</h4>\n<ul>\n<li>css 파일 내의 코드를 어떻게 효율적으로 또는 읽기 쉽게 정리할 수 있을까 고민이 된다.</li>\n<li>nested 구조를 사용하면 좋을까?? 앞으로 더 공부해보고 싶은 부분이다.</li>\n</ul>\n<h4>Component Recipe를 만들고 싶다</h4>\n<ul>\n<li>자주 사용하는 코드를 모아 나만의 library를 만들고 싶다.</li>\n</ul>\n<h3>느낀점 (What I Felt)</h3>\n<ul>\n<li>저번 5기 파이널 프로젝트와는 달리 이번에는 서로 수준이 비슷한 정도의 팀메이트를 만나 개발하는데 큰 어려움은 없었다. 다만, 협업하는 과정에서 백엔드와의 소통이 원활하지 않아 애플리케이션의 전체적인 flow 및 API 아키텍쳐 설계를 진행하는데 많은 어려움이 있었다. 그럼에도 불구하고, 결국 애플리케이션은 완성을 무사히 마무리했으며, 이 기회를 통해 백엔드와 프론트엔드 간의 소통방식에 대해 고민하고 또 팀원이 아닌 다른 개발자분(현식님)께 여쭈어봄으로써 협업을 하는 과정에 대해 알아볼 수 있는 좋은 경험이었다고 생각한다.</li>\n<li>개발을 하면서, 내가 아직 배울 것이 많지만서도 그래도 또 <strong>많이 성장했구나</strong>라고 느낄 수 있었다. 이제는 이전처럼 내가 왜 이것도 모르지하며 불안과 초조에 떨며 걱정을 하기보다는 <strong>모를수도 있지라고 생각하고 배우는 자세로 개발에 임할 수 있도록 더욱 노력</strong> 하고자 한다.</li>\n</ul>","frontmatter":{"path":"/webdevelopment/depromeet/projects/2","title":"디프만 - 6기 미니 프로젝트","date":"2018-04-29","tags":["웹개발","디프만","프로젝트","프론트엔드","JavaScript"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}