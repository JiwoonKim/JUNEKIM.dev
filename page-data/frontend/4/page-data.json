{"componentChunkName":"component---src-components-templates-blog-post-js","path":"/frontend/4","webpackCompilationHash":"18260c0ffdc80beff4d5","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>what HTTP, CORS, and Web Sockets are</p>\n<ul>\n<li><a href=\"https://frontendmasters.com/books/front-end-handbook/2018/learning/http-networks.html\">references</a></li>\n<li><a href=\"https://tools.ietf.org/html/rfc2616\">HTTP document</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview\">great explanation on how HTTP works</a></li>\n<li><a href=\"https://code.tutsplus.com/series/http-succinctly--net-33683\">nitty gritty on HTTP</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\">CORS explanation</a></li>\n</ul>\n</blockquote>\n<h3>HTTP (Hypertext Transfer Protocol)</h3>\n<ul>\n<li>an application protocol for distributed, collaborative, hypermedia information systems.</li>\n<li>it was designed for communication between web browsers and web servers; it is the foundation of data communication for the World Wide Web</li>\n</ul>\n<h4>how HTTP works</h4>\n<ul>\n<li>\n<p>it is a <strong>request/response protocol</strong> (a.k.a <strong>client-server protocol</strong>)</p>\n<ul>\n<li>\n<p>client opens a TCP connecton and sends a <strong>request</strong> to the server:</p>\n<ul>\n<li>request method: GET, POST, etc.</li>\n<li>path of the resource to fetch: URL stripped of the protocol (http://), domain, or the TCP port (80)</li>\n<li>version of HTTP protocol</li>\n<li>optional headers that convey additional information to servers</li>\n<li>optional body content</li>\n</ul>\n</li>\n<li>\n<p>the server sends a <strong>response</strong> to the client:</p>\n<ul>\n<li>version of HTTP protocol</li>\n<li>status code and status message (ex. 200 OK)</li>\n<li>HTTP headers</li>\n<li>optional body content of fetched resource (MIME message: specifies content type so that browser knows how to interpret it accordingly)</li>\n</ul>\n</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview#HTTP_flow\">example of request and response</a></li>\n</ul>\n</li>\n<li>HTTP communication can be accomplished via a single direct connection or also through intermediaries such as the proxy, gateway, and tunnel</li>\n<li>HTTP communication usually takes place over <strong>TCP/IP connections</strong> in order to guarantee a reliable connection</li>\n</ul>\n<h4>HTTP request methods</h4>\n<ul>\n<li>GET: <em>fetch</em> an existing resource specified at the URL</li>\n<li>POST: <em>create</em> a new resource (POST requests usually carry a payload that specifies the data for the new resource)</li>\n<li>PUT: <em>update</em> an existing resource (the payload may contain updated data for the resource)</li>\n<li>DELETE: <em>delete</em> an exisiting resource</li>\n<li>some lesser used verbs: HEAD, TRACE, OPTIONS</li>\n</ul>\n<h4>Status Code</h4>\n<ul>\n<li>1xx: informational messages</li>\n<li>2xx: successful (ex. 201 OK)</li>\n<li>3xx: redirection</li>\n<li>4xx: client error (ex. 403 Forbidden, 404 Not Found)</li>\n<li>5xx: server error (ex. 500 Internal Server Error)</li>\n</ul>\n<h3>CORS (Cross-origin resource sharing)</h3>\n<ul>\n<li>a mechanism that allows restricted resources (ex. fonts) on a web page to be requested from another domain outside the domain from which resource originated</li>\n<li>at default, browsers restrict cross-origin HTTP requests initialed from within scripts (ex. XMLHttpRequest and Fetch API follow same-origin policy) for security reasons</li>\n<li>\n<p>CORS uses additional HTTP headers (a.k.a. <strong>cross-origin HTTP request</strong> in form of OPTION method) to let a web application have permission to access resource from different origin (domain, protocol, and port)</p>\n<ul>\n<li>ex. web application served on <a href=\"http://domain-a.com\">http://domain-a.com</a> uses XMLHttpRequest to make request for <a href=\"http://api.domain-b.com/data.json\">http://api.domain-b.com/data.json</a></li>\n</ul>\n</li>\n</ul>\n<h3>Web Sockets</h3>\n<ul>\n<li>a protocol providing full-duplex communication channels over a single TCP connection.</li>\n<li>XMLHttpRequest을 여러번 하는 번거로움과 비효율성을 보완하기 위해 고안됨.</li>\n</ul>","frontmatter":{"path":"/frontend/4","title":"Frontend Focus 04 - HTTP & Networks","date":"2019-02-27","tags":["웹개발","프론트엔드"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}