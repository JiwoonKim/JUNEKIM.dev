{"componentChunkName":"component---src-components-templates-blog-post-js","path":"/web50/2","webpackCompilationHash":"18260c0ffdc80beff4d5","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>Harvard's Web Programming with Python and Javascript lecture 2 정리</p>\n</blockquote>\n<h3>Python</h3>\n<h4>Basic Syntax</h4>\n<ul>\n<li><strong>indentation is important!</strong></li>\n<li>\n<p>printing</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># print string</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># print string with variable</span>\nname <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f\"Hello<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span>!<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>if-else conditions</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> x <span class=\"token operator\">></span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"+\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elif</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>for loops</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># iterate for 5 times</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token comment\"># iterate over collection</span>\n<span class=\"token keyword\">for</span> name <span class=\"token keyword\">in</span> names<span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n</li>\n<li>\n<p>functions</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">function</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> x</code></pre></div>\n<ul>\n<li>trying to call a function not defined, raises a <strong>NameError</strong> as exception</li>\n</ul>\n</li>\n</ul>\n<h4>Data Types</h4>\n<ul>\n<li>python = <strong>weakly typed language</strong></li>\n<li><code class=\"language-text\">int</code>, <code class=\"language-text\">float</code>, <code class=\"language-text\">str</code>, <code class=\"language-text\">bool</code>, <code class=\"language-text\">None</code></li>\n</ul>\n<h4>Data Structures</h4>\n<ul>\n<li>\n<p><strong>Sequences</strong></p>\n<ul>\n<li><strong>String</strong>(sequence of char): <code class=\"language-text\">name = &quot;Alice&quot;</code> (name[0]으로 접근 가능)</li>\n<li><strong>Tuple</strong>: <code class=\"language-text\">coord = (10.0, 20.0)</code> (coord[0]으로 접근 가능)</li>\n<li><strong>List</strong>: <code class=\"language-text\">names = [&quot;Alice&quot;, &quot;Bob&quot;, &quot;Charlie&quot;]</code> (names[2]로 접근 가능)</li>\n<li>if index out of range, <strong>IndexError</strong> is raised as an exception</li>\n</ul>\n</li>\n<li>\n<p><strong>Sets</strong>: unordered colection of unique elements</p>\n<ul>\n<li><strong>cannot be indexed</strong>; 중복 item은 하나로 저장됨</li>\n<li>use: <code class=\"language-text\">s = set()</code> -> <code class=\"language-text\">s.add(1)</code></li>\n</ul>\n</li>\n<li>\n<p><strong>Dictionaries</strong>: unordered collection of (keys : values)</p>\n<ul>\n<li>use: <code class=\"language-text\">ages = { &quot;Alice&quot;: 22, &quot;Bob&quot;: 27}</code> -> <code class=\"language-text\">print(ages[&quot;Alice&quot;])</code>, <code class=\"language-text\">ages[&quot;Alice&quot;] += 1</code></li>\n</ul>\n</li>\n</ul>\n<h4>Modules</h4>\n<p><strong>separate <code class=\"language-text\">.py</code> files of code</strong> (= <strong>library</strong>)</p>\n<ul>\n<li>ex: <code class=\"language-text\">from functions import square</code></li>\n<li>\n<p>to enable only certain functions to be called instead of entire code in the separated file, <strong>must encapsulate entire code under <code class=\"language-text\">main</code> and include call to main function</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    </code></pre></div>\n</li>\n</ul>\n<h4>Classes</h4>\n<p>a way to <strong>define a new custom python datatype</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># define class</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x\n        self<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y\n<span class=\"token comment\"># initialize instance of class</span>\np <span class=\"token operator\">=</span> Point<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\npoint<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>HTTP</h3>\n<p><strong>protocol for receiving requests and sending responses</strong></p>\n<ul>\n<li>system the internet uses to interact and communicate btw computers and servers</li>\n<li>having written a website, the next step is to write the code that takes care of the <strong>server-side processing</strong> (receiving and interpreting requests and generating responses for the user)</li>\n</ul>\n<h3>Flask</h3>\n<p><strong>python code for a back-end server</strong>, listening for requests and returning somekind of response</p>\n<ul>\n<li><strong>micro-framework</strong> written in python that makes it easier to get a simple web application up and running</li>\n<li>useful in that helps developers focus on the requests from and responses to users</li>\n<li><strong>designed in routes</strong> (in part of the URL) which determine which page is being requested</li>\n<li>\n<p>use: </p>\n<ul>\n<li><code class=\"language-text\">export FLASK_APP = {app_name}.py</code>: enable flask to know that file is the web server program</li>\n<li><code class=\"language-text\">flask run</code>: run the web server program</li>\n</ul>\n</li>\n</ul>\n<h4>Flask App</h4>\n<ul>\n<li>\n<p>a simple app</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># use flask as micro-framework</span>\n<span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># define function for route</span>\n@app<span class=\"token punctuation\">.</span>route<span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello, world!\"</span></code></pre></div>\n</li>\n<li>\n<p><strong>use data from url (get request)</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># when any string is entered in route, </span>\n<span class=\"token comment\"># it will be stored as name and used in the function</span>\n@app<span class=\"token punctuation\">.</span>route<span class=\"token punctuation\">(</span><span class=\"token string\">\"/&lt;string: name>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># return inline html tags</span>\n    <span class=\"token keyword\">return</span> f<span class=\"token string\">\"&lt;h1>hello, {name}!&lt;/h1>\"</span></code></pre></div>\n</li>\n</ul>\n<h4>Rendering Templates</h4>\n<p><strong>return html templates</strong>, maybe plugged with data (instead of using inline html tags)</p>\n<ul>\n<li>\n<p>use: <code class=\"language-text\">from flask import render_template</code></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask<span class=\"token punctuation\">,</span> render_template\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># return index.html</span>\n@app<span class=\"token punctuation\">.</span>route<span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">\"index.html\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li><strong>template file should be stored in directory</strong> <code class=\"language-text\">templates</code></li>\n<li>\n<p>can also <strong>pass arguments</strong> to render_template: plug in data into templates</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\nheadline <span class=\"token operator\">=</span> <span class=\"token string\">\"hello, world!\"</span>\n<span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">\"index.html\"</span><span class=\"token punctuation\">,</span> headline<span class=\"token operator\">=</span>headline<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<h4>Jinja2</h4>\n<p>templating language for flask's render_template</p>\n<ul>\n<li>template is rendered by Jinja2 language</li>\n<li>\n<p>use: <code class=\"language-text\">{{ }}</code></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- index.html --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span> {{ headline }} <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></code></pre></div>\n</li>\n<li>\n<p>conditions: <code class=\"language-text\">{% if %}</code>, <code class=\"language-text\">{% else %}</code>, <code class=\"language-text\">{% endif %}</code></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">{% if  new_year %}\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span> Happy New Year! <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n{% else %}\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span> Not Yet :( <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n{% endif %}</code></pre></div>\n</li>\n<li>\n<p>loops: <code class=\"language-text\">{% for %}</code>, <code class=\"language-text\">{% endfor %}</code></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">{% for name in names %}\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> {{ name }} <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n{% endfor %}</code></pre></div>\n</li>\n<li><strong>template inheritance</strong>: <strong>factor out commonalities into layout templates</strong> using <code class=\"language-text\">blocks</code></li>\n<li>\n<p><strong>link</strong> different parts of your web app: use <code class=\"language-text\">{{ url_for( &#39;route_name&#39; ) }}</code></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>{{ url_for( <span class=\"token punctuation\">'</span>route_name<span class=\"token punctuation\">'</span> ) }}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>link<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></code></pre></div>\n</li>\n</ul>\n<h4>Forms</h4>\n<ul>\n<li>\n<p><strong>forms</strong> w/ backend to store data</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- hello.html --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>post<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span>submit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># backend web server</span>\n<span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask<span class=\"token punctuation\">,</span> render_template<span class=\"token punctuation\">,</span> request\n@app<span class=\"token punctuation\">.</span>route<span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">\"hello.html\"</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>name<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<h4>Storing data in Web servers</h4>\n<ul>\n<li><strong>global variables</strong> in python: stores data as long as server is alive, but restarts when server is down (volatile)</li>\n<li>\n<p><strong>sessions</strong> (a.k.a cookies): stores data that pertains to a particular user, regardless of whether server is up or down (involatile)</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask<span class=\"token punctuation\">,</span> render_template<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> session\n<span class=\"token keyword\">from</span> flask_session <span class=\"token keyword\">import</span> Session\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># configure sessions</span>\napp<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">[</span><span class=\"token string\">\"SESSION_PERMANENT\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\napp<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">[</span><span class=\"token string\">\"SESSION_TYPE\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"filesystem\"</span>\nSession<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># set route</span>\n@app<span class=\"token punctuation\">.</span>route<span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"GET, POST\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># if notes doesn't exist in sessions, initialize notes</span>\n    <span class=\"token keyword\">if</span> session<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"notes\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        session<span class=\"token punctuation\">[</span><span class=\"token string\">\"notes\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\"># if post request, store note data into sessions from form</span>\n    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">:</span>\n        note <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"note\"</span><span class=\"token punctuation\">)</span>\n        session<span class=\"token punctuation\">[</span><span class=\"token string\">\"notes\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># return template using notes data from sessions</span>\n    <span class=\"token comment\"># if get request, automatically fetch notes data</span>\n    <span class=\"token comment\"># if post request, update notes data and fetch that notes data</span>\n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">\"index.html\"</span><span class=\"token punctuation\">,</span> notes<span class=\"token operator\">=</span>session<span class=\"token punctuation\">[</span><span class=\"token string\">\"notes\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>databases: for more complicated data (involatile)</li>\n</ul>","frontmatter":{"path":"/web50/2","title":"Web50 lecture 2 - Python & Flask","date":"2018-07-21","tags":["CS50","Web50","Flask"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}