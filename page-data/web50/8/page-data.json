{"componentChunkName":"component---src-components-templates-blog-post-js","path":"/web50/8","webpackCompilationHash":"18260c0ffdc80beff4d5","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>Harvard's Web Programming with Python and Javascript lecture 8 정리</p>\n</blockquote>\n<h3>Testing</h3>\n<p><strong>making sure code works</strong></p>\n<ul>\n<li>to ensure that changes to a function don't cause other parts of the application to break</li>\n<li>also to ensure that the application can handle various types of inputs</li>\n<li>\n<p>learn:</p>\n<ul>\n<li>how to build out a system for testing</li>\n<li>how to test thing on your own</li>\n<li>tools to facilitate the testing process</li>\n</ul>\n</li>\n</ul>\n<h3>Basic Python Testing</h3>\n<h4>Testing Function</h4>\n<p>write test function code</p>\n<ul>\n<li>testing cases manually is tedious work</li>\n<li>\n<p>instead, <strong>write test function code</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># import function code to test</span>\n<span class=\"token keyword\">from</span> prime <span class=\"token keyword\">import</span> is_prime\n<span class=\"token comment\"># define testing function</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_prime</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> expected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token keyword\">if</span> is_prime<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> expected<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token string\">\"ERROR on is_prime({n}), expected {expected}\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>\n<p><strong>run test cases</strong> either <strong>in main function</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">## same file as above</span>\n<span class=\"token comment\"># run test cases </span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\ntest_prime<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\ntest_prime<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\ntest_prime<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\ntest_prime<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>or <strong>in bash scrip</strong>t: <code class=\"language-text\">./tests0.sh</code></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">python3 -c <span class=\"token string\">\"from tests0 import test_prime; test_prime(-1, False)\"</span>\npython3 -c <span class=\"token string\">\"from tests0 import test_prime; test_prime(1, False)\"</span>\npython3 -c <span class=\"token string\">\"from tests0 import test_prime; test_prime(2, True)\"</span>\npython3 -c <span class=\"token string\">\"from tests0 import test_prime; test_prime(8, False)\"</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h4>Assert</h4>\n<p>python's built-in command</p>\n<ul>\n<li><code class=\"language-text\">assert {expression}</code>: asserts that the <strong>following expression is true</strong></li>\n<li>\n<p>if not true, <strong>assertion error</strong> is raised</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># assert (function to code == expected result)</span>\n<span class=\"token keyword\">assert</span> square<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">100</span></code></pre></div>\n</li>\n</ul>\n<h4>Unittest</h4>\n<p>built-in library for testing in python</p>\n<ul>\n<li><strong>define class w/ test cases as methods</strong></li>\n<li>\n<p>use: <code class=\"language-text\">assertTrue()</code>, <code class=\"language-text\">assertFalse()</code>, <code class=\"language-text\">assertEqual()</code>, <code class=\"language-text\">assertNotEqual</code>, <code class=\"language-text\">assertIn</code>, <code class=\"language-text\">assertNotIn</code></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># import unittest library</span>\n<span class=\"token keyword\">import</span> unittest\n<span class=\"token comment\"># import function to test</span>\n<span class=\"token keyword\">from</span> prime <span class=\"token keyword\">import</span> is_prime\n<span class=\"token comment\"># define tests</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Tests</span><span class=\"token punctuation\">(</span>unittest<span class=\"token punctuation\">.</span>Testcase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_1</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Check that 1 is not prime.\"\"\"</span>\n    self<span class=\"token punctuation\">.</span>assertFalse<span class=\"token punctuation\">(</span>is_prime<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_2</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Check that 2 is prime.\"\"\"</span>\n    self<span class=\"token punctuation\">.</span>assertTrue<span class=\"token punctuation\">(</span>is_prime<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_8</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Check that 8 is not prime.\"\"\"</span>\n    self<span class=\"token punctuation\">.</span>assertFalse<span class=\"token punctuation\">(</span>is_prime<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># run tests</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n  unittest<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<h3>Testing Django</h3>\n<p>testing for Django app (airline project - flights app)</p>\n<ul>\n<li>Django comes w/ its own testing framework</li>\n</ul>\n<h4>Testing Models (the Backend)</h4>\n<ul>\n<li>\n<p>consider testing example function in <em>flights/models.py</em></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">## inside Flight model</span>\n<span class=\"token comment\"># create function to check if flight is valid</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">is_valid_flight</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>origin <span class=\"token operator\">!=</span> self<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span> <span class=\"token operator\">and</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>duration <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">flights/tests.py</code>: create class of test functions to test cases for the models</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># testcase library (extends unittest library)</span>\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>test <span class=\"token keyword\">import</span> TestCase\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Airport<span class=\"token punctuation\">,</span> Flight\n<span class=\"token comment\"># create tests</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ModelsTestCase</span><span class=\"token punctuation\">(</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token comment\"># run setup (before any custom tests run)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># create airports</span>\n    a1 <span class=\"token operator\">=</span> Airport<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>code<span class=\"token operator\">=</span><span class=\"token string\">\"AAA\"</span><span class=\"token punctuation\">,</span> city<span class=\"token operator\">=</span><span class=\"token string\">\"City A\"</span><span class=\"token punctuation\">)</span>\n    a2 <span class=\"token operator\">=</span> Airport<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>code<span class=\"token operator\">=</span><span class=\"token string\">\"BBB\"</span><span class=\"token punctuation\">,</span> city<span class=\"token operator\">=</span><span class=\"token string\">\"City B\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># create flights</span>\n    Flight<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>origin<span class=\"token operator\">=</span>a1<span class=\"token punctuation\">,</span> destination<span class=\"token operator\">=</span>a2<span class=\"token punctuation\">,</span> duration<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    Flight<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>origin<span class=\"token operator\">=</span>a1<span class=\"token punctuation\">,</span> destination<span class=\"token operator\">=</span>a1<span class=\"token punctuation\">,</span> duration<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    Flight<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>origin<span class=\"token operator\">=</span>a1<span class=\"token punctuation\">,</span> destination<span class=\"token operator\">=</span>a2<span class=\"token punctuation\">,</span> duration<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># test departures keywork (in Flight model)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_departures_count</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    a <span class=\"token operator\">=</span> Airport<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>code<span class=\"token operator\">=</span><span class=\"token string\">\"AAA\"</span><span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>departures<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># test arrivals keywork (in Flight model)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_arrivals_count</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    a <span class=\"token operator\">=</span> Airport<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>code<span class=\"token operator\">=</span><span class=\"token string\">\"AAA\"</span><span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>arrivals<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># test is_valid_flight function (in Flight model)</span>\n<span class=\"token comment\"># test for valid flight</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_valid_flight</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    a1 <span class=\"token operator\">=</span> Airport<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>code<span class=\"token operator\">=</span><span class=\"token string\">\"AAA\"</span><span class=\"token punctuation\">)</span>\n    a2 <span class=\"token operator\">=</span> Airport<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>code<span class=\"token operator\">=</span><span class=\"token string\">\"BBB\"</span><span class=\"token punctuation\">)</span>\n    f <span class=\"token operator\">=</span> Flight<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>origin<span class=\"token operator\">=</span>a1<span class=\"token punctuation\">,</span> destination<span class=\"token operator\">=</span>a2<span class=\"token punctuation\">,</span> duration<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>assertTrue<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>is_valid_flight<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># test for invalid flight</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_invalid_flight</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    a1 <span class=\"token operator\">=</span> Airport<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>code<span class=\"token operator\">=</span><span class=\"token string\">\"AAA\"</span><span class=\"token punctuation\">)</span>\n    f <span class=\"token operator\">=</span> Flight<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>origin<span class=\"token operator\">=</span>a1<span class=\"token punctuation\">,</span> destination<span class=\"token operator\">=</span>a1<span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>assertFalse<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>is_valid_flight<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># test for invalid flight's duration</span>\n<span class=\"token keyword\">def</span> test_valid_flight<span class=\"token punctuation\">)</span>duration<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    a1 <span class=\"token operator\">=</span> Airport<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>code<span class=\"token operator\">=</span><span class=\"token string\">\"AAA\"</span><span class=\"token punctuation\">)</span>\n    a2 <span class=\"token operator\">=</span> Airport<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>code<span class=\"token operator\">=</span><span class=\"token string\">\"BBB\"</span><span class=\"token punctuation\">)</span>\n    f <span class=\"token operator\">=</span> Flight<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>origin<span class=\"token operator\">=</span>a1<span class=\"token punctuation\">,</span> destination<span class=\"token operator\">=</span>a2<span class=\"token punctuation\">,</span> duration<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>assertTrue<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>is_valid_flight<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p><strong>run tests</strong>: <code class=\"language-text\">python manage.py test</code></p>\n<ul>\n<li><strong>creates test database</strong> (so that the test cases don't actually manipulate the real database); <strong>destroyed after running tests</strong></li>\n</ul>\n</li>\n</ul>\n<h4>Testing Views (the Frontend)</h4>\n<ul>\n<li>\n<p><code class=\"language-text\">flights/tests.py</code>: create class of test functions to test cases for the views using <code class=\"language-text\">Client</code> library</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Max\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>test <span class=\"token keyword\">import</span> Client<span class=\"token punctuation\">,</span> TestCase\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Airport<span class=\"token punctuation\">,</span> Flight<span class=\"token punctuation\">,</span> Passenger\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token comment\"># create tests</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FlightsTestCase</span><span class=\"token punctuation\">(</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token comment\"># ... same setup and model testing as above</span>\n<span class=\"token comment\"># test index view</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_index</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    c <span class=\"token operator\">=</span> Client<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    response <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">[</span><span class=\"token string\">\"flights\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># test for valid view page</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_valid_flight_page</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    a1 <span class=\"token operator\">=</span> Airport<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>code<span class=\"token operator\">=</span><span class=\"token string\">\"AAA\"</span><span class=\"token punctuation\">)</span>\n    f <span class=\"token operator\">=</span> Flight<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>origin<span class=\"token operator\">=</span>a1<span class=\"token punctuation\">,</span> destination<span class=\"token operator\">=</span>a1<span class=\"token punctuation\">)</span>\n    c <span class=\"token operator\">=</span> Client<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    response <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>f<span class=\"token string\">\"/{f.id}\"</span><span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># test for invalid view page</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_invalid_flight_page</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    max_id <span class=\"token operator\">=</span> Flight<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>aggregate<span class=\"token punctuation\">(</span>Max<span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"ide__max\"</span><span class=\"token punctuation\">]</span>\n    c <span class=\"token operator\">=</span> Client<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    response <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>f<span class=\"token string\">\"/{max_id + 1}\"</span><span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">,</span> <span class=\"token number\">404</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># test for passengers in flight page</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_flight_page_passenger</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    f <span class=\"token operator\">=</span> Flight<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>pk<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    p <span class=\"token operator\">=</span> Passenger<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>first<span class=\"token operator\">=</span><span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> last<span class=\"token operator\">=</span><span class=\"token string\">\"Adams\"</span><span class=\"token punctuation\">)</span>\n    f<span class=\"token punctuation\">.</span>passengers<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n    c <span class=\"token operator\">=</span> Client<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    response <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>f<span class=\"token string\">\"/{f.id}\"</span><span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">[</span><span class=\"token string\">\"passengers\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># test for non passengers in flight page</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_flight_page_non_passengers</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    f <span class=\"token operator\">=</span> Flight<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>pk<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    p <span class=\"token operator\">=</span> Passenger<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>first<span class=\"token operator\">=</span><span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> last<span class=\"token operator\">=</span><span class=\"token string\">\"Adams\"</span><span class=\"token punctuation\">)</span>\n    c <span class=\"token operator\">=</span> Client<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    response <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>f<span class=\"token string\">\"/{f.id}\"</span><span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">[</span><span class=\"token string\">\"non_passengers\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>\n<p><code class=\"language-text\">Client</code> library: <strong>simulate a web client for testing purposes</strong></p>\n<ul>\n<li>can make requests to and get responses from the web server</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3>Testing Browser Behavior</h3>\n<p>testing browser behavior, including javascript code</p>\n<h4>Selenium</h4>\n<p>a browser testing tool for testing browser behavior</p>\n<ul>\n<li>\n<p>uses <strong>web driver which enables python code to pretend to be a user interacting w/ a webpage</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> pathlib\n<span class=\"token keyword\">import</span> unittest\n<span class=\"token keyword\">from</span> selenium <span class=\"token keyword\">import</span> webdriver\n<span class=\"token comment\"># turn a filename into full path for browser to use</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">file_uri</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> pathlib<span class=\"token punctuation\">.</span>Path<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>abspath<span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>as_uri<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># set web driver to simulate user interaction</span>\ndriver <span class=\"token operator\">=</span> webdriver<span class=\"token punctuation\">.</span>Chrome<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># define tests</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">WebpageTests</span><span class=\"token punctuation\">(</span>unittest<span class=\"token punctuation\">.</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># check the title</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_title</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        uri <span class=\"token operator\">=</span> file_uri<span class=\"token punctuation\">(</span><span class=\"token string\">\"counter.html\"</span><span class=\"token punctuation\">)</span>\n        driver<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Counter\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># test increase in counter</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_increase</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        driver<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>file_uri<span class=\"token punctuation\">(</span><span class=\"token string\">\"counter.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        increase <span class=\"token operator\">=</span> driver<span class=\"token punctuation\">.</span>find_element_by_id<span class=\"token punctuation\">(</span><span class=\"token string\">\"increase\"</span><span class=\"token punctuation\">)</span>\n        increase<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">.</span>find_element_by_tag_name<span class=\"token punctuation\">(</span><span class=\"token string\">\"h1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># test decrease in counter</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_decrease</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        driver<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>file_uri<span class=\"token punctuation\">(</span><span class=\"token string\">\"counter.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        decrease <span class=\"token operator\">=</span> driver<span class=\"token punctuation\">.</span>find_element_by_id<span class=\"token punctuation\">(</span><span class=\"token string\">\"decrease\"</span><span class=\"token punctuation\">)</span>\n        decrease<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">.</span>find_element_by_tag_name<span class=\"token punctuation\">(</span><span class=\"token string\">\"h1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span> <span class=\"token string\">\"-1\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># test multiple increases in counter</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_multiple_increase</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        driver<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>file_uri<span class=\"token punctuation\">(</span><span class=\"token string\">\"counter.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        increase <span class=\"token operator\">=</span> driver<span class=\"token punctuation\">.</span>find_element_by_id<span class=\"token punctuation\">(</span><span class=\"token string\">\"increase\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            increase<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">.</span>find_element_by_tag_name<span class=\"token punctuation\">(</span><span class=\"token string\">\"h1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>","frontmatter":{"path":"/web50/8","title":"Web50 lecture 8 - Testing","date":"2019-06-18","tags":["CS50","Web50","Testing"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}