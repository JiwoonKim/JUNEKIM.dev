{"data":{"markdownRemark":{"html":"<h3>수학</h3>\n<p>알고리즘 문제를 풀 때 필요한 수학 공식들</p>\n<h4>나머지 연산</h4>\n<p>(A + B) % C = [(A % C) + (B % C)] % C</p>\n<ul>\n<li>\n<p>다이나믹 문제에서 주로 나온다</p>\n<ul>\n<li>경우의 수를 구해야 할 때 그 수가 너무 커서 범위가 overflow 되지 않기 위해 결과값에 나머지를 연산하게끔 한다</li>\n</ul>\n</li>\n</ul>\n<h4>최대공약수 (GCD)</h4>\n<p>Greatest Common Divisor</p>\n<ol>\n<li>2부터 min(A, B)까지 모든 정수로 나누어보는 방법: O(N)</li>\n<li>\n<p><strong>유클리드 알고리즘</strong> (Euclidean algorithm): <strong>gcd(a, b) = gcd(b, a % b)</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// 재귀함수로 구현한 유클리드 알고리즘</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">%</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 비 재귀방식으로 구현한 유클리드 알고리즘</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> a <span class=\"token operator\">%</span> b<span class=\"token punctuation\">;</span>\n    a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n    b <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>최대공약수가 1인 두 수의 관계를 <strong>서로소(Coprime)</strong>라고 한다</li>\n</ol>\n<h4>최소공배수 (LCM)</h4>\n<p>Least Common Multiplier</p>\n<ul>\n<li>최대공배수를 응용하여 구할 수 있다: LCM * GCD = A * B</li>\n<li><strong>LCM = (A * B) / GCD</strong></li>\n<li>최소공배수를 구할 때는 항상 결과값의 <strong>범위를 고려해서 자료형을 선언</strong> 해야 한다.</li>\n</ul>\n<h4>진법 변환 (Base Conversion)</h4>\n<ol>\n<li>\n<p><strong>10진법 -> n진법 바꾸기</strong></p>\n<ul>\n<li>숫자가 <strong>0이 될 때까지 나머지를 계속해서 구해 반대의 순서로 나열</strong> 하면 된다.</li>\n<li>\n<p>ex. 11 -> 3진법: 102</p>\n<ul>\n<li>11/3 = 3 ... 2 | 3/3 = 1 ... 0 | 1/3 = 0 ... 1 => 102</li>\n</ul>\n</li>\n<li>\n<p>단, 숫자가 0일 경우는 예외로 처리해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// 숫자가 0일 경우, 예외로 처리하여 0 바로 출력</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\nresult <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nstring s<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\ns <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">%</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// n 진법으로 변환</span>\nnum <span class=\"token operator\">/</span><span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 반대의 순서로 나열</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>n진법 -> 10진법 바꾸기</strong></p>\n<ul>\n<li><em>n진법으로 표현된 수의 k 자리의 수에 n^k을 곱하면서 더해</em> 가면 된다.</li>\n<li>ex. 3진법 수 102 -> 11 (= 2 * (3^0) + 0 * (3^1) + 1 * (3^2) )</li>\n<li>다만, 위의 방법으로 하면 n진법 수의 가장 끝자리 n-1부터 시작하여 0까지 거꾸로 더해야 하므로 불편한 단점이 있다.</li>\n<li>\n<p>so instead, <strong>n진법 수의 0자리부터 시작하여 매번 값에 n을 곱해주며 더해가면 된다</strong> (<em>k자리를 체크할 필요가 없음</em>)</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">string N<span class=\"token punctuation\">;</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 주어진 b진법의 수 N</span>\n<span class=\"token keyword\">int</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// </span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 매 자리마다 이미 더해진 값에 b 곱하기</span>\nresult <span class=\"token operator\">=</span> result <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 현재 자리의 값을 10진법으로 변환하여 더하기</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'0'</span> <span class=\"token operator\">&lt;=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> '<span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\nresult <span class=\"token operator\">+</span><span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\nresult <span class=\"token operator\">+</span><span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token string\">'A'</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ol>\n<h4></h4>","frontmatter":{"path":"/algorithm/baekjoon_basic/math","title":"[백준] 강의노트 04. 수학 1","date":"2019-03-29","tags":["백준","알고리즘","C++","강의노트","수학"]}}},"pageContext":{}}