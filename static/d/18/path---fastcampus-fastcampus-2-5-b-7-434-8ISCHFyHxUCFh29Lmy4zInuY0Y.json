{"data":{"markdownRemark":{"html":"<blockquote>\n<p>C++ 언어 중 몰랐던 부분 또는 부족했던 부분만 위주로 정리.\n주로 객체지향 프로그래밍 (OOP)를 위주로 정리</p>\n</blockquote>\n<ul>\n<li><a href=\"#namespace\">Namespace</a></li>\n<li><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4_class\">Class</a></li>\n<li><a href=\"#%ED%85%9C%ED%94%8C%EB%A6%BF_template\">Template</a></li>\n<li><a href=\"#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88_container\">Container</a></li>\n<li><a href=\"#%EC%98%88%EC%99%B8%EC%B2%98%EB%A6%AC_exception_handling\">Exception Handling</a></li>\n</ul>\n<h3>namespace</h3>\n<ul>\n<li><strong>특정한 범위</strong> 또는 <strong>영역</strong>에 이름을 설정할 수 있게 한다.</li>\n<li>\n<p>서로 다른 개발자가 공동으로 프로젝트를 진행할 때 <strong>각자 개발한 모듈을 정리해서 하나로 합칠 때 유용</strong> 하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 같은 이름의 print이지만 다른 함수가 실행된다</span>\n<span class=\"token keyword\">namespace</span> A<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"A\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">namespace</span> B<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"B\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h3>클래스 (class)</h3>\n<ul>\n<li><strong>객체 지향 프로그래밍 (Object-oriented programming)</strong> 을 가능하도록 해주는 <strong>기본적인 단위</strong>.</li>\n<li>클래스를 사용함으로써 <strong>추상화(abstraction)</strong> 와 <strong>캡슐화(encapsulation)</strong> 를 이루고, 접근 한정자를 통해 <strong>정보 은닉(data hiding)</strong> 을 이룬다.</li>\n<li><strong>클래스(class)</strong> 를 통해 <strong>객체(object)의 틀을 정의</strong> 하고, 이 틀을 바탕으로 인스턴스(instance)를 만들 수 있다. </li>\n<li>\n<p>기본적으로, <strong>private 영역에서 멤버(member)를 정의</strong> 하고 <strong>public 영역에서 메소드(method)를 정의</strong> 한다. </p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// 클래스 정의</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Character</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>    <span class=\"token comment\">// private 접근 한정자를 사용함으로써 정보 은닉</span>\n    string name<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> hp<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Character</span><span class=\"token punctuation\">(</span>string name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> hp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 생성자를 통해 초기화를 할 수 있도록 정의</span>\n        <span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// this 포인터를 사용하여 </span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hp <span class=\"token operator\">=</span> hp<span class=\"token punctuation\">;</span>               <span class=\"token comment\">// 현재 instance의 멤버와 동일한 이름의 변수를 구분</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">Character</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Character<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 복사 생성자를 사용할 수 있도록 정의</span>\n        name <span class=\"token operator\">=</span> other<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n        hp <span class=\"token operator\">=</span> other<span class=\"token punctuation\">.</span>hp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> cout <span class=\"token operator\">&lt;&lt;</span> name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" : \"</span> <span class=\"token operator\">&lt;&lt;</span> hp <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">Character</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>      <span class=\"token comment\">// 소멸자를 정의</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[객체가 소멸됩니다]\"</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// 클래스의 객체 선언</span>\nCharacter <span class=\"token function\">char1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"드래곤\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 생성자를 사용하여 객체 선언</span>\nCharacter <span class=\"token function\">char2</span><span class=\"token punctuation\">(</span>char1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 복제 생성자를 사용하여 객체 선언</span>\n<span class=\"token comment\">// 동적 할당으로 객체 선언 및 소멸</span>\nCharacter<span class=\"token operator\">*</span> char3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Character</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"슬라임\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// (포인터 변수 선언 필수)</span>\n<span class=\"token keyword\">delete</span> char3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 동적 할당이 아니면 오류가 남</span></code></pre></div>\n</li>\n</ul>\n<h4>상속 (inheritance)</h4>\n<ul>\n<li>부모 클래스(Parent class)와 자식 클래스(Child class)의 상속 관계를 통해 <strong>소스코드의 재사용성을 증대</strong> 할 수 있다.</li>\n<li>자식 클래스는 <code class=\"language-text\">:</code>을 통해 부모 클래스의 속성들을 상속받는다.</li>\n<li>자식 클래스의 인스턴스를 <strong>생성 시</strong>, <em>부모 클래스의 생성자를 먼저 호출한 후 자식 클래스의 생성자가 호출되는 순서</em> 를 따른다. </li>\n<li>반대로, 자식 클래스의 인스턴스를 <strong>소멸 시</strong>, <em>자식 클래스부터 소멸자가 호출된 후에 부모 클래스의 소멸자가 호출</em> 된다.</li>\n<li>\n<p><em>자식 클래스의 메소드가 부모 클래스의 메소드와 이름이 같고 매개 변수(argument)의 형태가 동일할 때</em>, 부모 클래스의 정의를 무시하고 그 함수를 재정의하는 <strong>오버라이딩(overriding)</strong> 이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SuperCharacter</span> <span class=\"token operator\">:</span> Character <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    string superpower<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 기존의 Character 클래스의 멤버도 상속</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span> \n    <span class=\"token function\">SuperCharacter</span><span class=\"token punctuation\">(</span>string superpower<span class=\"token punctuation\">,</span> string name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> hp<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Character</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> hp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> superpower <span class=\"token operator\">=</span> superpower<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 오버라이딩을 통해 메소드 재정의</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        cout <span class=\"token operator\">&lt;&lt;</span> name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" : \"</span> <span class=\"token operator\">&lt;&lt;</span> superpower <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h4>오버로딩 (overloading)</h4>\n<ul>\n<li>\n<p><strong>함수 오버로딩</strong>: 동일한 이름의 메소드에 <strong>매개변수의 형태를 다르게 정의</strong> 함으로써 다양한 방식으로 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> cout <span class=\"token operator\">&lt;&lt;</span> name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" : \"</span> <span class=\"token operator\">&lt;&lt;</span> superpower <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token function\">show</span><span class=\"token punctuation\">(</span>hp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> cout <span class=\"token operator\">&lt;&lt;</span> name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" : \"</span> <span class=\"token operator\">&lt;&lt;</span> hp <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><strong>연산자 오버로딩</strong>: 기존에 존재하는 연산자를 원하는 방식으로 수정하여 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Character</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n    Character <span class=\"token keyword\">operator</span> <span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Character<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 연산자 + 오버라이딩</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">Character</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\" &amp; \"</span> <span class=\"token operator\">+</span> other<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h4>캡슐화 (encapsulation)</h4>\n<ul>\n<li>캡슐화는 <strong>서로 관련된 멤버 및 메소드</strong> 를 <strong>하나의 클래스로 묶어 관리</strong>하는 원리이다.</li>\n<li>\n<p>서로 다른 클래스가 서로 private 멤버에 접근해야 할 때, <strong>프렌드 클래스(Friend class)</strong> 로 선언함으로써 모든 멤버를 프렌드로 접근할 수가 있다. </p>\n<ul>\n<li>\n<p>다만, 프렌드 클래스를 너무 남용하면 객체지향 프로그래밍의 정보 은닉 효과가 떨어지기 때문에 필요한 경우에 한해서만 사용하는 것이 좋다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Weapons</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">friend</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Attack</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Attack 클래스가 Weapons 클래스를 사용할 수 있도록 선언</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\nstring name<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Attack 클래스 내에서도 접근가능</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Attack</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Weapons <span class=\"token operator\">&amp;</span>w<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Attack 클래스 내에서 직접적으로 Weapons 클래스 멤버 접근</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> w<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"으로 공격!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>정적 멤버(Static member)</strong> 를 사용함으로써 <strong>모든 객체가 멤버를 공유</strong> 할 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Character</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span> string name<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 정적 멤버 선언</span>\n    <span class=\"token function\">Character</span><span class=\"token punctuation\">(</span>string name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nCharacter<span class=\"token operator\">::</span>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 클래스 밖에서 정적 멤버 count의 값 초기화</span></code></pre></div>\n</li>\n<li><strong>상수 멤버(Constant member)</strong> 를 사용하면 클래스 내에서도 <strong>변경되지 않는 상수</strong> 를 선언하여 사용할 수도 있다.</li>\n</ul>\n<h4>다형성 (polymorphism)</h4>\n<ul>\n<li><strong>여러 개의 서로 다른 객체가 동일한 기능을 서로 다른 방법으로 처리</strong> 할 수 있게 하는 기능이다.</li>\n<li>\n<p><strong>오버로딩</strong>과 <strong>오버라이딩</strong>을 통해 다형성이 이루어진다.</p>\n<ol>\n<li><strong>compile time에는 오버로딩</strong>(함수와 연산자 오버로딩 포함)을 통해 다형성이 이루어진다.</li>\n<li><strong>runtime에는 오버라이딩</strong>을 통해 다형성이 이루어진다.</li>\n<li>단, </li>\n</ol>\n</li>\n<li><strong>추상 클래스 (Abstract class)</strong> 를 사용함으로써 효과적으로 다형성을 구현할 수 있다 (동적 바인딩을 사용함으로써 정적 바인딩의 문제를 해결)</li>\n<li>\n<p><strong>가상 함수(Virtual function)</strong> 를 사용하여 자식 클래스에서 함수를 재정의할 수 있게 한다. (동적 바인딩 사용)</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"></code></pre></div>\n</li>\n</ul>\n<h3>템플릿 (Template)</h3>\n<ul>\n<li>템플릿을 통해 data type과 상관없이 함수 및 클래스를 사용하는 <strong>일반화 프로그래밍(Generic Programming)</strong>을 구현할 수가 있다.</li>\n<li><strong>함수 템플릿(Function Template)</strong>이 처음 호출되면 해당 자료형에 맞춰 특수화된 instance를 생성하고 이후에 해당 자료형이 사용될 때마다 instance가 호출된다.</li>\n<li>\n<p>이러한 템플릿의 자료형을 명시적으로 정의하여 함수 템플릿을 오버라이딩할 수도 있다 (<strong>명시적 특수화</strong>)</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span> <span class=\"token comment\">// 특정 함수나 클래스 위에 template을 선언함으로써 템플릿 사용가능</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">change</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span> T<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\nT temp<span class=\"token punctuation\">;</span>\ntemp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\na <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\nb <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><strong>클래스 템플릿(Class Template)</strong> 을 사용하면 자료형에 따라 다르게 동작하는 클래스 집합을 만들 수가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Data</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">private</span> T data<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n<span class=\"token function\">Data</span><span class=\"token punctuation\">(</span>T data<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">data</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>T data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\nT <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h4>스마트 포인터 (Smart Pointer)</h4>\n<ul>\n<li>포인터처럼 동작하는 클래스 템플릿으로 프로그래머의 실수로 <strong>메모리 누수(memory leak)을 방지</strong> 하기 위한 사용된다.</li>\n<li>기본적으로 힙 영역에 동적 할당되는 메모리(new 키워드를 사용)를 해제하기 위해서는 delete 키워드를 사용해야 하는데, 까먹을 수 있기 때문에 <strong>스마트 포인터를 사용</strong> 함으로써 <strong>자동으로 메모리를 해제</strong> 하여 메모리 누수를 더 효과적으로 방지하고 컴퓨터 <strong>시스템의 안전성을 높인다</strong>.</li>\n<li><code class=\"language-text\">unique_ptr</code>: 하나의 스마트 포인터가 특정한 객체를 처리할 수 있게 한다.</li>\n<li><code class=\"language-text\">shared_ptr</code>: 특정한 객체를 참조하는 스마트 포인터의 총 개수를 참조한다.</li>\n<li>\n<p><code class=\"language-text\">weak_ptr</code>: 하나 이상의 shared_ptr 인스턴스가 소유하는 객체에 대한 접근을 제공한다 (부가적인 역할)</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nunique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 이제 p가 해당 객체의 메모리 해제 가능</span></code></pre></div>\n</li>\n</ul>\n<h3>컨테이너 (Container)</h3>\n<ul>\n<li><strong>STL 컨테이너 어댑터 라이브러리</strong>: 매우 활용도가 높은 자료구조를 제공한다.</li>\n<li><code class=\"language-text\">stack</code>: push, pop, top, empty, size 연산이 가능하다.</li>\n<li><code class=\"language-text\">queue</code>: push, pop, front, back, empty, size 연산이 가능하다.</li>\n<li><code class=\"language-text\">priority_queue</code>: 큐 자료구조를 자동으로 정렬한다 (<queue> 헤더파일에 포함시켜야 함)</li>\n</ul>\n<h4>시퀀스 컨테이너 (sequence container)</h4>\n<ul>\n<li>시퀀스 컨테이너는 <strong>선형구조</strong>로 vector, deque, list, forward_list이 존재한다.</li>\n<li><strong>iterator</strong>를 통해 각 원소에 접근이 가능하다 (.begin과 .end 활용)</li>\n<li><code class=\"language-text\">vector</code>: 뒤쪽에서만 데이터를 삽입과 삭제가 가능하며 배열처럼 사용하기 적합하다.</li>\n<li><code class=\"language-text\">deque</code>: 양쪽에서 데이터를 삽입과 삭제가 가능하다.</li>\n</ul>\n<h4>연관 컨테이너</h4>\n<ul>\n<li>연관 컨테이너는 <strong>key와 value 형태</strong> 의 데이터를 쌍으로 저장하는 자료구조로 set, multi<em>set, map, multi</em>map이 존재한다.</li>\n<li>\n<p><code class=\"language-text\">set (집합)</code>: 저장하려는 데이터를 key값으로 사용함으로써 <strong>정렬된 위치</strong>에 데이터를 삽입할 수 있고 <strong>검색이 빠르다</strong>. (단, <strong>key 중복 X</strong>)</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span>\nset<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> s</code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">map</code>: 저장하려는 데이터를 <strong>key와 value 쌍</strong> 의 형태로 정렬된 위치에 삽입할 수 있고 <strong>검색이 빠르다</strong>. (단, key의 중복은 허용하지 않음); <strong>해시구조를 대신하여 자주 사용</strong> 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span>\nmap<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> m<span class=\"token punctuation\">;</span>\nm<span class=\"token punctuation\">[</span><span class=\"token string\">\"슬라임\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nm<span class=\"token punctuation\">[</span><span class=\"token string\">\"드래곤\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<h3>예외처리 (Exception Handling)</h3>\n<ul>\n<li><strong>예외</strong> 란 프로그램이 동작하는 과정에서 발생한 <strong>예상치 못한 오류(error)</strong> 이다.</li>\n<li>이렇게 발생할 가능성이 높은 오류를 <code class=\"language-text\">try ~ catch</code> 구문을 통해 <strong>예외 처리</strong> 를 수행할 수 있다.</li>\n<li><code class=\"language-text\">try</code>: 특정한 코드 블록에서 <strong>예외가 발생할 수 있음을 명시</strong> 한다.</li>\n<li><code class=\"language-text\">throw</code>: try 구문에서 오류가 발생시 <strong>던지듯이 오류를 전달</strong> 한다.\n-한 try 구문 내에서 여러 예외 상황에 대해 throw를 하여 catch가 각 오류를 처리할 수 있게 할 수도 있다 (ex. throw 1)</li>\n<li><code class=\"language-text\">catch</code>: 던져진 예외에 대해서 <strong>핸들러가 처리</strong> 한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>                                   <span class=\"token comment\">// try 내에서 예외를 체크</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token string\">\"0으로 나눌 수 없습니다\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 예외를 던지고 try 영역을 빠져나옴 (예외처리)</span>\n    <span class=\"token punctuation\">}</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">;</span>                      <span class=\"token comment\">// 예외가 아닐 경우, 실행</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>               <span class=\"token comment\">// catch를 통해 던져진 예외를 잡아 실행</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> str<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"[패캠] 강의노트 02. C++","date":"2019-01-25","tags":["Cpp","객체지향프로그래밍","패스트캠퍼스"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/Fastcampus/fastcampus_2/"}}