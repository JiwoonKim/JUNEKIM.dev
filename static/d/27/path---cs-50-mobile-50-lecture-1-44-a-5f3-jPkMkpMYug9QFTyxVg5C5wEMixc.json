{"data":{"markdownRemark":{"html":"<blockquote>\n<p>Understanding JavaScript ES6 Standards</p>\n</blockquote>\n<h3>ES6</h3>\n<ul>\n<li>the <strong>specification</strong> of the language <strong>ECMA Script</strong></li>\n<li>JavaScript = <em>implementation</em> of this specification</li>\n<li>\n<p>conventionally, environments <strong>generally support ES5</strong></p>\n<ul>\n<li>need <strong>transpilers</strong> (<em>Babel, TypeScript, CoffeeScript</em>, etc.) to make newer features <em>backward compatible to ES5 spec</em></li>\n</ul>\n</li>\n<li>\n<p><strong>use newer specs</strong></p>\n<ul>\n<li>bcuz browsers will eventually catch up</li>\n<li>can use transpilers to convert to ES5</li>\n</ul>\n</li>\n</ul>\n<h3>Closures</h3>\n<p>a function having <strong>access to the parent scope</strong>, <strong>even after the parent function has closed</strong></p>\n<h3>Immediately Invoked Function Expression (IIFE)</h3>\n<ul>\n<li>a.k.a <strong>self-invoking function</strong></li>\n<li>\n<p><strong>function expression invoked automatically, w/o being called</strong></p>\n<ul>\n<li>function expression must be <em>wrapped around parenthesis</em></li>\n<li>and must be <em>followed by ()</em> to be self-invoking</li>\n</ul>\n</li>\n<li>\n<p>creates <strong>closure</strong> to enable the function to have a <strong>private variable</strong> while not polluting the global scope</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> add <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// self-invoked function (only invoked once)</span>\n    <span class=\"token keyword\">var</span> counter<span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// sets the counter to 0</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// returns a function expression (add becomes function)</span>\n        counter <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> counter<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// has access to counter variable</span></code></pre></div>\n</li>\n</ul>\n<h3>First-class Functions</h3>\n<p>handling functions as <em>first-class citizens</em></p>\n<ul>\n<li>\n<p><strong>functions are treated the same way as values</strong> (functions = objects)</p>\n<ul>\n<li>can be <strong>assigned</strong> to variables, arrays values, and object values</li>\n<li>can be <strong>passed as arguments</strong> or <strong>returned</strong> by other functions</li>\n</ul>\n</li>\n<li>allows the creation of <strong>higher-order functions</strong></li>\n</ul>\n<h4>Higher-order Functions</h4>\n<p>can take functions as arguments or return them</p>\n<ul>\n<li><code class=\"language-text\">forEach()</code>: initiates a function on each of the elements in the array</li>\n<li><code class=\"language-text\">map()</code>: maps a particular function to every element in the array, returns a result array</li>\n<li><code class=\"language-text\">filter()</code>: filters an array through a function (returns true/false) and only retains the elements that had true values</li>\n<li><code class=\"language-text\">reduce()</code>: takes multiple values (array) and reduces it to a single value (accumulates in how the function was defined)</li>\n<li>also includes <strong>any custom-made function</strong> that takes functions as arguments or return them</li>\n</ul>\n<h3>Synchronous vs. Async vs. Single-threaded</h3>\n<ul>\n<li>\n<p><strong>JavaScript</strong>: <strong>synchronous</strong> and <strong>single-threaded language</strong></p>\n<ul>\n<li>a function may lock up the page (become unresponsive)</li>\n<li>page may have to wait for a function to be over</li>\n</ul>\n</li>\n<li>\n<p>but, JavaScript can also be <strong>aynchronous</strong>: use <em>asynchronous functions</em></p>\n<ul>\n<li><code class=\"language-text\">setTimeout(_function_, _seconds_)</code></li>\n<li>\n<p><strong>http requests</strong>: </p>\n<ul>\n<li><code class=\"language-text\">XMLHttpRequest()</code>, <code class=\"language-text\">fetch()</code></li>\n<li><strong>jQuery</strong>, <strong>ajax</strong>, </li>\n</ul>\n</li>\n<li><strong>database calls</strong></li>\n</ul>\n</li>\n</ul>\n<h3>Asynchronous JavaScript</h3>\n<p>executes everything in the execution stack and then, checks the function queue (which is sent browser API) to execute</p>\n<ul>\n<li><strong>Execution Stack</strong>: <em>call stack</em> for <strong>synchronous functions</strong></li>\n<li>\n<p><strong>Browser APIs</strong>: space of <strong>asynchronous functions</strong> <em>tracked by the browser</em></p>\n<ul>\n<li>functions not built-in to the JavaScript </li>\n<li>functions are <strong>sent to function queue</strong></li>\n<li>ex. <code class=\"language-text\">setTimeout(_function_, _seconds_)</code></li>\n</ul>\n</li>\n<li><strong>Function Queue</strong>: <em>queue</em> for <strong>asynchrnous functions</strong></li>\n<li>\n<p><strong>Event Loop</strong>: <strong>checks stack's status</strong></p>\n<ul>\n<li>when stack is empty, <strong>moves function from queue to stack</strong></li>\n</ul>\n</li>\n</ul>\n<h4>Callbacks</h4>\n<p>functions passed as an <em>argument</em> of a higher-order function</p>\n<ul>\n<li>\n<p>way to <strong>control flow of asynchronous calls</strong></p>\n<ul>\n<li>\n<p>makes sure certain code doesn't execute until other code has already finished execution</p>\n<ul>\n<li>ex. make program not able to use data from API until API data is fully loaded</li>\n</ul>\n</li>\n<li>in other words, <strong>execute code once asynchronous call returns value or completes</strong></li>\n<li>program <strong>does not have to wait</strong> for a value</li>\n<li>can handle success and error cases</li>\n</ul>\n</li>\n<li>\n<p><strong>problem</strong> <em>as calls become more nested</em>, the code becomes more difficult to manage</p>\n<ul>\n<li><strong>callback hell</strong> / <strong>pyramid of doom</strong></li>\n</ul>\n</li>\n</ul>\n<h4>Promises</h4>\n<p>way to alleviate the callback hell problem</p>\n<ul>\n<li>an object assuming a value is eventually returned within a success function</li>\n<li>\n<p>use callback functions in chains via <code class=\"language-text\">.then</code> and <code class=\"language-text\">.catch</code></p>\n<ul>\n<li><code class=\"language-text\">.then</code> handles success cases</li>\n<li><code class=\"language-text\">.catch</code> handles failure cases</li>\n</ul>\n</li>\n<li>can refactor nested callback function into promises</li>\n<li>\n<p><em>use</em>:</p>\n<ul>\n<li><code class=\"language-text\">fetch</code>: function that returns a promise</li>\n<li><code class=\"language-text\">.then</code>: takes a callback</li>\n<li><code class=\"language-text\">.catch</code>: takes a callback to handle errors proceeded in the .then statements (only need a single error handler)</li>\n</ul>\n</li>\n</ul>\n<h4>Async/Await</h4>\n<ul>\n<li>introduced in ES2017</li>\n<li>allows ppl to write async code as if it were synchronous</li>\n<li>can refactor promises/callbacks to async/await</li>\n<li>\n<p><em>use</em>:</p>\n<ul>\n<li>use <code class=\"language-text\">async</code> keyword in front of higher-order function</li>\n<li>use <code class=\"language-text\">await</code> keyword in front of asynchronous functions</li>\n<li>use <code class=\"language-text\">try</code> and <code class=\"language-text\">catch</code> to handle errors</li>\n</ul>\n</li>\n</ul>\n<h3>this</h3>\n<p><code class=\"language-text\">this</code> points to the object that is set at the creation of a new execution context (function invocation)</p>\n<ul>\n<li>in the global execution context, refers to the global object</li>\n<li>if the function is called as a method of an object, 'this' is bound to the object the method is called on</li>\n<li><em>usage</em>: way to use value you don't yet know what it will be</li>\n<li>setting 'this' manually: <code class=\"language-text\">bind()</code>, <code class=\"language-text\">call()</code>, <code class=\"language-text\">apply()</code></li>\n</ul>\n<h3>Classes</h3>\n<ul>\n<li>introduced in ES6</li>\n<li>\n<p>simplifies the defining of complex objects w/ <strong>their own prototypes</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Set</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>arr <span class=\"token operator\">=</span> arr\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>arr <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x <span class=\"token operator\">!==</span> val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">has</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">get</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">.</span>length\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><strong>classes</strong> (abstract form)</p>\n<ul>\n<li>define properties and methods</li>\n<li>define constructor method</li>\n</ul>\n</li>\n<li>\n<p><strong>instances</strong>:</p>\n<ul>\n<li>created by using <code class=\"language-text\">new</code> (to pass values) and a <strong>constructor</strong></li>\n<li>methods: any function invoked on instances</li>\n<li>properties: any values associated w/ the instances</li>\n<li>\n<p>static methods: not related to specific instance but overall classes</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// extend class based on native set class</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MySet</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Set</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>originalArray <span class=\"token operator\">=</span> arr\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> Array<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MySet</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>originalArray<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>inheritance</strong>:</p>\n<ul>\n<li><code class=\"language-text\">extends</code> a class to define a new class</li>\n<li><code class=\"language-text\">super</code> refers to the class being extended</li>\n</ul>\n</li>\n</ul>\n<h3>Broswers and the DOM</h3>\n<ul>\n<li>HTML defines a tree-like structure</li>\n<li>\n<p>browsers render HTML to a webpage</p>\n<ul>\n<li>construct the DOM tree in memory</li>\n<li>then, paint the page</li>\n</ul>\n</li>\n<li>DOM can be modified by using JavaScript</li>\n</ul>","frontmatter":{"title":"Mobile50 lecture 1 - ES6","date":"2019-03-18","tags":["cs50","프론트엔드","JavaScript"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/CS50/mobile50/lecture_1/"}}