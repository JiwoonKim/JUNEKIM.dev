{"data":{"markdownRemark":{"html":"<h3>리액트의 배경</h3>\n<p>react = ui library</p>\n<h3>리액트 주요 개념들</h3>\n<p>declarative, component-based, learn-once-run-everywhere, data</p>\n<h4>Declarative Programming</h4>\n<p>DOM을 직접적으로 </p>\n<p>Dom manipulation is one of the biggest performance bottlenecks. It takes a long time for Dom changes to happen.\nThe browser has to do two really intensive operations.</p>\n<ul>\n<li>One is to repaint. That is change an element and added onto a page</li>\n<li>then refloat which is to recalculate the layout of the page and move things around if need be.</li>\n</ul>\n<p>So changing the Dom was a really expensive operation.</p>\n<p>직접적으로 일일이 getElementById()해서 addChild() 등을 하는 것보다는\n일단 어떻게 생겼는지 알려주면 리액트가 알아서 그걸 효율적으로 만들어주는 것\n이렇게 하면 STATE를 한데 모아서 관리할 수 있다</p>\n<p>is where the name React came from. The name React is simply saying hey based on whatever the state or</p>\n<p>data of the app is that describes our app, I'm just going to React to it and change everything for you</p>\n<p>so that you get the display that you want.</p>\n<p>virtual dom</p>\n<h4>컴포넌트</h4>\n<p>lego block처럼 애플리케이션 만들기\nreusable components</p>\n<h4>unidirectional data flow</h4>\n<h4>Just UI, the rest is up to you</h4>\n<p>react는 ui만 만들 수 있게 하고 추가적으로 필요한 건 알아서 각자 할 것\nwrite once use everywhere</p>\n<h3>how to be a great react developer</h3>\n<ul>\n<li>decide on components</li>\n<li>decide the state and where it lives</li>\n<li>what changes when states change</li>\n</ul>","frontmatter":{"title":"[React] 00. 리액트","date":"2019-11-10","tags":["웹개발","프론트엔드","React"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/React/0/"}}