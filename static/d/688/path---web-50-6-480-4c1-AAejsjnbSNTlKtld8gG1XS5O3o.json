{"data":{"markdownRemark":{"html":"<blockquote>\n<p>Harvard's Web Programming with Python and Javascript lecture 6 정리</p>\n</blockquote>\n<ul>\n<li>Single Page Apps</li>\n<li>HTML5 History API</li>\n<li>Window &#x26; Document</li>\n<li>JavaScript Templating</li>\n<li>CSS Animation</li>\n<li>SVG Animation</li>\n</ul>\n<h3>Single Page Apps</h3>\n<p>an application which pulls information from the server whenever needed (via Ajax, etc.) onto a <strong>single page</strong></p>\n<ul>\n<li>instead of rendering multiple pages,</li>\n<li>\n<p>server sends information(data) on a single page</p>\n<pre><code class=\"language-js\">// if link is clicked, call load_page function\ndocument.addEventListener('DOMContentLoaded', () => {\n    load_page('first');\n    document.querySelectorAll('.nav-link').forEach(link => {\n        link.onclick = () => {\n            load_page(link.dataset.page);\n            return false;\n        };\n    });\n});\n// define function for sending an Ajax call\nfunction load_page(name) {\n    const request = new XMLHttpRequest();\n    request.open('GET', `/${name}`);\n    request.onload = () => {\n        const response = request.responseText;\n        document.querySelector('#body').textContent = response;\n    };\n    request.send();\n}\n</code></pre>\n<pre><code class=\"language-python\"># Server\ntexts = [\"text 1\", \"text 2\", \"text3\"]\n@app.route(\"/first\")\ndef first():\n    return texts[0]\n@app.route(\"/second\")\ndef second():\n    return texts[1]\n@app.route(\"/third\")\ndef third():\n    return texts[2]\n</code></pre>\n</li>\n<li><em>장점</em> : <strong>reload 필요 X</strong> (page refresh 필요 X)</li>\n<li>\n<p><em>단점</em> : <strong>url이 바뀌지 X</strong> (eliminates URL's functionality)</p>\n<ul>\n<li>user may <strong>not know which page they are on</strong></li>\n<li>so <strong>use HTML5 History API</strong> to show url &#x26; not need to reload</li>\n</ul>\n</li>\n</ul>\n<h3>HTML5 History API</h3>\n<p>enables manipulation a a <strong>browser's history and URL</strong> even if the page is still being implemented <strong>w/ single-page design</strong></p>\n<ul>\n<li>implemented by the client <strong>pushing</strong> a new URL state whenever a new page is accessed</li>\n<li>implement w/ <strong>Stack behavior</strong> (use history like stack)</li>\n<li>\n<p>use <code>pushState</code> and <code>onpopstate</code></p>\n<pre><code class=\"language-js\">// just an aesthetic property to reflect the current page\ndocument.title = name;\n// use with stack behavior (data / title of page / url)\nhistory.pushState({'title': name, 'text': response}, name, name);\n...\n// 뒤로가기했을 때, content과 url 다시 뒤로가기\nwindow.onpopstate = e => {\n// pushed된 data (popped 된 layer의 data)\nconst data = e.state;\ndocument.title = data.title;\ndocument.querySelector('#body').textContent = data.text;\n}\n</code></pre>\n</li>\n</ul>\n<h3>Window &#x26; Document</h3>\n<p>JavaScript objects used to <strong>scroll &#x26; dynamically load content</strong></p>\n<ul>\n<li>\n<p>useful properties:</p>\n<ul>\n<li><code>window.innerWidth</code></li>\n<li><code>window.innerHeight</code></li>\n<li><code>window.scrollY</code>: how far down page has been scrolled (px)</li>\n<li><code>document.body.offsetHeight</code>: entire height of HTML body's document</li>\n</ul>\n</li>\n<li>\n<p>그림 of 위에 관계</p>\n<pre><code class=\"language-js\">window.onscroll = () => {\n    // 전체 페이지의 크기 끝에 다다르면, 화면을 초록색으로 변환\n    if (window.innerHeight + window.scrollY >= document.body.offsetHeight) {\n        document.querySelector('body').style.background = 'green';\n    }\n    // 아직 페이지 끝까지 도달하지 않았다면, 화면을 하얀색으로 설정\n    else {\n        document.querySelector('body').style.background = 'white'\n    }\n};\n</code></pre>\n</li>\n</ul>\n<h4>Dynamic Loading of Content (w/ server)</h4>\n<ul>\n<li>\n<p>load posts according to scroll</p>\n<pre><code class=\"language-js\">let counter = 1;\nconst quantity = 20;\n// initially load the posts when DOM loads\ndocument.addEventListener('DOMContentLoaded', load);\n/* if scrolled to bottom, load the next 20 posts\n(the document's entire height dynamically updates everytime posts are loaded) */\nwindow.onscroll = () => {\n    if (window.innerHeight + window.scrollY >= document.body.offsetHeight) {\n        load();\n    }\n};\n// add a post to page\nconst add_post = (contents) => {\n    const post = document.createElement('div');\n    post.className = 'post';\n    post.textContent = contents;\n    document.querySelector('#posts').append(post);\n}\n// load 20 posts from server (via ajax)\nconst load = () => {\n    // count posts (20 for each load)\n    const start = counter;\n    const end = start + quantity - 1;\n    counter = end + 1;\n    // request posts from server (POST request)\n    const request = new XMLHttpRequest();\n    request.open('POST', '/posts');\n    // when response received, add number of posts to page\n    request.onload = () => {\n        const data = JSON.parse(request.responseText);\n        data.forEach(add_post);\n    };\n    // set the form of data to send to server\n    const data = new Formdata();\n    data.append('start', start);\n    data.append('end', end);\n    // send as POST request to server\n    request.send(data);\n};\n</code></pre>\n<pre><code class=\"language-python\">from flask import Flask, jsonify, render_template, request\napp = Flask(__name__)\n@app route(\"/posts\", methods=[\"POST\"])\ndef posts():\n    start = int(request.form.get(\"start\") or 0)\n    end = int(request.form.get(\"end\") or (start + 9))\n    # simply return string of post numbers as json\n    data = []\n    for i in range(start, end + 1)\n        data.append(f\"post #{i}\")\n    return jsonify(data)\n</code></pre>\n</li>\n<li>\n<p>can also add a hide button to hide uninteresting parts</p>\n<pre><code class=\"language-js\">// change the add_post function\n... // create post element (same code)\nconst hid = document.createElement('button');\nhide.className = 'hide';\npost.textContent = 'Hide';\nhide.onclick = () => {\n    this.parentElement.remove();\n};\n... // append post element (same code)\n</code></pre>\n</li>\n</ul>\n<h3>JavaScript Templating</h3>\n<p>libraries like template literals (<strong>str_replace</strong>: <code>${}</code>)</p>\n<ul>\n<li>since code gets messier using JS to build more complicated <strong>user interfaces</strong></li>\n<li>(<em>adding items to the DOM every time</em> : create element, assign class name, set text content, etc.)</li>\n<li>instead, <strong>use template to create elements</strong> while plugging in custom contents</li>\n</ul>\n<h4>Templates vs. Frameworks</h4>\n<ul>\n<li>\n<p><strong>templates</strong>: more like advanced str_replace (<strong>more of pluggin</strong>)</p>\n<ul>\n<li><em>mustache, underscore, handlebar, lodash</em>, etc.</li>\n</ul>\n</li>\n<li>\n<p><strong>frameworks</strong>: does <strong>core functionality</strong></p>\n<ul>\n<li>taking page requests, forwarding responses, etc.</li>\n</ul>\n</li>\n</ul>\n<h4>Example of Handlebars Templates</h4>\n<ul>\n<li>\n<p><em>use</em>: </p>\n<ul>\n<li>add script source to html</li>\n<li>\n<p><strong>create a template</strong>: <code>const template = Handlebars.compile(\"&#x3C;tag>{{value}}&#x3C;/tag>\")</code></p>\n<ul>\n<li><strong>define an HTML element</strong> &#x26; content within argument</li>\n<li>can use <code>{{ }}</code> for templating language</li>\n</ul>\n</li>\n<li><strong>use template</strong>: <code>template({'value': value})</code></li>\n</ul>\n</li>\n<li>\n<p>ex. roll dice simulation</p>\n<pre><code class=\"language-js\">// define template\nconst template = Handlebars.compile(\"&#x3C;li>You rolled a {{value}}&#x3C;/li>\");\n// use template\nconst content = template({'value': 6});\ndocument.querySelector('#content').textContent += content;\n</code></pre>\n</li>\n<li>\n<p>if template becomes <em>complicated</em>, <strong>define template in a separate script</strong> (defined above the script source of where it is used)</p>\n<ul>\n<li>\n<p><strong>define a template</strong> (.html or .js)</p>\n<pre><code class=\"language-html\">// specify id and type\n&#x3C;script id=\"result\" type=\"text/x-handlebars-template\">\n    &#x3C;li> You rolled:\n        &#x3C;img alt=\"{{value}}\" title=\"{{value}}\" src=\"img/{{value}}.png\">&#x3C;/img>\n    &#x3C;/li>\n&#x3C;/script>\n</code></pre>\n</li>\n<li>\n<p><strong>create template</strong> in another script (.html or .js)</p>\n<pre><code class=\"language-js\">// change only this part from previous example\nconst template = Handlebars.compile(document.querySelector('#result').innerHTML);\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>can also use loops: <code>each</code> and <code>this</code> keyword</p>\n<pre><code class=\"language-html\">&#x3C;script id=\"result\" type=\"text/x-handlebars-template\">\n&#x3C;li> You rolled:\n    {{each values}}\n        &#x3C;img alt=\"{{this}}\" title=\"{{this}}\" src=\"img/{{this}}.png\">&#x3C;/img>\n    {{ /each }}\n&#x3C;/li>\n&#x3C;/script>\n</code></pre>\n</li>\n</ul>\n<h3>CSS Animation</h3>\n<ul>\n<li>\n<p>useful for creating <strong>user interfaces</strong></p>\n<ul>\n<li>ex. fade away effect (for posts to hide)</li>\n</ul>\n</li>\n<li>runs <strong>as soon as page is loaded</strong></li>\n<li>\n<p><em>use</em>:</p>\n<ul>\n<li>\n<p>define animation behavior: <code>@keyframe</code></p>\n<ul>\n<li>use w/ <code>from</code> and <code>to</code></li>\n<li>or just define statuses by certain names</li>\n</ul>\n</li>\n<li>apply to certain elements: <code>animation-name</code></li>\n<li>\n<p>define the duration: <code>animation-duration</code></p>\n<pre><code class=\"language-css\">@keyframes grow {\n    from { font-size: 20px; }\n    to { font-size: 100px; }\n}\nhi {\n    animation-name: grow;\n    animation-duration: 2s;\n    animation-fill-mode: forwards;\n}\n</code></pre>\n<pre><code class=\"language-css\">@keyframe move {\n    from { left: 0%; }\n    to { left: 50%; }\n}\nhi {\n    position: relative;\n    animation-name: move;\n    animation-duration: 3s;\n    animation-fill-mode: forwards\n}\n</code></pre>\n<pre><code class=\"language-css\">@keyframes move {\n    0% {\n        left: 0%;\n    }\n    50% {\n        left: 50%;\n    }\n    100% {\n        left: 0%;\n    }\n}\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>for more control, use JavaScript</p>\n<ul>\n<li>\n<p><code>__.style.animationPlayState</code></p>\n<pre><code class=\"language-js\">if (__.style.animationPlayState === 'paused') { ... };\n__.style.animationPlayState = 'running';\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h3>SVG Animation</h3>\n<p>scalable vector graphic</p>\n<ul>\n<li>\n<p><strong>graphical element</strong> determined by lines, angles, and shapes</p>\n<pre><code class=\"language-html\">&#x3C;body>\n&#x3C;svg style=\"width: 100%; height: 800px;\">\n    &#x3C;circle cx=\"200\" cy=\"200\" r=\"50\" style=\"fill:blue;\" />\n&#x3C;/svg>\n&#x3C;/body>\n</code></pre>\n</li>\n<li>\n<p>can also <strong>programmatically create</strong> such element by JavaScript by using libraries</p>\n<ul>\n<li><strong>D3</strong></li>\n</ul>\n</li>\n</ul>","frontmatter":{"path":"/web50/6","title":"Web50 lecture 6 - Front-end Development","date":"2018-09-05","tags":["CS50","Web50","프론트엔드"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}