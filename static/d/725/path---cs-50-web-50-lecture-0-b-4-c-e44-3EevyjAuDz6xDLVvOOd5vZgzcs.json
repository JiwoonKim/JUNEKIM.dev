{"data":{"markdownRemark":{"html":"<blockquote>\n<p>Harvard's Web Programming with Python and Javascript lecture 0 정리</p>\n</blockquote>\n<h3>Git and GitHub</h3>\n<ul>\n<li>\n<p><strong>Git</strong> : <em>version control tool</em> </p>\n<ul>\n<li>to keep track of changes made to code,</li>\n<li>synchronize code btw different ppl,</li>\n<li>test changes to code w/o losing the origin,</li>\n<li>and revert back to old versions of code.</li>\n</ul>\n</li>\n<li>\n<p><strong>GitHub</strong> : website that stores Git repositories on the internet to facilitate the collaboration that Git allows for.</p>\n<ul>\n<li><strong>repository</strong> : a place to keep track of code and all the changes of code.</li>\n</ul>\n</li>\n</ul>\n<h3>Git</h3>\n<h4>Git Commands</h4>\n<ul>\n<li><code class=\"language-text\">git clone &lt;url&gt;</code>: download a repository stored on a server (like GitHub).</li>\n<li><code class=\"language-text\">git add &lt;filename(s)&gt;</code>: add files to the staging area to be included in the next commit.</li>\n<li><code class=\"language-text\">git commit -m &quot;&lt;message&gt;&quot;</code>: take a snapshot of the repository and save it w/ a message description</li>\n<li><code class=\"language-text\">git commit -am &lt;filename(s)&gt; &quot;&lt;message&gt;&quot;</code>: add files and commit changes all in one.</li>\n<li><code class=\"language-text\">git status</code>: print what is currently going on w/ the repository; show current status.</li>\n<li><code class=\"language-text\">git push</code>: push any local changes (commits) to a remote server</li>\n<li>\n<p><code class=\"language-text\">git pull</code>: pull any remote changes from a remote server to a local computer.</p>\n<ul>\n<li>when combining two different versions of code, a <strong>merge conflict</strong> can occur if the versions have differnt data in the same location.]</li>\n<li><em>must manually fix</em> conflict (where &#x3C;&#x3C;&#x3C;&#x3C; ==== >>>> is) and then, commit and push results.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">git log</code>: print a history of all the commits that have been made.</li>\n<li><code class=\"language-text\">git reflog</code>: print a list of all the different references to commits.</li>\n<li>\n<p><code class=\"language-text\">git reset --hard &lt;commit #&gt;</code>: reset the repository to the given commit.</p>\n<ul>\n<li><code class=\"language-text\">git reset --hard origin master</code>: reset the repository to its original state (the version cloned from GitHub).</li>\n</ul>\n</li>\n<li><code class=\"language-text\">git init</code>: initialize empty git repository in local computer.</li>\n</ul>\n<h3>GitHub</h3>\n<h4>Remote</h4>\n<ul>\n<li>any version of a repository that is not stored locally on a device. (ex. GitHub)</li>\n<li>origin = the remote from which the local repository was originally downloaded from.</li>\n<li>\n<p><strong>Git commands</strong> related to remotes.</p>\n<ul>\n<li><code class=\"language-text\">git fetch</code>: download all of the latest commits from a remote to a local device.</li>\n<li><code class=\"language-text\">git merge origin/master</code>: merge the downloaded repository version in the local, preexisting master branch; update master.</li>\n<li><code class=\"language-text\">git pull</code>: git fetch + git merge origin/master</li>\n</ul>\n</li>\n</ul>\n<h4>GitHub Flow</h4>\n<p><img src=\"/undefined/githubflow-ed695cf8169e759852a430255085a0dc.png\"></p>\n<h4>Branching</h4>\n<ul>\n<li>\n<p>feature of Git that allows a project to move in multiple different directions simultaneously.</p>\n<ul>\n<li>there is one <strong>master branch</strong> that is always usable.</li>\n<li>but <em>any number of new branches</em> can be created to develop new features.</li>\n<li>when ready, these branches can be <em>merged back</em> into the master branch.</li>\n</ul>\n</li>\n<li>HEAD: refers to the current branch being worked on.</li>\n<li>\n<p><strong>Git commands</strong> related to branching</p>\n<ul>\n<li><code class=\"language-text\">git branch</code>: list all the branches currently in a repository.</li>\n<li><code class=\"language-text\">git branch &lt;name&gt;</code>: create a new branch with a name.</li>\n<li><code class=\"language-text\">git checkout &lt;name&gt;</code>: switch current working branch to the named branch.</li>\n<li>\n<p><code class=\"language-text\">git merge &lt;name&gt;</code>: merge the named branch into current working branch (normally master)</p>\n<ul>\n<li>if merge conflict occurs, must manually fix it.</li>\n<li>if a branch is pushed w/o merge or the branch does not exist on GitHub, use <code class=\"language-text\">git push --set-upstream origin feature</code>.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4>Forking</h4>\n<ul>\n<li>\n<p>fork = an entirely separate repository copied off of the original repository.</p>\n<ul>\n<li>can be managed and modified like any other w/o affecting the original copy.</li>\n</ul>\n</li>\n<li>specific feature of GitHub (fork가 branch의 상위개념)</li>\n</ul>\n<h4>GitHub Pages</h4>\n<ul>\n<li>feature of GitHub which allows for a repository to be <em>deployed on the internet</em>.</li>\n<li>\n<p>use: settings -> GitHub Pages -> select master branch &#x26; save.</p>\n<ul>\n<li>by default, the repository will be deployed to username.github.io/repositoryname</li>\n<li>if repository is updated, GitHub Pages will be automatically updated as well.</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Web50 lecture 0 - Git","date":"2018-07-17","tags":["CS50","Web50","Git"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/CS50/web50/lecture_0/"}}