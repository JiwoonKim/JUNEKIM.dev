{"data":{"markdownRemark":{"html":"<h3>계층구조</h3>\n<p>그림??</p>\n<h4>cf) 자바 클래스 계층구조</h4>\n<ul>\n<li>\n<p>모든 클래스는 <code class=\"language-text\">java.lang.Object</code>로부터 상속된다 (<strong>Object 클래스는 최상위 클래스</strong>)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// extends Object가 생략되었지만 자동 상속됨</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>기본 메소드: <code class=\"language-text\">toString()</code>, <code class=\"language-text\">equals()</code>, <code class=\"language-text\">getClass()</code>, <code class=\"language-text\">finalize()</code>, <code class=\"language-text\">clone()</code> 등이 모든 클래스에 상속되며, 가능하면 클래스 사용에 맞게 오버라이딩하면 좋다</li>\n</ul>\n<h3>추상 클래스 (Abstract Class)</h3>\n<p>계층적 상속 관계를 갖는 클래스 구조를 만들 때 사용하는 상위 클래스</p>\n<ul>\n<li>상속과 다형성을 통해 <strong>하위 클래스를 여러가지 만들 용도로 정의하는 상위 클래스</strong> 이다</li>\n<li>실제로 객체를 만드는 용도가 아니기 때문에, 추상 클래스는 객체를 만들 수 없다 (컴파일 오류)</li>\n<li>추상 클래스에서는 <strong>추상 메소드를 사용하여 선언만</strong> 하고, 상속을 통해 서브 클래스에서 이를 <strong>오버라이딩함으로써 구체적인 구현 방법을 정의</strong> 한다.</li>\n<li>\n<p><strong>추상 메소드</strong> (<strong>abstract method</strong>): 선언되어 있으나 구현되어 있지 않은 메소드</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 추상 메소드가 있으므로 추상 클래스 |  // 추상 메소드가 없어도 추상 클래스 가능</span>\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>             <span class=\"token operator\">|</span>  <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    String name<span class=\"token punctuation\">;</span>                    <span class=\"token operator\">|</span>      String name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token operator\">|</span>      <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n<span class=\"token punctuation\">}</span>                                   <span class=\"token operator\">|</span>          System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n                                    <span class=\"token operator\">|</span>      <span class=\"token punctuation\">}</span>\n                                    <span class=\"token operator\">|</span>  <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>선언: <code class=\"language-text\">abstract</code> 접근 지정자 + 리턴 타입 + 이름</li>\n<li><strong>추상 메소드를 하나라도 가지고 있는 경우</strong> 추상 클래스이다</li>\n<li>추상 메소드를 가지고 있지 않더라도, <strong>추상 클래스로 선언된 경우</strong> 도 추상 클래스로 인정된다</li>\n</ul>\n</li>\n</ul>\n<h3>인터페이스 (Interface)</h3>\n<p>다중 상속이 가능한\n인터페이스  모든 메소드가 추상 메소드인 “클래스”  인터페이스는 상수와 메소드만 갖는다.\n 인터페이스 정의  interface 키워드로 정의된 클래스  ex) public interface SerialDriver { … }\n 인터페이스의 특징  모든 메소드 : public abstract (생략 가능)  모든 상수: public static final (생략 가능)  객체를 생성할 수 없음  레퍼런스 변수 타입으로 사용 가능</p>\n<p>인터페이스의 필요성\n 인터페이스를 이용하여 다중 상속 구현  클래스는 다중 상속 불가\n 인터페이스는 명세서와 같음  구현은 블랙 박스와 같아 인터페이스의 사용자는 구현에 대해 알 필요가 없음\n 인터페이스만 정의하고 구현을 분리하여, 작업자가 다양한 구현을 할 수 있</p>","frontmatter":{"title":"[OOP] 05. 추상 클래스와 인터페이스","date":"2019-10-01","tags":["Java","객체지향프로그래밍"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/CS_Fundamentals/OOP/6/"}}