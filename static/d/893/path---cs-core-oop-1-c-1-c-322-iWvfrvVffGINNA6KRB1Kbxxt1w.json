{"data":{"markdownRemark":{"html":"<h3>객체지향 프로그래밍 (Object-oriented Programming)</h3>\n<p>객체지향 기술은 말 그대로 <code class=\"language-text\">Object</code>를 중심으로 하는 개발 방식이다. 컴퓨터공학 분야에서는 이를 <strong><code class=\"language-text\">객체</code></strong> 라는 조금 생소한 표현으로 사용하지만, 사전적 의미 그대로 물건 또는 물체라고 생각하면 더 쉽게 와닿는 것 같다. 즉, 객체지향 프로그래밍은 물체 단위로 프로그램을 짜고 물체과 물체 사이의 관계에 중점을 둔 작동방식을 개발하는 방식이라고 할 수 있다. </p>\n<h4>왜 객체 지향적인 프로그래밍이 필요한가</h4>\n<ul>\n<li>\n<p>프로그램이 복잡해질수록 <strong>데이터를 관리하는 문제</strong> 가 생기기 시작했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// 전역 변수</span>\n<span class=\"token keyword\">int</span> anyoneCanUse<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 전역 변수를 공유하는 함수들</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">function_1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> anyoneCanUse<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">function_2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> anyoneCanUse<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>ex. 프로그램 내의 서로 다른 함수가 하나의 데이터를 공유해야 되어, 전역변수를 사용하는 경우</li>\n<li>프로그램이 복잡해지고 동일한 데이터를 접근하는 함수들이 많아질수록, 점점 그 데이터가 올바르게 조작되고 있는지를 관리하기가 힘들어진다. </li>\n<li>특히, 의도와 다르게 조작될 확률도 커지기 때문에 프로그램에 에러가 발생하는 큰 문제가 될 수 있다. </li>\n</ul>\n</li>\n<li>\n<p>그래서 구조체를 만들 듯이, <strong>데이터와 함수들을 객체(object) 단위로 묶어 실제 세상과 비슷하게 모델링하고 관리하고자 함</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// 객체 안에 서로 관련된 데이터와 함수들을 묶음</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">GroupedInObject</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span> \n        <span class=\"token comment\">// 오직 클래스 내의 함수들만 접근 가능</span>\n        <span class=\"token keyword\">int</span> classMembersOnly<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        <span class=\"token comment\">// 클래스 내의 함수들끼리는 데이터를 공유하면서,</span>\n        <span class=\"token comment\">// 그 외의 함수들로부터는 데이터를 보호</span>\n        <span class=\"token keyword\">int</span> <span class=\"token function\">function_1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> classMembersOnly<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> <span class=\"token function\">function_2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> classMembersOnly<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<h4>OOP의 장단점</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><strong>장점</strong></td>\n<td align=\"left\">소프트웨어의 재사용률, 확장성, 유지보수성이 높아지므로 규모가 큰 프로젝트 개발에 적당하다</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">실세계에 근접한 자연적인 모델링이 가능하며, 사용자 타입 중심이다</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>단점</strong></td>\n<td align=\"left\">객체를 설계하기가 어렵다</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">객체의 규모가 크기 때문에 실행 속도가 느리다</td>\n</tr>\n</tbody>\n</table>\n<h4>OOP의 주요 개념들</h4>\n<p>캡슐화, 상속, 다형성을 통해 코드를 재사용할 수 있게 함으로써 소프트웨어 생산성을 높인다</p>\n<ol>\n<li>\n<p><strong><code class=\"language-text\">캡슐화</code></strong><code class=\"language-text\">(encapsulation)</code>: 연관된 <strong>데이터와 함수들을</strong> 캡슐처럼 <strong>하나의 테두리로 묶는 것</strong></p>\n<ul>\n<li>데이터와 함수들을 하나로 묶어서 프로그램의 컴포넌트로 재사용이 가능해진다</li>\n<li>외부와의 경계를 만들어 내부 정보를 숨기고 외부에는 사용하는데 필요한 정보만을 담은 인터페이스를 공개함으로써 내부 정보가 외부의 영향을 받거나 주지 않도록 보호한다 (정보 은닉) </li>\n</ul>\n</li>\n<li>\n<p><strong><code class=\"language-text\">상속</code></strong><code class=\"language-text\">(inheritance)</code>: 새 클래스가 기존의 클래스의 <strong>데이터와 메소드를 그대로 물려받는 것</strong></p>\n<ul>\n<li>기존의 클래스를 <strong>확장</strong> 또는 <strong>변형</strong> 하는 새로운 클래스를 만들기 위해 사용된다</li>\n</ul>\n</li>\n<li>\n<p><strong><code class=\"language-text\">다형성</code></strong><code class=\"language-text\">(polymorphism)</code>: 동일한 이름의 다양한 형태의 객체를 만들 수 있는 것</p>\n<ul>\n<li>업캐스팅, 오버로딩, 오버라이딩을 통해 나타나는 성질</li>\n</ul>\n</li>\n<li><strong><code class=\"language-text\">추상화</code></strong><code class=\"language-text\">(abstraction)</code>: </li>\n</ol>\n<p>관리함으로써 해당 객체 이외의 조작으로부터 데이터를 보호하는 것\n- 클래스를 사용할 경우, 객체의 틀을 이루어 캡슐화를 이루며 클래스 내의 접근 한정자들을 통해 정보를 은닉(data hiding)이 가능</p>\n<p>공통적인 특성들과 행동들을 한데 묶어(추상화) 클래스에서 재사용(상속)하고, 오버로딩과 오버라이딩을 통해 클래스 간 서로 다른 변화를 적용(그 결과로 다형성을 띰)한다</p>\n<p>조금 더 예시를 들어서 어떻게 사용되는지 그리고 왜 사용하는지를 설명 설명!!</p>","frontmatter":{"title":"[OOP] 01. 객체지향 프로그래밍 소개","date":"2019-09-23","tags":["Java","객체지향 프로그래밍"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/CS_Core/OOP/1/"}}