{"data":{"markdownRemark":{"html":"<h3>상속 (Inheritance)</h3>\n<p><strong>기존의 클래스로부터 새로운 클래스를 유도하는 것</strong></p>\n<ul>\n<li><strong>부모 클래스</strong> (<strong>parent class</strong>): 기존에 있는 클래스 (또는 super class라고도 함)</li>\n<li>\n<p><strong>자식 클래스</strong> (<strong>child class</strong>): 상속된 클래스 (또는 subclass라고도 함)</p>\n<ul>\n<li>자식 클래스는 부모 클래스의 데이터와 메소드를 <strong>기본적으로 모두 이어 받는다</strong></li>\n<li>상속 받은 클래스에는 <strong>변수와 메소드를 추가할 수 있다</strong></li>\n</ul>\n</li>\n<li>\n<p>상속을 통해 <strong>코드를 재사용</strong> 하기 때문에 <strong>소프트웨어의 생산성을 높일 수 있다</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 부모 클래스: 스승 정의</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Master</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> String name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"뛰어난 재능을 가졌다!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 자식 클래스: 제자 정의</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Apprentice</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Master</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// name, work()를 상속받음</span>\n    <span class=\"token comment\">// 변수와 함수 추가</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> isGreater<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">excedes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이게 바로 청출어람\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>cf) 자바 언어에서는 다중 상속을 지원하지 않는다!</p>\n</li>\n</ul>\n<h4>cf) 상속 관계 vs 포함 관계</h4>\n<ul>\n<li><strong>상속관계</strong> (inheritance): 자식 클래스 <code class=\"language-text\">is-a</code> 부모 클래스의 일종</li>\n<li>\n<p><strong>포함관계</strong> (aggregations): 클래스 <code class=\"language-text\">has-a</code> 다른 클래스</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">private</span> String name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 상속관계 (is-a): 부모 클래스의 연장선</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Artist</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> artistic<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 포함관계 (has-is): 멤버로 다른 클래스를 소유</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">room</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">private</span> Person resident<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> roomNumber<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h4>상속의 접근 범위</h4>\n<p>상속을 받더라도 접근 지정자의 종류와 상속 관계인 두 클래스의 상대적인 위치에 따라, 자식 클래스가 부모 클래스의 데이터와 함수에 접근이 가능한지의 여부가 달라진다</p>\n<ul>\n<li><code class=\"language-text\">public</code> &#x26; <code class=\"language-text\">protected</code>: <strong>언제든 상속받아 접근 가능</strong></li>\n<li><code class=\"language-text\">default</code>: 두 클래스가 <strong>동일한 패키지에 존재할 경우에만</strong>, 상속받아 접근 가능</li>\n<li>\n<p><code class=\"language-text\">private</code>: 절대 <strong>접근 불가</strong> (상속의 의미가 크게 없음)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> publicVal<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">int</span> protectedVal<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span> <span class=\"token keyword\">int</span> defaultVal<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> privateVal<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        publicVal <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        protectedVal <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        defaultVal <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 다른 패키지면, 컴파일 오류</span>\n        privateVal <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 무조건 컴파일 오류; getPrivateVal()을 통한 접근이 권장됨</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h4>Super 레퍼런스 (<code class=\"language-text\">super</code>)</h4>\n<p>해당 객체의 <strong>부모 클래스를 가르키는 레퍼런스</strong> </p>\n<ul>\n<li>\n<p>자식 클래스에서 <strong>부모 클래스의 데이터 또는 메소드에 접근</strong> 할 때 사용된다</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Master</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> String state<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Master</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token string\">\"뛰어났다!\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"스승은 \"</span> <span class=\"token operator\">+</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Apprentice</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Master</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Apprentice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token string\">\"더 뛰어났다\"</span><span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 메소드 오버라이딩</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"제자는\"</span> <span class=\"token operator\">+</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 부모 클래스의 데이터 접근 및 메소드 호출</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token string\">\"은퇴했다...\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"스승은 은퇴했다...\" 출력하기</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>메소드의 경우, 주로 부모로부터 상속받은 메소드를 자식이 수정(<strong>메소드 오버라이딩</strong>)할 때, 부모 메소드를 호출하는 경우에 사용된다. 나머지 메소드는 어차피 상속받았기 때문에 굳이 super로 접근할 필요가 없고, 오로지 메소드 오버라이딩 시 부모 메소드가 필요될 때에만 사용하면 된다</li>\n<li>\n<p>단, 생성자 메소드는 상속되지 않기 때문에, <strong>파라미터가 있는 부모 생성자를 기반으로 자식 생성자를 정의</strong> 하고자 할 때에도 사용되기도 한다</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Master</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Master</span><span class=\"token punctuation\">(</span>String name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Apprentice</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Master</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Apprentice</span><span class=\"token punctuation\">(</span>String name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> isGreater<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 부모의 기본 생성자 이외의 생성자 코드를 재사용</span>\n        <span class=\"token comment\">// (super가 없다면, 자동으로 Master()이 호출 됨)</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 그 외 부분 정의</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isGreater <span class=\"token operator\">=</span> isGreater<span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>기본적으로 모든 자식 생성자는 부모의 기본 생성자를 먼저 호출한 후,  자식 생성자를 호출하는 순서를 가진다 (만약 상위 생성자에 기본 생성자가 없다면, 컴파일 오류가 생김)</li>\n</ul>\n</li>\n</ul>\n<h4>메소드 오버라이딩 (Method Overriding)</h4>\n<p><strong>부모 클래스의 메소드를</strong> 자식 클래스에서 <strong>재정의하는 것</strong></p>\n<ul>\n<li>\n<p>조건: </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Master</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"스승은 뛰어났다!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Apprentice</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Master</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 메소드 오버라이딩</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"제자는 더 뛰어났다!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><strong>메소드 이름, 인자 타입 및 개수, 리턴 타입 등이 일치해야</strong> 된다 (하나라도 다르면 메소드 오버라이딩이 실패하고, 자식 클래스에 오버로딩된 메소드가 추가되기만 함)</li>\n<li>static, private 또는 final 메소드는 오버라이딩 될 수 없으며, 오버라이딩된 메소드의 접근 지정자는 상위 클래스 메소드의 접근 지정자보다 범위가 넓어야만 한다 </li>\n</ul>\n</li>\n<li>\n<p>오버라이딩 된 메소드는 무조건 실행되도록 <strong>동적 바인딩</strong> 된다 (부모 클래스의 메소드를 무시하고, 자식 클래스에서 새로 작성된 메소드가 실행됨)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Master</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"스승은 뛰어났다!\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Apprentice</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Master</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 오버라이딩된 메소드</span>\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"제자는 더 뛰어났다!\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 드라이버 코드</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Master blue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Master</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        blue<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"스승은 뛰어났다!\" 출력 </span>\n        Apprentice bluer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Apprentice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 동적 바인딩에 의해 오버라이딩된 work()가 호출됨</span>\n        bluer<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"제자가 더 뛰어났다!\" </span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 설명: bluer.show() -> 상속받은 show() -> work()</span>\n<span class=\"token comment\">// BUT, 동적 바인딩 때문에 Master.work() 대신, 오버라이딩된 Apprentice.work()를 무조건 호출하게 되어 있음</span></code></pre></div>\n<p>cf) super로 접근한 메소드는 동적바인딩이 되지 않는다</p>\n</li>\n</ul>\n<h3>cf) 자바 클래스 계층구조</h3>\n<ul>\n<li>\n<p>모든 클래스는 <code class=\"language-text\">java.lang.Object</code>로부터 상속된다 (<strong>Object 클래스는 최상위 클래스</strong>)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// extends Object가 생략되었지만 자동 상속됨</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>기본 메소드: <code class=\"language-text\">toString()</code>, <code class=\"language-text\">equals()</code>, <code class=\"language-text\">getClass()</code>, <code class=\"language-text\">finalize()</code>, <code class=\"language-text\">clone()</code> 등이 모든 클래스에 상속되며, 가능하면 클래스 사용에 맞게 오버라이딩하면 좋다</li>\n</ul>","frontmatter":{"title":"[OOP] 04. 상속","date":"2019-09-25","tags":["Java","객체지향프로그래밍"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/CS_Fundamentals/OOP/4/"}}