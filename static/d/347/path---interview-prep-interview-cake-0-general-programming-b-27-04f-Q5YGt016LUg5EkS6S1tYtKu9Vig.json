{"data":{"markdownRemark":{"html":"<blockquote>\n<p>[Interview Cake의 Data Structure 파트] 정리</p>\n</blockquote>\n<h3>Short Circuit Evaluation</h3>\n<p>strategy of <strong>stop evaluating logical expression as soon as the result is certain to avoid unnecessary work</strong></p>\n<ul>\n<li><code class=\"language-text\">(first &amp;&amp; second)</code>: stop if first is false; don't even bother to check second bcuz the whole expression is false anyway</li>\n<li><code class=\"language-text\">(first || second)</code>: stop if first is true; the whole expression is true anyway</li>\n</ul>\n<p><strong>use to filter out edge cases</strong> (especially seg fault cases!)</p>\n<ul>\n<li>ex. (cur &#x26;&#x26; cur->data > 0)</li>\n</ul>\n<h3>Garbage Collection</h3>\n<p>C++ (manual memory management) &#x3C;-> Java (garbage collector)</p>\n<ul>\n<li>\n<p><strong>manual memory management</strong>:</p>\n<ul>\n<li>\n<p>manually free allocated memory (ex. <code class=\"language-text\">new</code>)</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// manual memory management for C++</span>\n<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> str<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>garbage collector</strong>: automatically frees up memory that a program is not using anymore</p>\n<ul>\n<li>strategies: tracing garbage collection, reference counting</li>\n</ul>\n</li>\n</ul>\n<h4>cf) Smart Pointers</h4>\n<p>a.k.a unique pointers or shared pointers which <strong>automatically manage and free resources</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"></code></pre></div>\n<h3>Mutable vs. Immutable Objects</h3>\n<ul>\n<li>\n<p><strong>mutable object</strong>: can be changed after it's created</p>\n<ul>\n<li>mutable objects are nice bcuz you can make <strong>changes in-place</strong></li>\n<li>but be careful since the changes are reflecting into all references of that object</li>\n</ul>\n</li>\n<li><strong>immutable object</strong>: cannot be changed</li>\n</ul>\n<h4>in C++</h4>\n<p><strong>everything is mutable by default</strong></p>\n<ul>\n<li><code class=\"language-text\">const</code> keyword to make immutable</li>\n<li>\n<p>but <code class=\"language-text\">const_cast</code> lets you cast away const keyword so nothing is truly immutable</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// immutable vector</span>\n<span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// modified to mutable vector</span>\n<span class=\"token keyword\">const_cast</span><span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>","frontmatter":{"title":"Interview Cake - 0. General Programming","date":"2019-06-27","tags":["Interview Cake"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/Interview_Prep/Interview_Cake/0_general_programming/"}}