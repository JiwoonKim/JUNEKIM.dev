{"data":{"markdownRemark":{"html":"<blockquote>\n<p>대회나 시험을 볼 때 그리디 문제가 나왔다면, 제일 마지막에 풀 것!</p>\n</blockquote>\n<h3>그리디 알고리즘 (Greedy Algorithm)</h3>\n<p><strong>각 단계에서 그 순간에 가장 좋다고 생각하는 것을 선택하면서 답을 찾아나가는 알고리즘</strong> 이다. </p>\n<ul>\n<li>\n<p>다만, 그때 그때는 최적일지도 모르지만, 최종적으로는 답이 최적이 아닐 수도 있다. </p>\n</li>\n<li>\n<p>그렇기에, 그리디는 반드시 <strong>지금 이 순간의 가장 좋은 경우</strong> 가 <strong>나중에도 항상 최적인 경우에만 사용해야 한다</strong>.</p>\n</li>\n</ul>\n<h4>그리디 vs. DP</h4>\n<ul>\n<li>DP는 각 단계의 최적의 선택이 다음 단계의 최적의 선택으로 이어진다.</li>\n<li>\n<p>그리디는 각 단계의 최적의 선택이 <strong>다음 단계의 최적의 선택으로 이어지지 않을 수도 있다</strong>.</p>\n<ul>\n<li>아래 거스름돈 문제에서 이와 같은 사실을 더 분명하게 이해할 수 있으니 참고할 것. </li>\n</ul>\n</li>\n</ul>\n<h3>그리디 문제</h3>\n<h4><a href=\"https://www.acmicpc.net/problem/11047\">거스름돈</a></h4>\n<ul>\n<li>문제: 주어진 동전들로 주어진 금액을 만드는데 필요한 최소 동전의 개수 구하기</li>\n<li>\n<p>풀이: 액면가가 큰 동전부터 차례대로 금액에 맞춰 필요한 개수를 계산하고 총 사용한 동전의 개수를 리턴한다.</p>\n<ul>\n<li>단, 이러한 그리디 알고리즘은 주어진 동전들의 조합이 항상 최적인 경우에만 성립함을 명심! (ex. 한 동전은 다른 동전의 배수임이 보장되는 경우)</li>\n<li>만일 1원, 4원, 5원의 동전이 주어져 12원을 만들어야 하는 문제이면, 그리디의 (5+5+1+1)의 경우보다 더 최적인 (4+4+4) 경우가 존재한다. 이러한 경우가 있다면, <strong>그리디 알고리즘보다는 다이나믹 프로그래밍으로 문제를 풀어야만 한다</strong> .</li>\n</ul>\n</li>\n</ul>\n<h4><a href=\"https://www.acmicpc.net/problem/1931\">회의실배정</a> (중요!)</h4>\n<ul>\n<li>문제: 주어진 회의 시간들이 서로 겹치지 않으면서 회의를 가장 많이 할 수 있는 경우 구하기 (최대 회의 개수 구하기)</li>\n<li>\n<p>풀이: 일찍 끝나는 회의를 기준으로 포함시키기</p>\n<ol>\n<li>\n<p>회의 시간이 <strong>끝나는 시간</strong> 을 오름차순으로 정렬</p>\n<ul>\n<li>단, (k, k)와 같이 회의 시간이 시작하자마자 끝나는 회의들도 있기 때문에 끝나는 시간이 같다면 시작 시간이 이른 순서대로 정렬하게끔 해야만 한다</li>\n</ul>\n</li>\n<li>차례대로 회의 시간들의 끝나는 시점을 기준으로 <strong>현재 시간을 업데이트</strong> 해가며 포함시킬 수 있는 회의 시간들을 카운트하기 </li>\n</ol>\n</li>\n</ul>\n<h4>ATM</h4>\n<h4>잃어버린 괄호</h4>\n<h4>수 묶기</h4>\n<h4>대회 or 인턴</h4>\n<h4>30</h4>\n<h4>병든 나이트</h4>\n<h4>NMK</h4>\n<h4>행렬</h4>\n<h4>롤러코스터</h4>","frontmatter":{"title":"[백준] 중급 01. 그리디 알고리즘","date":"2019-09-04","tags":["백준","백준 중급","알고리즘","Cpp","그리디"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/Baekjoon/2_INTERMEDIATE/1_greedy_algorithm/"}}