{"data":{"markdownRemark":{"html":"<p>다형성은 상속을 통해 확장하거나 변경하는 것을 가능하게 함\n관용적인 개념의 다형성은 같은 모양의 코드가 다른 행위를 하는 것</p>\n<p>하나의 클래스나 함수가 다양한 방식으로 동작이 가능한 것</p>\n<p>사전적 의미 '여러모양', 한 가지 형태로 여러가지의 기능을 수행할 수 있는 것을 뜻한다. &#x3C;소설자바>에서는 이를 『만능 열쇠』에 빗대어 설명하고 있는데, 이는 매우 합당한 예이다. 하나의 열쇠로 서로다른 문들을 열 수 있다면 얼마나 좋을 것인가!\n객체지향 언어의 다형성의 시작은 상속에서 시작하고 그 원리는 아래와 같다.\n한 타입의 참조 변수는 여러 타입의 객체를 참조할 수 있다.\n이 내용이 객체지향 언어이 다형성을 구현하는 핵심 원리이다. 절대로 잊어서는 안된다. 이는 만능 열쇠를 얻는 첫 번째 단계이다.</p>\n<p>『하나의 이름으로 여러가지 기능을 할 수 있다면 얼마나 좋을까?』라는 생각은 이후 포스팅 할 다형성의 근본 개념이며 모든 프로그래밍 언어의 궁극적인 목적이라고 할 수도 있다. 이러한 다형성을 이루는 여러가지 문법적인 요소 중에 추상 클래스와 인터페이스가 존재한다.</p>\n<h3>다형성 (Polymorphism)</h3>\n<p><code class=\"language-text\">poly</code>(many) + <code class=\"language-text\">morphs</code>(forms)가 합쳐진 뜻으로 <strong>한 객체가 여러 가지 형태를 취할 수 있는 성질</strong> 을 의미한다.</p>\n<h4>다형성의 종류</h4>\n<p>한 가지의 의미를 가진 행동(메소드)이 다양한 형태로 표현될 수 있다 </p>\n<ul>\n<li>객체가 더 전형적인(superclass)의 형태로 표현된다 (업캐스팅을 통해)</li>\n<li>하나의 행동(메소드)이 사용되는 방법(매개변수, 리턴타입)에 따라 다양한 형태로 표현된다 (오버로딩을 통해)</li>\n<li>하나의 행동(메소드)이 사용하는 주체(객체)에 따라 다양한 형태로 표현된다 (오버라이딩을 통해)</li>\n</ul>\n<p>즉, 업캐스팅, 오버로딩, 오버라이딩을 통해, 또는 이러한 기능들이 지원되기 때문에 그 결과로 객체가 다형성을 가지게 된다고 볼 수 있다</p>\n<h4>업캐스팅을 통해 객체의 다양한 형태 살펴보기</h4>\n<ul>\n<li></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Trainer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nPerson redAsPerson <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Trainer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 레드는 사람이면서</span>\nTrainer redAsTrainer <span class=\"token operator\">=</span> red<span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 트레이너이다</span></code></pre></div>\n<ul>\n<li>다만, 단순히 다양한 형태를 가질 수 있다는 의미보다는, 주로 객체가 가진 <strong>행동들이 다양한 형태로 표현될 수 있다</strong> 는 의미로 쓰인다 (즉, <strong>메소드와 관련</strong> 하여 주로 다형성이 얘기된다)</li>\n</ul>\n<h4>메소드에 변화를 줌으로써 객체의 다양한 행동 형태 살펴보기</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">메소드 오버로딩 (method overloading)</th>\n<th align=\"left\">메소드 오버라이딩 (method overriding)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">같은 이름의 메소드를 여러 개 작성</td>\n<td align=\"left\">서브 클래스가 상속받은 메소드 재작성</td>\n</tr>\n<tr>\n<td align=\"left\">클래스 내 또는 상속 관계에서 가능</td>\n<td align=\"left\">서브 클래스에서 가능</td>\n</tr>\n<tr>\n<td align=\"left\">사용의 편리성 향상을 위해</td>\n<td align=\"left\">서브클래스에 맞춰 상속받은 메소드를 재정의하기 위해</td>\n</tr>\n<tr>\n<td align=\"left\">메소드 이름이 같되, 인자 개수와 타입은 달라야 함</td>\n<td align=\"left\">메소드의 이름, 인자 개수와 타입 모두 동일해야 함</td>\n</tr>\n<tr>\n<td align=\"left\">정적 바인딩 (컴파일 시에 호출되는 메소드가 결정됨)</td>\n<td align=\"left\">동적 바인딩 (실행 시에 오버라이딩된 메소드 찾아 호출)</td>\n</tr>\n</tbody>\n</table>\n<h3>메소드 오버로딩 (Method Overloading)</h3>\n<p>한 클래스 내에서 이름이 같은 메소드를 각각 다르게 여러 개 작성하기</p>\n<ul>\n<li>메소드 오버로딩을 통해 한 클래스 내의 같은 의미의 행동(메소드)이 다양한 형태로 표현될 수 있다 </li>\n<li>반드시 <strong>메소드의 인자 개수</strong> 또는 <strong>타입</strong> 이 <strong>달라야 한다</strong> (+ 리턴 타입이 추가로 달라져도 괜찮다)</li>\n<li>\n<p>컴파일 시에 중복된 메소드 중 호출되는 메소드가 결정된다 (정적 바인딩)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 생성자 메소드 오버로딩</span>\n<span class=\"token keyword\">public</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>String name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>String name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 메소드 오버로딩</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"walking...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span>String place<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 매개변수 변화</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"in the \"</span> <span class=\"token operator\">+</span> place<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> blocked<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 매개변수 &amp; 리턴타입 변화</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"something is blocking the way!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h3>메소드 오버라이딩 (Method Overriding)</h3>\n<p><strong>부모 클래스의 메소드를</strong> 자식 클래스에서 <strong>재정의하는 것</strong></p>\n<ul>\n<li>\n<p>메소드 오버라이딩을 통해 행하는 객체의 클래스 타입에 따라 같은 의미의 행동(메소드)이 다양한 형태로 표현될 수 있다 </p>\n</li>\n<li>\n<p><strong>메소드 이름, 인자 타입 및 개수, 리턴 타입 등이 일치해야</strong> 된다 (하나라도 다르면 메소드 오버라이딩이 실패하고, 자식 클래스에 오버로딩된 메소드가 추가되기만 함)</p>\n</li>\n<li>\n<p>static, private 또는 final 메소드는 오버라이딩 될 수 없으며, 오버라이딩된 메소드의 접근 지정자는 상위 클래스 메소드의 접근 지정자보다 범위가 넓어야만 한다 </p>\n</li>\n<li>\n<p>실행 시간에 오버라이딩된 메소드 찾아 호출한다 (동적 바인딩)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"walking...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Trainer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 슈퍼 클래스의 메소드 오버라이딩</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"in the wild grass!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><strong>한 클래스가 다른 클래스로부터 상속되었다면</strong>, 그 클래스의 <strong>객체는 다형성을 가진다</strong> 고 할 수 있다</p>\n<ul>\n<li>cf) 모든 클래스는 Object 클래스로부터 상속되기 때문에 <strong>자바의 모든 클래스는 다형성을 가진다</strong> </li>\n</ul>\n</li>\n</ul>\n<h4>동적 바인딩 (Dynamic Binding)</h4>\n<p><strong>부모 클래스의 메소드를 무시하고, 자식 클래스에서 새로 작성된 메소드가 실행됨</strong></p>\n<ul>\n<li>\n<p>오버라이딩 된 메소드는 무조건 실행되도록 <strong>동적 바인딩</strong> 된다 </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"walking...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Trainer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 오버라이딩</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"walking in the wild grass!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 드라이버 코드</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Person villager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        villager<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"walking...\"</span>\n        Trainer red <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Trainer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 동적 바인딩에 의해 오버라이딩된 walk()이 호출됨</span>\n        red<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// \"walking in the wild grass!\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// villager.start() -> Person.start() => Person.walk() 호출</span>\n<span class=\"token comment\">// red.start()  -> 상속받은 Person.start() => 오버라이딩된 Trainer.walk() 호출</span></code></pre></div>\n</li>\n<li>\n<p>업캐스팅된 레퍼런스이더라도, 가르키는 객체의 오버라이딩된 메소드를 무조건 실행한다</p>\n<ul>\n<li>업캐스팅된 레퍼런스는 하위 클래스의 변수 및 메소드에 접근할 수 없는 것이 원칙이지만, 동적 바인딩에 의해 객체의 오버라이딩된 메소드가 호출됨</li>\n</ul>\n</li>\n<li>cf) super로 접근한 메소드는 동적바인딩이 되지 않는다</li>\n</ul>","frontmatter":{"title":"[OOP] 05. 다형성","date":"2019-10-01","tags":["Java","객체지향 프로그래밍"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/CS_Core/OOP/5/"}}