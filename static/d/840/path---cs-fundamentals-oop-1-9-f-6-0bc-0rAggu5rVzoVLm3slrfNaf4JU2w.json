{"data":{"markdownRemark":{"html":"<h3>객체지향 프로그래밍 (Object-oriented Programming)</h3>\n<h4>왜 객체 지향적인 프로그래밍이 필요한가</h4>\n<ul>\n<li>\n<p>프로그램이 복잡해질수록 <strong>데이터를 관리하는데 문제</strong> 가 생기기 시작</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// 전역 변수</span>\n<span class=\"token keyword\">int</span> anyoneCanUse<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 전역 변수를 공유하는 함수들</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">function_1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> anyoneCanUse<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">function_2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> anyoneCanUse<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>ex. 프로그램 내의 서로 다른 함수가 하나의 데이터를 공유해야 되어, 전역변수를 사용하는 경우</li>\n<li>프로그램이 복잡해지고 동일한 데이터를 접근하는 함수들이 많아질수록, 점점 그 데이터가 올바르게 조작되고 있는지를 관리하기가 힘들어진다. </li>\n<li>특히, 의도와 다르게 조작될 확률도 커지기 때문에 프로그램에 에러가 발생하는 큰 문제가 될 수 있다. </li>\n</ul>\n</li>\n<li>\n<p>그래서 구조체를 만들 듯이, <strong>데이터와 함수들을 객체(object) 단위로 묶어 관리하고자 함</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// 객체 안에 서로 관련된 데이터와 함수들을 묶음</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">GroupedInObject</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span> \n        <span class=\"token comment\">// 오직 클래스 내의 함수들만 접근 가능</span>\n        <span class=\"token keyword\">int</span> classMembersOnly<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        <span class=\"token comment\">// 클래스 내의 함수들끼리는 데이터를 공유하면서,</span>\n        <span class=\"token comment\">// 그 외의 함수들로부터는 데이터를 보호</span>\n        <span class=\"token keyword\">int</span> <span class=\"token function\">function_1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> classMembersOnly<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> <span class=\"token function\">function_2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> classMembersOnly<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<h4>객체지향 프로그래밍의 주요 개념들</h4>\n<ul>\n<li>\n<p><strong>캡슐화 (encapsulation)</strong>: 캡슐처럼 데이터와 함수들을 하나의 객체로 묶어 관리함으로써 해당 객체 이외의 조작으로부터 데이터를 보호하는 것</p>\n<ul>\n<li>클래스를 사용할 경우, 객체의 틀을 이루어 캡슐화를 이루며 클래스 내의 접근 한정자들을 통해 정보를 은닉(data hiding)이 가능</li>\n</ul>\n</li>\n<li>\n<p><strong>상속 (inheritance)</strong>: 다른 객체를 기반으로 객체를 만드는 것</p>\n<ul>\n<li>class-based inheritance: 다른 클래스를 기반으로 클래스를 정의</li>\n<li>prototype-based inheritance: 다른 객체를 기반으로 객체를 정의</li>\n</ul>\n</li>\n<li><strong>다형성 (polymorphism)</strong>: 동일한 이름의 다양한 형태의 객체를 만들 수 있는 것</li>\n</ul>\n<h3>자바 언어 (Java)</h3>\n<p><strong>플랫폼 독립적인 클래스 기반의 객체지향 프로그래밍 언어</strong></p>\n<ol>\n<li>\n<p>\"<strong>Write once, run anywhere</strong>\": 자바 프로그램이 컴파일된 바이트 코드(byte code)는 JVA가 있는 어떠한 플랫폼에서도 실행이 가능하다</p>\n<ul>\n<li>자바 소스 파일(.java)은 자바 컴파일러인 javac을 통해 <strong>바이트 코드(.class)로 컴파일</strong> 된다</li>\n<li>바이트 코드(.class)로 된 파일은 <strong>JVM(Java Virtual Machine)이 인터프리터(interpreter) 방식으로 해석하고 실행</strong> 한다 (각 플랫폼마다 호환되는 JVM이 있기 때문에, JVM만 있으면 플랫폼 호환성을 해결할 수 있다)</li>\n<li>즉, 프로그래머는 호환성 문제를 신경 쓸 필요 없이, <strong>자바 프로그램 하나만을 작성하면 JVM이 있는 어떤 환경에서든 사용가능해진다</strong></li>\n<li>cf 그림 일러 추가하기) C언어의 경우에는 각 OS에 따라 다른 컴파일러를 가지고 있어 컴파일되는 최종 .exe 기계어 파일이 달라지기 때문에 이를 다른 환경에서 실행할 수 없다. (사용을 위해서는 실행되는 파일을 다운받아 사용하는데, 한 c파일 당 여러 컴파일러들을 통해 컴파일 환경에 맞는 다양한 exe파일을 제공해야만 한다) 그에 반해 java는 완전히 최종 컴파일된 기계어를 사용자들에게 제공하기보다는 바이트 코드로 컴파일한 단 하나의 파일만을 제공하고서 사용자들이 각자의 환경에서 알아서 jvm을 사용하여 환경에 맞게끔 사용할 수 있게끔 하는 시스템이다</li>\n</ul>\n</li>\n<li>\n<p><strong>안전하고 효율적인 메모리 사용</strong></p>\n<ul>\n<li>Garbage collector를 사용함으로써 대다수 메모리 처리 작업이 자동적으로 이루어진다</li>\n<li>메모리 포인터를 사용하지 않음으로써 접근이 허용되지 않는 메모리 접근 및 사용의 위험성을 제거한다</li>\n</ul>\n</li>\n<li>분산시스템(distributed system)을 지원: 다른 컴퓨터와의 네트워크 연결을 위해 주요한 프로토콜(http, ftp)들과, socket 통신(tcp/ip), 다중 쓰레드(multi-threaded) 프로그램을 지원</li>\n</ol>\n<h3>자바 설치하기</h3>\n<p>자바 표준 배포판(SE; Standard Edition) 설치</p>\n<ul>\n<li>\n<p><a href=\"(https://www.oracle.com/technetwork/java/javase/downloads/index.html)\"><strong>JDK</strong> (Java Software Development Kit)</a>: 자바 응용 개발 환경으로, 개발에 필요한 도구 포함 컴파일러 및 도구, 자바 런타임 환경(JRE), 클래스 라이브러리의 소스, 자바 응용 프로그램의 샘플 소스 등을 제공</p>\n<ul>\n<li>\n<p>javac: 자바 소스 파일(.java)을 바이트 코드 파일(.class)로 컴파일하는 자바 컴파일러</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">// 자바 소스 파일 컴파일\njavac MyProgram.java</code></pre></div>\n</li>\n<li>\n<p><strong>JRE</strong> (Java Runtime Environment): 자바 실행 환경으로 JVM이 포함 (자바 실행 환경만 필요한 경우, JRE만 따로 다운 가능)</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">// 자바 바이트 코드 파일 실행\njava MyProgram</code></pre></div>\n</li>\n<li>자바 API: 클래스 라이브러리로 패키지(서로 관련된 클래스들을 묶은 형태)로 제공</li>\n</ul>\n</li>\n<li>자바 JDK 구성\n<img src=\"/1_java_se-fe953d585ef1fc03acbce46e59acea14.png\" width=\"100%\"></li>\n</ul>\n<h3>자바 사용하기</h3>\n<h4>클래스란 (class)</h4>\n<p>객체를 쉽게 만들기 위해 정의한 템플릿</p>\n<ul>\n<li>자바 프로그램은 클래스 정의로 시작하며, 클래스 내에서 모든 변수나 메소드를 정의한다</li>\n<li>\n<p>실행은 main() 메소드부터 시작한다</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 클래스 정의</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyProgram</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 메인 함수로부터 실행이 시작된다</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><strong>클래스로 객체의 상태를 저장하는 변수(field)와 행동을 정의하는 함수(method)를 정의</strong> 하고, 이러한 클래스를 바탕으로 다양한 종류의 <strong>인스턴스(instance)를 만들어 사용</strong> 한다</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 동그라미 클래스 정의</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 접근이 제한된 상수와 변수</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> PI <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> radius<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 접근이 공개된 메소드</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        radius <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>radius <span class=\"token operator\">*</span> radius <span class=\"token operator\">*</span> PI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 스케치 클래스 정의</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Sketch</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 메인 함수만 있기에 때문에 스케치 클래스는</span>\n    <span class=\"token comment\">// 동그라미 클래스를 테스트하기 위한 드라이브 코드이다</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 동그라미 클래스를 바탕으로 인스턴스를 생성</span>\n        Circle c1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 만들어진 인스턴스의 메소드 사용</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"원의 크기는 \"</span> <span class=\"token operator\">+</span> c1<span class=\"token punctuation\">.</span><span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h4>자바의 기본 데이터 타입</h4>\n<ul>\n<li>논리 타입: boolean (1 byte)</li>\n<li>문자 타입: char (2 byte, unicode)</li>\n<li>정수 타입: byte (1 byte), short (2 byte), int (4 byte),  long (8 byte)</li>\n<li>실수 타입: float (4 byte), double (8 byte)</li>\n<li></li>\n<li>클래스에 대한 레퍼런스, 인터페이스에 대한 레퍼런스, 배열에 대한 레퍼런스</li>\n</ul>","frontmatter":{"title":"[객체지향 프로그래밍] 01. OOP개요와 자바 언어","date":"2019-09-23","tags":["Java","객체지향프로그래밍"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/CS_Fundamentals/OOP/1/"}}