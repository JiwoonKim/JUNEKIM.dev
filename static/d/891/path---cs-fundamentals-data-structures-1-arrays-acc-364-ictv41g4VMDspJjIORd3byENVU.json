{"data":{"markdownRemark":{"html":"<blockquote>\n<p>자료구조 기본 중 가장 기초적인 배열 소개</p>\n</blockquote>\n<h3>배열 (Arrays)</h3>\n<p>sequence of same data type</p>\n<ul>\n<li>stored in <strong>contiguous memory space</strong></li>\n<li>constant time access (a.k.a. <strong>random access</strong>)</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">크기가 변하지 않는 배열 ( fixed array )</th>\n<th align=\"center\">크기가 변할 수 있는 배열 ( resizable array )</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">정적 배열 (static array)</td>\n<td align=\"center\">동적 배열 (dynamic array)</td>\n</tr>\n<tr>\n<td align=\"center\">동적으로 할당된 배열 (dynamically-allocated array)</td>\n<td align=\"center\">*</td>\n</tr>\n</tbody>\n</table>\n<h3>정적 배열 (Static Arrays)</h3>\n<p>크기가 사전에 결정되어 변수로 선언이 불가능한 배열 (fixed array)</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// 1차원 배열</span>\n<span class=\"token keyword\">int</span> nums1<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">int</span> nums2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// 2차원 배열</span>\n<span class=\"token keyword\">int</span> grid<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>\n<p><strong>컴파일 타임</strong> 때 <strong>크기가 결정</strong> 된다 (<strong>before 실행</strong>)</p>\n<ul>\n<li>그러므로 변수로 크기를 정의할 수 없음 (ex. <code class=\"language-text\">int arr[num]</code> X)</li>\n</ul>\n</li>\n<li>정적으로 메모리가 할당되어 <strong>스택(stack) 공간에 저장</strong> 된다</li>\n</ul>\n<h3>동적으로 할당된 배열 (Dynamically-allocated Arrays)</h3>\n<p>정적 배열과 마찬가지로 사전에 크기가 결정되지만, 변수로도 선언 가능한 배열 (also fixed array)</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// 1차원 배열</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> nums3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums3<span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// 2차원 배열</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> grid <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> row<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p><strong>런 타임</strong> 때 <strong>크기가 결정</strong> 된다 (<strong>while 실행</strong>)</p>\n<ul>\n<li>변수로 크기 정의가 가능 (ex. <code class=\"language-text\">int arr[num]</code>)</li>\n</ul>\n</li>\n<li>\n<p>단, 크기가 결정되어 있으므로 상황에 따라 공간이 남거나 모자랄 수 있다</p>\n<ul>\n<li>최대 크기를 예측하여 <strong>크기를 사전에 정의해야</strong> 하며, 상황에 따라 크기를 늘리거나 줄일 수 없는 단점이 있다 (<strong>dynamically resize X</strong>)</li>\n</ul>\n</li>\n<li><strong>힙(heap) 공간에 저장</strong> 된다</li>\n</ul>\n<h3>동적 배열 (Dynamic Array)</h3>\n<p>사전에 크기가 결정될 필요가 없고, 상황에 따라 늘어나거나 줄어들 수 있는 배열 (resizable array)</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DynamicArr</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> arr<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 현재 사용 중인 크기</span>\n        <span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 전체 사용가능한 공간</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        <span class=\"token comment\">// 크기 2배로 늘리기</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 크기가 2배인 새 배열을 만들기</span>\n            <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> tempArr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>capacity <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 이전 배열의 원소를 새 배열로 모두 옮기기</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> num_elements<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                tempArr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// 이전 배열 삭제</span>\n            <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 새 배열로 포인터 업데이트</span>\n            arr <span class=\"token operator\">=</span> tempArr<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>store pointer to dynamically-allocated array and replace it w/ newly allocated array as needed</li>\n<li>only possible if it is a dynamicically-allocated array</li>\n</ul>\n<h4>which is dynamic array?</h4>\n<ul>\n<li>generally, means resizable array</li>\n<li>ask if it means 'dynamically allocated' or 'dynamic as in resizable' for clarification</li>\n</ul>\n<h3>백터 (Vectors)</h3>\n<p>dynamically resizable arrays </p>\n<ul>\n<li>\n<p>implemented version of dynamic array in c++</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// declare one-dimensional vectors</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// size of 10</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// size of 10, all values 0</span>\n<span class=\"token comment\">// declare two-dimensional vectors</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>                  <span class=\"token comment\">// 10 vectors (= vector of vectors) </span>\nvector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> v<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10 rows &amp; 10 columns of 0</span></code></pre></div>\n</li>\n</ul>\n<blockquote>\n<p>해당 포스트는 educative.io의 Data Structures in C++를 바탕으로 정리되었습니다</p>\n</blockquote>","frontmatter":{"title":"[자료구조] 01. 배열","date":"2019-06-07","tags":["자료구조","Cpp"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/CS_Fundamentals/Data_Structures/1_arrays/"}}