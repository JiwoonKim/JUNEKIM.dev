{"data":{"markdownRemark":{"html":"<blockquote>\n<p>Harvard's CS50 Beyond lecture 4 정리</p>\n</blockquote>\n<h3>React</h3>\n<p>component-based framework for front-end development</p>\n<ul>\n<li>need <code>react</code>, <code>reactDOM</code>, <code>babel</code> libraries</li>\n<li>uses the JSX language and syntax</li>\n<li>\n<p>declarative programming: </p>\n<ul>\n<li>deciding on how the components should look like</li>\n<li>change state for change instead of DOM manipulation</li>\n</ul>\n</li>\n</ul>\n<h3>Components</h3>\n<ul>\n<li>each component is defined by <code>class __name__ extends React.component</code></li>\n<li>each component has a <code>render</code> method within its class to define what it should look like (composed of)</li>\n<li>\n<p><code>ReactDOM.render</code> is used when placing the components on the page (_usually the largest component is rendered since the components are nested)</p>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html>\n&#x3C;head>\n    &#x3C;!-- link library sources -->\n    &#x3C;script src=\"https://unpkg.com/react@16/umd/react.development.js\" crossorigin>&#x3C;/script>\n    &#x3C;script src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" crossorigin>&#x3C;/script>\n    &#x3C;script src=\"https://unpkg.com/babel-standalone@6/babel.min.js\">&#x3C;/script>\n&#x3C;/head>\n&#x3C;body>\n    &#x3C;!-- where react component is placed -->\n    &#x3C;div id=\"app\" />\n    &#x3C;!-- script where react component is defined -->\n    &#x3C;script type=\"text/babel\">\n        // create component\n        class App extends React.Component {\n            render() {\n                return (\n                    &#x3C;div>Hello, world!&#x3C;/div>\n                );\n            }\n        }\n        // render component on html page\n        ReactDOM.render(&#x3C;App />, document.querySelector(\"#app\"));\n    &#x3C;/script>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n</li>\n</ul>\n<h4>Props</h4>\n<ul>\n<li>\n<p><strong>attributes</strong> given to a component</p>\n<pre><code class=\"language-jsx\">class Hello extends React.Component {\n    render() {\n        return (\n            // define where props are used\n            &#x3C;h1>Hello {this.props.name}!&#x3C;/h1>\n        );\n    }\n}\n//\nclass App extends React.Component {\n    render() {\n        return (\n            &#x3C;div>\n                // pass attribute values as props\n                &#x3C;Hello name=\"Alice\" />\n                &#x3C;Hello name=\"Bob\" />\n            &#x3C;/div>\n        );\n    }\n}\nReactDOM.render(&#x3C;App />, document.querySelector(\"#app\"));\n</code></pre>\n</li>\n</ul>\n<h4>State</h4>\n<ul>\n<li>state defines <strong>the data which the component needs to keep track of</strong></li>\n<li>defined in the <code>constructor</code> of the component (must use <code>super</code>)</li>\n<li>\n<p>can only be modified by <code>setState</code> function</p>\n<ul>\n<li>good practice to <strong>use w/ arrow function</strong> to modify state than using direcly changing {this.state.stateName} for security issues (avoid race conditions)</li>\n</ul>\n</li>\n<li>\n<p>using states <strong>makes sure data and user interface are in sync</strong></p>\n<pre><code class=\"language-jsx\">class Counter extends React.Component {\n    constructor(props) {\n        super(props);\n        // the state of this component\n        this.state = {\n            count: 0;\n        }\n    }\n    render() {\n        return {\n            &#x3C;div>\n                &#x3C;h1> {this.state.count} &#x3C;/h1>\n                &#x3C;button onclick={this.increment}>Increment&#x3C;/button> \n            &#x3C;/div>\n        };\n    }\n    increment = () => {\n        // use setState and arrow function to modify state\n        this.setState(state => {\n            count: state.count + 1\n            // the other states remain the same\n        });\n    }\n}\n</code></pre>\n</li>\n</ul>\n<h4>Props vs. States</h4>\n<ul>\n<li><strong>Props</strong>: component itself never changes props</li>\n<li><strong>States</strong>: component might change states</li>\n</ul>\n<h3>Quiz App (in React)</h3>\n<pre><code class=\"language-jsx\">// container component\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        // question: num1 + num2\n        this.state = {\n            num1: 1,\n            num2: 1,\n            score: 0,\n            response: \"\",\n        }\n    }\n    render() {\n        return (\n            &#x3C;div>\n                &#x3C;h1>{this.state.num1} + {this.state.num2}&#x3C;/h1>\n                &#x3C;input \n                    value={this.state.response} \n                    onChange={this.updateResponse} \n                    onKeyPress={this.inputKeyPressed} \n                />\n                &#x3C;div>Score: {this.state.score}&#x3C;/div>\n            &#x3C;/div>\n        )\n    }\n    // update response state from input value\n    updateResponse = (event) => {\n        this.setState({\n            response: event.target.value\n        });\n    }\n    // submit response and check answer\n    inputKeyPressed = (event) => {\n        if (event.key === \"Enter\") {\n            const answer = parseInt(this.state.response);\n            // if answer is right, \n            if (answer === this.state.answer) {\n                // update score and change nums to random numbers\n                this.setState(state => {\n                    score: state.score + 1,\n                    num1: Math.ceil(Math.random() * 10),\n                    num2: Math.ceil(Math.random() * 10),\n                    response: \"\"\n                });\n            // if answer is wrong,\n            } else {\n                // just reset input value\n                this.setState(state => {\n                    response: \"\",\n                });\n            }\n        }\n    }\n}\n// render app component on page\nReactDOM.render(&#x3C;App />, document.querySelector(\"#app\"));\n</code></pre>\n<h4>Conditional Rendering</h4>\n<p>can render different things on the page depending on certain conditions</p>\n<pre><code class=\"language-jsx\">// within component class\n...\n    render() {\n        if (this.state.score >= 10) {\n            return this.renderWin();\n        } else {\n            return this.renderProblem();\n        }\n    }\n    renderProblem() {\n        return (\n            // same as above code's render function\n        )\n    }\n    renderWin() {\n        return (\n            &#x3C;h1>You won!&#x3C;/h1>\n        )\n    }\n</code></pre>\n<h4>Retrieve Data from Specific Tag</h4>\n<pre><code class=\"language-jsx\">// use data attribute\n&#x3C;li>\n    &#x3C;span>{newTask}&#x3C;/span>\n    &#x3C;button onClick={deleteTask}>Delete&#x3C;/button>\n&#x3C;/li>\n// use event target dataset value\nconst deleteTask = (event) => {\n    const index = event.target.dataset.index;\n    // delete the task from tasks array using the index\n    this.setState(state => {\n        const tasks = [...state.tasks]\n        tasks.splice(index, 1);\n        return {\n            tasks: tasks\n        }\n    })\n}\n</code></pre>\n<h4>Adding Class Styles</h4>\n<pre><code class=\"language-html\">&#x3C;!-- define a style for the class -->\n&#x3C;style>\n    .incorrect {\n        color: red;\n    }\n&#x3C;/style>\n&#x3C;script>\n    // add a new state within constructor class\n    ...\n        incorrect: false,\n    ...\n    // add className to h1 tag within renderProblem()\n    ...\n    &#x3C;h1 className={this.state.incorrect ? \"incorrect\": \"\"}>...&#x3C;/h1>\n    ...\n    // add to inputKeyPressed() function\n    // if right ... in setState()\n    incorrect: false,\n    // if wrong ... in setState()\n    incorrect: true,\n&#x3C;/script>\n</code></pre>\n<h3>Some Useful JS Tools</h3>\n<p>when you have a state, you should never change the state directly, however, you can manipulate a copy of a state</p>\n<ul>\n<li>\n<p>use <code>[...list]</code> to fill in list into this new list</p>\n<pre><code class=\"language-js\">// make a copy of the list\nconst list1 = [1, 2, 3, 4, 5];\nconst copy = [...list1];\nconst list2 = [...list1, 6];\n</code></pre>\n</li>\n<li>\n<p>use <code>splice()</code> to make a copy with some removal</p>\n<pre><code class=\"language-js\">// make a copy with some removal\nlist1.splice(3, 1); // splice off one at 3rd index\n</code></pre>\n</li>\n</ul>","frontmatter":{"path":"/cs50/beyond/4","title":"CS50 Beyond lecture 4 - React","date":"2019-04-12","tags":["CS50","CS50 Beyond","React"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}