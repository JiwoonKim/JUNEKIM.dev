{"data":{"markdownRemark":{"html":"<blockquote>\n<p>Understanding JavaScript</p>\n</blockquote>\n<ul>\n<li><a href=\"http://javascript.info/\">detailed tutorial guide</a></li>\n</ul>\n<h3>Variables</h3>\n<ul>\n<li><code class=\"language-text\">let</code>: <strong>mutable values</strong></li>\n<li>\n<p><code class=\"language-text\">const</code>: <strong>immutable values</strong></p>\n<ul>\n<li>use capital letter and underscores for hard-coded values</li>\n</ul>\n</li>\n</ul>\n<h3>Data Types</h3>\n<p>JavaScript = <strong>dynamically typed language</strong></p>\n<ol>\n<li>\n<p><strong>Number</strong>: integer and floating point numbers</p>\n<ul>\n<li><em>special numeric values</em>: <code class=\"language-text\">Infinity</code>, <code class=\"language-text\">-Infinity</code>, <code class=\"language-text\">NaN</code> (computational error)</li>\n<li><em>mathematical operations are safe</em> in JS: <strong>no fatal error</strong> (instead, returns NaN)</li>\n</ul>\n</li>\n<li>\n<p><strong>String</strong>: used w/ <em>quotes</em> (single or double)</p>\n<ul>\n<li><strong>backticks</strong> to embed variables w/ <code class=\"language-text\">${}</code></li>\n</ul>\n</li>\n<li><strong>Boolean</strong>: <code class=\"language-text\">true</code> or <code class=\"language-text\">false</code></li>\n<li>\n<p><strong>Null</strong>: <code class=\"language-text\">null</code> (<em>nothing, empty, value unknown</em> )</p>\n<ul>\n<li>used to assign an empty or unkown value to variable</li>\n</ul>\n</li>\n<li>\n<p><strong>Undefined</strong>: <code class=\"language-text\">undefined</code> (<em>value is not assigned</em>)</p>\n<ul>\n<li>used to check if variable has been assigned a value</li>\n</ul>\n</li>\n<li><strong>Objects</strong>: collections of data</li>\n<li><strong>Symbols</strong>: unique identifiers for objects</li>\n</ol>\n<h4>Check Type</h4>\n<ul>\n<li>use <code class=\"language-text\">typeof x</code> or <code class=\"language-text\">typeof(x)</code>: <strong>returns a string</strong> w/ the <strong>type name</strong></li>\n</ul>\n<h4>Type Conversion</h4>\n<p>converting values to the appropriate data type</p>\n<ul>\n<li><strong>implicit conversion</strong>: <em>operators and functions</em> <strong>automatically convert</strong> the values given to them to the right type</li>\n<li>\n<p><strong>explicit conversion</strong>: <code class=\"language-text\">String()</code>, <code class=\"language-text\">Number()</code>, <code class=\"language-text\">Boolean()</code></p>\n<ul>\n<li><code class=\"language-text\">+</code> in front of non-number: converts to <em>numeric value</em></li>\n</ul>\n</li>\n</ul>\n<h3>Functions</h3>\n<ul>\n<li>\n<p><strong>one function, one action</strong>: a function should do exactly what is suggested by its name, no more</p>\n<ul>\n<li><em>separating functions are as good as comments!</em></li>\n</ul>\n</li>\n<li>\n<p><strong>arguments</strong>:</p>\n<ul>\n<li>if a parameter(value) is <strong>not provided in use</strong>, it is <code class=\"language-text\">undefined</code></li>\n<li>can set <strong>default values for arguments</strong></li>\n</ul>\n</li>\n<li>\n<p><strong>a function can also be a value</strong></p>\n<ul>\n<li>can be assigned, copied, or declared</li>\n</ul>\n</li>\n</ul>\n<h4>Creating Functions</h4>\n<ol>\n<li>\n<p><strong>Function Declaration</strong></p>\n<ul>\n<li>use <code class=\"language-text\">function</code> keyword for declaration and <strong>name by action</strong></li>\n<li>\n<p>JavaScript engine reads and creates function before code is actually executed</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> f <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Function Expression</strong></p>\n<ul>\n<li>function created and <strong>assigned to variable</strong> w/o name (anonymous)</li>\n<li>\n<p>function <strong>assigned w/o ()</strong></p>\n<ul>\n<li>w/ (), the result of the function is stored into variable</li>\n<li>w/o (), the function itself is stored</li>\n</ul>\n</li>\n<li>\n<p>JavaScript engine creates function when assigned</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// function expression assigned to variable</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// function assigned, sayHi = function expression</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"hi\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> sayHi <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// shows function's code</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Arrow Functions</strong>: <code class=\"language-text\">=&gt;</code></p>\n<ul>\n<li>function created and <strong>assigned to variable</strong> w/o name (anonymous) and <strong>simpler than function expressions</strong></li>\n<li><em>used in the same way as function expressions</em></li>\n<li>usually takes the form as <code class=\"language-text\">() =&gt; {}</code></li>\n</ul>\n</li>\n</ol>\n<h4>Callback Functions</h4>\n<ul>\n<li>\n<p><strong>functions passed as arguments</strong> to higher-order functions</p>\n<ul>\n<li>passed the <strong>function's name (w/o () )</strong></li>\n<li>passed entire <strong>function expressions</strong> or <strong>arrow functions</strong></li>\n</ul>\n</li>\n<li>they are expected to be <strong>called back later if necessary</strong></li>\n</ul>\n<h3>Browser Functions</h3>\n<ul>\n<li><code class=\"language-text\">alert()</code>: opens modal window w/ text message</li>\n<li><code class=\"language-text\">prompt()</code>: opens modal window w/ text message and input field, returns the inputted value</li>\n<li><code class=\"language-text\">confirm()</code>: opens a modal window w/ a text message (question) and two buttons for true and false to be returned</li>\n</ul>","frontmatter":{"path":"/frontend/13","title":"Frontend Focus 13 - JavaScript Fundamentals","date":"2019-03-19","tags":["웹개발","프론트엔드","JavaScript","자바스크립트"]}}},"pageContext":{}}