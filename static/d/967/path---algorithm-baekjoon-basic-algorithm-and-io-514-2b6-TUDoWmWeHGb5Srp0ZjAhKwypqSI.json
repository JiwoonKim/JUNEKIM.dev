{"data":{"markdownRemark":{"html":"<h3>알고리즘 (Algorithm)</h3>\n<ul>\n<li>프로그래밍을 많이 하는 것보다 <strong>어떻게 문제를 풀 것인지</strong> 를 생각을 더 많이 하는 것이 더 중요!</li>\n<li><strong>시간복잡도와 입력의 크기를 고려하여 문제 풀기</strong></li>\n</ul>\n<h3>시간복잡도 (Time Complexity)</h3>\n<ul>\n<li>최악의 경우의 시간복잡도 O(n)을 통해 작성한 코드가 얼마나 걸릴 지를 예상.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">시간복잡도</th>\n<th align=\"center\">의미</th>\n<th align=\"center\">입력의 크기 for 1초</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">단순계산 (덧셈연산, 배열접근)</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">O(lgN)</td>\n<td align=\"center\">N개를 절반으로 계속해서 나눔</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">O(N)</td>\n<td align=\"center\">for문</td>\n<td align=\"center\">1억</td>\n</tr>\n<tr>\n<td align=\"center\">O(NlgN)</td>\n<td align=\"center\"></td>\n<td align=\"center\">5백만</td>\n</tr>\n<tr>\n<td align=\"center\">O(N^2)</td>\n<td align=\"center\">2중 for문</td>\n<td align=\"center\">1만</td>\n</tr>\n<tr>\n<td align=\"center\">O(N^3)</td>\n<td align=\"center\">3중 for문</td>\n<td align=\"center\">500</td>\n</tr>\n<tr>\n<td align=\"center\">O(2^N)</td>\n<td align=\"center\">크기가 N인 집합의 부분집합</td>\n<td align=\"center\">20</td>\n</tr>\n<tr>\n<td align=\"center\">O(N!)</td>\n<td align=\"center\">크기가 N인 순열</td>\n<td align=\"center\">10</td>\n</tr>\n</tbody>\n</table>\n<h3>C++ 입출력</h3>\n<ul>\n<li><code class=\"language-text\">ios_base::sync_with_stdio(false);</code>를 cin, cout 전에 사용하면 scanf, printf와 비슷한 속도로 입출력을 실행할 수 있다.</li>\n<li>\n<p>입력: </p>\n<ul>\n<li><code class=\"language-text\">scanf(&quot;%d\\n&quot;, &amp;x)</code>: \\n을 자동으로 읽지 않으니 따로 명시하는 것 주의!</li>\n<li><code class=\"language-text\">cin &gt;&gt; s</code></li>\n<li><code class=\"language-text\">getline(cin, s)</code>: 공백 포함하여 \\n 전까지 line을 읽음 (빈줄도 읽기 가능)</li>\n<li>(cin 사용후 <code class=\"language-text\">cin.ignore</code>을 사용하여 getline 사용시 \\n flush가 필요)</li>\n</ul>\n</li>\n<li>\n<p>출력:</p>\n<ul>\n<li><code class=\"language-text\">printf(&quot;%d\\n&quot;, x)</code>: 사용 시 c++ string class를 읽을 수 없으니 주의!</li>\n<li><code class=\"language-text\">cout &lt;&lt; &quot;\\n&quot;</code>을 cout &#x3C;&#x3C; endl 대신 사용하기 (더 빠르다)</li>\n</ul>\n</li>\n</ul>\n<h4>테스트 케이스</h4>\n<ul>\n<li>\n<p>모든 테스트 케이스를 입력받은 후에 출력할 필요 없다. </p>\n</li>\n<li>\n<p>하나 입력받고, 하나 출력하여 진행 가능. (테스트 개수가 주어지지 않을 때 유용)</p>\n</li>\n<li>\n<p>테스트 개수 t가 주어질 때, <code class=\"language-text\">while(t--)</code>을 사용.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> t<span class=\"token punctuation\">;</span> cin <span class=\"token operator\">>></span> t<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// t의 개수가 0 (false)일 때까지 진행</span></code></pre></div>\n</li>\n<li>\n<p>테스트 케이스 개수가 주어지지 않을 때, 입력을 EOF까지 받으면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 입력 개수가 일치할 경우 동안 진행</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span> </code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// 입력 개수가 주어질 때까지 진행</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cin <span class=\"token operator\">>></span> a <span class=\"token operator\">>></span> b<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span> </code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// 마찬가지 with getline</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span> </code></pre></div>\n</li>\n</ul>\n<h4>Input 형태</h4>\n<ul>\n<li>\n<p>Input이 인접한 형태로 주어졌을 때 (ex. 12345), <code class=\"language-text\">scanf 길이 제한</code>을 사용하여 입력받기.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%1d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 12345에서 1자리씩 읽기</span>\n<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%10s\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 문자열 길이 10씩 읽기</span></code></pre></div>\n</li>\n</ul>","frontmatter":{"path":"/algorithm/baekjoon_basic/algorithm_and_io","title":"[백준] 기초 01. 시간복잡도와 입출력","date":"2019-01-14","tags":["백준","알고리즘","C++","강의노트"]}}},"pageContext":{}}