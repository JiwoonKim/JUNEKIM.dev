{"data":{"markdownRemark":{"html":"<blockquote>\n<p>C 언어 중 몰랐던 부분만 위주로 정리.</p>\n</blockquote>\n<h4>입출력</h4>\n<ul>\n<li>visual studio에서는 scanf가 보안에 취약하기 때문에 (접근이 위험한 메모리 영역을 건들 수도 있음) 사용이 제한된다. (#define <em>CRT</em>SECURE<em>NO</em>WARNINGS으로 무시하고 사용 가능)</li>\n<li>시스템 함수 system(\"pause\")를 사용함으로써 콘솔창이 자동으로 끝나지 않게끔 할 수 있다.</li>\n</ul>\n<h4>변수와 상수</h4>\n<ul>\n<li>컴퓨터는 정수를 2의 보수 방식으로 표현한다.</li>\n<li>INT_MIN 상수를 통해 가장 낮은 정수 값을 사용할 수 있다 (최댓값 찾기할 때 유용)</li>\n</ul>\n<h4>문자열</h4>\n<ul>\n<li>gets 대신 gets_s(c, sizeof(c))를 사용하여 버퍼의 크기를 벗어나지 않게끔 체크하면서 문자열을 읽고 저장할 수 있다.</li>\n<li>문자열 처리를 위한 함수: strlen(), strcmp(), strcpy(), strcat(), strstr().</li>\n<li>\n<p>memset()을 사용하여 동적으로 문자열을 위한 메모리를 할당할 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>a <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">memeset</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// A 100개인 string</span></code></pre></div>\n</li>\n</ul>\n<h4>함수 포인터</h4>\n<ul>\n<li>함수 이름은 메모리 주소를 반환한다.</li>\n<li>\n<p>함수 포인터는 특정한 함수의 반환 자료형을 지정하는 방식으로 선언할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> func1<span class=\"token punctuation\">;</span>\n<span class=\"token function\">fp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>함수 포인터가 함수의 리턴 타입으로 선언할 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token function\">fp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> add<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h4>전처리기</h4>\n<ul>\n<li>\n<p><code class=\"language-text\">#include</code>: 외부파일을 라이브러리로 포함시킨다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;파일이름></span> </span><span class=\"token comment\">// 시스템 디렉토리에서 파일을 검색하여 가져옴</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"파일이름\"</span> </span><span class=\"token comment\">// 현재 폴더에서 파일을 검색하여 가져옴 (없으면 시스템 디렉토리에서 검색)</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">#define</code>: 상수나 함수를 매크로로 정의한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> PI 3.14159265</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ll longlong</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> POW(x) (x * x)</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">#ifndef</code>과 <code class=\"language-text\">#endif</code>: 헤더파일의 내용이 중복되지 않도록 조건부 컴파일을 실행한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> _TEMP_H</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> _TEMP_H</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span></code></pre></div>\n</li>\n<li>라이브러리를 만들 때는 소스파일(.c)과 헤더파일(.h)을 분리하여 정의한다.</li>\n</ul>","frontmatter":{"title":"[패캠] 01. C 프로그래밍","date":"2019-01-16","tags":["C","컴퓨터공학","패스트캠퍼스"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/Fastcampus/fastcampus_1/"}}