{"data":{"markdownRemark":{"html":"<blockquote>\n<p>HTML 언어로 프로그래밍할 때 필요한 치트키들을 정리.\n개인적인 자주 사용하는 문법을 반영하여 만든 치트키입니다.</p>\n</blockquote>\n<h3>GIT 설치</h3>\n<h3>VS Code 설치</h3>\n<h4>터미널 설정: git bash를 기본 터미널로 설정하기</h4>\n<ol>\n<li>preference user setting (ctrl + shift + p)에서 terminal 검색</li>\n<li>terminal > external: windows exec에서 C:\\Program Files\\Git\\bin\\bash.exe로 바꾸기 (만일 git 저장 directory가 다르면 그거에 알맞게 바꿔주기)</li>\n<li>\n<p>{} 버튼 클릭하여 user setting에서 다음을 추가</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"terminal.integrated.shell.windows\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"C:\\\\Program Files\\\\Git\\\\bin\\\\bash.exe\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"terminal.external.windowsExec\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"C:\\\\Program Files\\\\Git\\\\bin\\\\bash.exe\"</span><span class=\"token punctuation\">,</span></code></pre></div>\n</li>\n<li>terminal (ctrl + `) 열면 git bash로 설정이 되어 있음을 확인할 수 있음</li>\n</ol>\n<h3>파일 인코딩을 utf 로 변경하기 (change the encoding for task output to utf)</h3>\n<ul>\n<li>(참고) <a href=\"https://github.com/Microsoft/vscode-docs/blob/vnext/docs/editor/tasks.md#changing-the-encoding-for-a-task-output\">https://github.com/Microsoft/vscode-docs/blob/vnext/docs/editor/tasks.md#changing-the-encoding-for-a-task-output</a></li>\n<li>user setting에서 \"files.autoGuessEncoding\": true, 추가하여 file encoding 오류 방지</li>\n</ul>\n<h3>g++ compiler 설치 (c++ 언어 파일 컴파일을 위해)</h3>\n<ol>\n<li>\n<p>mingw exe의 basic setup에서 다음의 4개 선택 후 installation -> apply changes 실행하기</p>\n<ul>\n<li>mingw-developer-toolkit</li>\n<li>mingw32-base</li>\n<li>mingw32-gcc-g++</li>\n<li>msys-base (이거는 리눅스와 유사한 환경으로 프로그래밍 하고 싶으면)</li>\n</ul>\n</li>\n<li>시스템 속성의 고급 탭에서 환경 변수 Path에 C:\\MinGW\\bin 추가 ( ; 로 다른 것과 구분)</li>\n<li>vs code에서 c/c++ extension install/reload 하기</li>\n<li>cpp 파일 컴파일 시 <code class=\"language-text\">g++ -o name name.cpp</code> 사용하기</li>\n</ol>\n<h3>Node 설치</h3>\n<p><a href=\"https://nodejs.org/en/\">https://nodejs.org/en/</a></p>\n<h4>yarn 설치</h4>\n<h3>Python 설치</h3>\n<ol>\n<li>\n<p>add python to PATH 체크</p>\n</li>\n<li>\n<p>customize install location에서 C:\\Python\\Python37 설정</p>\n<ul>\n<li>c 드라이브 아래에 python 폴더를 하나 만들고 그 안에서 파이썬 버전들을 관리하는 것이 용이</li>\n<li>(bcuz 파이썬 2가지 버전 사용: python 2.x, python 3.x)</li>\n</ul>\n</li>\n<li>\n<p>virtual env 설치: <code class=\"language-text\">pip install virtualenv</code></p>\n</li>\n</ol>\n<h3>Docker 설치</h3>\n<ul>\n<li>\n<p>windows 버전 (hv가 있는지에 따라) docker 또는 docker toolbox 설치</p>\n</li>\n<li>\n<p>docker toolbox\n= uses docker-machine to create virtual machine on virtualbox\n-> automatically creates a Linux VM on Virtualbox that hosts Docker on your windows system</p>\n<p>-> 설치 후, docker quickstart terminal 실행</p>\n<p>-> docker compose 설치 (자동으로 깔림)</p>\n</li>\n</ul>","frontmatter":{"title":"개발 환경 셋업 매뉴얼","date":"2019-02-24","tags":["Setup","매뉴얼"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/Cheatkeys/setup/"}}