{"data":{"markdownRemark":{"html":"<blockquote>\n<p>C++ 언어로 프로그래밍할 때 필요한 치트키들을 정리.\n개인적인 자주 사용하는 문법을 반영하여 만든 치트키입니다.</p>\n</blockquote>\n<h3>입출력</h3>\n<ul>\n<li>기본적으로 <code class=\"language-text\">scanf</code>와 <code class=\"language-text\">printf</code>이 가장 빠르다.</li>\n<li><code class=\"language-text\">ios_base::sync_with_stdio(false);</code>를 <code class=\"language-text\">cin</code>과 <code class=\"language-text\">cout</code> 사용 전에 명시하면 비슷한 빠르기로 실행가능 (하지만 그래도 scanf와 printf가 더 빠름)</li>\n<li>\n<p>입력:</p>\n<ul>\n<li><code class=\"language-text\">getline(cin, s)</code>를 사용하면 '\\n' 기준으로 한 줄씩 읽을 수 있다 (단, cin 사용 후에 getline을 사용하려면 <code class=\"language-text\">cin.ignore</code>로 먼저 istream에 있는 '\\n'을 flush해주어야 함) </li>\n</ul>\n</li>\n<li>\n<p>출력:</p>\n<ul>\n<li><code class=\"language-text\">cout &lt;&lt; &quot;\\n&quot;</code>가 endl 보다 빠르다.</li>\n<li>printf 사용시 c++ string class를 출력할 수 없기 때문에 c-type string으로 변환해주어야 한다.</li>\n</ul>\n</li>\n</ul>\n<h4>테스트 케이스</h4>\n<ul>\n<li>\n<p>모든 테스트 케이스를 입력받은 후에 출력할 필요 없이, 하나 입력받고 하나 출력하는 방식으로 진행해도 된다. (테스트 개수가 주어지지 않을 때 유용)</p>\n<ol>\n<li>\n<p>테스트 케이스의 개수가 주어지는 경우, `while(t--)을 사용할 것</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> t<span class=\"token punctuation\">;</span> cin <span class=\"token operator\">>></span> t<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// t의 개수가 0 (false)일 때까지 진행</span></code></pre></div>\n</li>\n<li>\n<p>테스트 케이스의 개수가 주어지지 않는 경우, 입력을 EOF까지 받으면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 입력 개수가 일치할 경우 동안 진행</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cin <span class=\"token operator\">>></span> a <span class=\"token operator\">>></span> b<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 입력 개수가 주어질 때까지 진행</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">string s<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 마찬가지 with getline</span></code></pre></div>\n</li>\n</ol>\n</li>\n</ul>\n<h4>Input 형태</h4>\n<ul>\n<li>\n<p>Input이 인접한 형태로 주어졌을 때 (ex. 12345), <em>scanf 길이 제한</em> 을 사용하여 입력받기.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%1d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 12345에서 1자리씩 읽기</span>\n<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%10s\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 문자열 길이 10씩 읽기</span></code></pre></div>\n</li>\n<li>\n<p>float나 double 출력시, <code class=\"language-text\">fixed</code>를 사용하여 원하는 방식대로 출력할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iomanip></span></span>\n<span class=\"token comment\">// 값이 너무 클 때, scientific notation이 아닌 숫자 그대로 출력</span>\n<span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> <span class=\"token number\">365808847</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// </span>\ncout <span class=\"token operator\">&lt;&lt;</span> fixed <span class=\"token operator\">&lt;&lt;</span> d<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 실수의 특정 자리수를 지정하여 출력</span>\n<span class=\"token keyword\">float</span> f <span class=\"token operator\">=</span> <span class=\"token number\">3.1415</span><span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> fixed <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setprecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3.14 (셋째자리에서 반올림)</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setprecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3.14</span></code></pre></div>\n</li>\n</ul>\n<h3>숫자와 수학</h3>\n<h4>올림, 내림, 반올림</h4>\n<ul>\n<li>\n<p><code class=\"language-text\">&lt;cmath&gt;</code> 헤더파일 포함시켜 사용하기</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#### 최소값 &amp; 최대값\n- `&lt;limits&gt;` 헤더파일 포함시켜 사용하기.\n- 최소값 찾을 때: `numeric_limits&lt;int&gt;::max()`로 먼저 초기화하여 사용하기.\n- 최대값 찾을 때: `numeric_limits&lt;int&gt;:: min()`로 먼저 초기화하여 사용하기.\n- 벡터 내에서 최소값 또는 최대값 찾을 때: `min_element()` 또는 `max_element()`으로 이터레이터 값 접근하여 사용하기.\n\n### 탐색\n- 벡터/배열 내에 존재하는지 여부 판단을 위한 방법 2 가지:\n    1. set와 count를 이용하는 방법\n    2. sort 후 binary_search를 이용하는 방법\n\n### 런타임 에러 피하기 프로토콜\n- 자료형: 숫자가 너무 커지는 경우, int보다는 long이나 long long이 적절하다 (런타임에러 피하기)\n- 벡터 삭제: `erase`를 사용할 경우, iterator 값이 그 다음 값으로 자동으로 증가하니 주의!\n    - 만일, 원형으로 이어진다고 가정할 경우, `it++; if (it == v.end()) it = v.begin();` 와 `if (it == v.begin()) it = v.end(); it--`를 사용하면 좋다. 백준 문제 중 풍선 터뜨리기(2346번) 문제 참고하기!</code></pre></div>","frontmatter":{"path":"/cheatkeys/cpp","title":"C++ 치트키","date":"2019-01-14","tags":["C++","치트키"]}}},"pageContext":{}}