{"data":{"markdownRemark":{"html":"<blockquote>\n<p>Understanding JavaScript</p>\n<ul>\n<li>objects, primitive data types</li>\n<li>based on <a href=\"http://javascript.info/\">tutorial</a></li>\n</ul>\n</blockquote>\n<h3>Objects</h3>\n<p>store <strong>keyed collections</strong> of <strong>various data</strong> and more complex entities</p>\n<ul>\n<li>\n<p><strong>create empty objects</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// object constructor</span>\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// object literal syntax</span></code></pre></div>\n</li>\n<li>\n<p><strong>define properties</strong>: <code class=\"language-text\">key: value</code> pairs</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Oh\"</span><span class=\"token punctuation\">,</span> \n    age<span class=\"token punctuation\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">sayOh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">// method</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// use 'this'</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// if key == value, can use shorthand</span>\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// { name: name, age: age,}</span></code></pre></div>\n<ul>\n<li><strong>keys</strong>: <strong>string</strong> or <strong>symbol</strong></li>\n</ul>\n</li>\n<li>\n<p><strong>access properties</strong>: use <code class=\"language-text\">.</code> or <code class=\"language-text\">[]</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">obj<span class=\"token punctuation\">.</span>isAlphabet <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// dot notation</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> obj<span class=\"token punctuation\">[</span>isAlphabet<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// bracket notation</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/* bracket notation is more powerful: \ncan use variables as properties and can create computed properties */</span>\n<span class=\"token keyword\">let</span> input <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Insert an input\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"default\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>input<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> obj<span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span> <span class=\"token punctuation\">)</span> <span class=\"token comment\">// access by inputted key</span></code></pre></div>\n<ul>\n<li>if property name is <strong>simple</strong>, use <strong>dot</strong></li>\n<li>for more <strong>complex</strong>, use <strong>brackets</strong></li>\n</ul>\n</li>\n<li>\n<p><strong>delete properties</strong>: use <code class=\"language-text\">delete</code> operator</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">delete</span> obj<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p><strong>check property exists</strong>: use <code class=\"language-text\">!== undefined</code> or <code class=\"language-text\">in</code> operator</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// true means that property does not exist</span>\n<span class=\"token function\">alert</span> <span class=\"token punctuation\">(</span> obj<span class=\"token punctuation\">.</span>noP <span class=\"token operator\">===</span> undefined <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true means property exists</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"noP\"</span> <span class=\"token keyword\">in</span> obj <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">in</code> <strong>works better</strong> since a property's value could be set to <code class=\"language-text\">undefined</code></li>\n</ul>\n</li>\n<li>\n<p><strong>iterate over all keys</strong>: use <code class=\"language-text\">for</code> and <code class=\"language-text\">in</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> `$<span class=\"token punctuation\">{</span>key<span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>properties are <strong>ordered</strong>: integers are sorted while others are in order of creation</li>\n<li>symbol properties do not appear in for loops bcuz they are hidden properties</li>\n</ul>\n</li>\n</ul>\n<h4>This</h4>\n<p><code class=\"language-text\">this</code> points to object within the context</p>\n<ul>\n<li>defined at run-time</li>\n<li>arrow functions do not have <code class=\"language-text\">this</code></li>\n</ul>\n<h4>Copied by Reference</h4>\n<p>objects are stored and copied by reference</p>\n<ul>\n<li>objects store the <strong>address in memory</strong></li>\n<li>properties of objects declared as <code class=\"language-text\">const</code> <strong>can be changed</strong></li>\n<li>\n<p><strong>cloning/merging an object</strong>: use <code class=\"language-text\">Object.assign</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// clone object</span>\n<span class=\"token keyword\">let</span> copied <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>  obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// merge several objects into one</span>\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"oh\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> add1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> canAdd<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> sub1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> canSub<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> add1<span class=\"token punctuation\">,</span> sub1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// obj = { name: oh, canAdd: 1, canSub: 2}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// more simply,</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> canAdd<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> canSub<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>need more sophisticated algorithm for <strong>deep cloning</strong> (<em>to clone objects within objects</em>)</li>\n</ul>\n</li>\n</ul>\n<h3>Garbage Collector</h3>\n<p><strong>monitors all objects</strong> and <strong>removes unreachable objects</strong> for memory management in JavaScript</p>\n<ul>\n<li>\n<p>reachable: values that are accessible or usable somehow</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// obj has reference to object (reachable)</span>\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"oh\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* value object is overwritten\nreference to object is lost (unreachable) */</span>\nobj <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>reachable = can be referenced from the root somehow</li>\n</ul>\n</li>\n<li>garbage collector <strong>junks the data</strong> and <strong>frees the memory</strong></li>\n</ul>\n<p>think <strong>objects like pointers</strong>:\n- if object variable is overwritten, the actual object value is lost and garbage collector frees the memory\n- if another object variable has reference, the object value is not lost or collected by garbage collector</p>\n<h4>How it works</h4>\n<ul>\n<li>it remembers roots, its references, and its references ...</li>\n<li>in the end, those that were unreachable in this process (objects which do not have links) are removed</li>\n</ul>","frontmatter":{"path":"/frontend/16","title":"Frontend Focus 16 - JavaScript Objects","date":"2019-03-20","tags":["웹개발","프론트엔드","JavaScript","자바스크립트"]}}},"pageContext":{}}