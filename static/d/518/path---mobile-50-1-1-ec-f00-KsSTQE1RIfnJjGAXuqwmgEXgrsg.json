{"data":{"markdownRemark":{"html":"<blockquote>\n<p>Understanding JavaScript ES6 Standards</p>\n</blockquote>\n<h3>ES6</h3>\n<ul>\n<li>the <strong>specification</strong> of the language <strong>ECMA Script</strong></li>\n<li>JavaScript = <em>implementation</em> of this specification</li>\n<li>\n<p>conventionally, environments <strong>generally support ES5</strong></p>\n<ul>\n<li>need <strong>transpilers</strong> (<em>Babel, TypeScript, CoffeeScript</em>, etc.) to make newer features <em>backward compatible to ES5 spec</em></li>\n</ul>\n</li>\n<li>\n<p><strong>use newer specs</strong></p>\n<ul>\n<li>bcuz browsers will eventually catch up</li>\n<li>can use transpilers to convert to ES5</li>\n</ul>\n</li>\n</ul>\n<h3>Closures</h3>\n<p>a function having <strong>access to the parent scope</strong>, <strong>even after the parent function has closed</strong></p>\n<h4>Immediately Invoked Function Expression (IIFE)</h4>\n<ul>\n<li>a.k.a <strong>self-invoking function</strong></li>\n<li>\n<p><strong>function expression invoked automatically, w/o being called</strong></p>\n<ul>\n<li>function expression must be <em>wrapped around parenthesis</em></li>\n<li>and must be <em>followed by ()</em> to be self-invoking</li>\n</ul>\n</li>\n<li>\n<p>creates <strong>closure</strong> to enable the function to have a <strong>private variable</strong> while not polluting the global scope</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> add <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// self-invoked function (only invoked once)</span>\n    <span class=\"token keyword\">var</span> counter<span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// sets the counter to 0</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// returns a function expression (add becomes function)</span>\n        counter <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> counter<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// has access to counter variable</span></code></pre></div>\n</li>\n</ul>\n<h3>First-class Functions</h3>\n<p>handling functions as <em>first-class citizens</em></p>\n<ul>\n<li>\n<p><strong>functions are treated the same way as values</strong> (functions = objects)</p>\n<ul>\n<li>can be <strong>assigned</strong> to variables, arrays values, and object values</li>\n<li>can be <strong>passed as arguments</strong> or <strong>returned</strong> by other functions</li>\n</ul>\n</li>\n<li>allows the creation of <strong>higher-order functions</strong></li>\n</ul>\n<h4>Higher-order Functions</h4>\n<p>can take functions as arguments or return them</p>\n<ul>\n<li><code class=\"language-text\">forEach()</code>: initiates a function on each of the elements in the array</li>\n<li><code class=\"language-text\">map()</code>: maps a particular function to every element in the array, returns a result array</li>\n<li><code class=\"language-text\">filter()</code>: filters an array through a function (returns true/false) and only retains the elements that had true values</li>\n<li><code class=\"language-text\">reduce()</code>: takes multiple values (array) and reduces it to a single value (accumulates in how the function was defined)</li>\n<li>also includes <strong>any custom-made function</strong> that takes functions as arguments or return them</li>\n</ul>\n<h3>Synchronous vs. Async vs. Single-threaded</h3>\n<ul>\n<li>\n<p><strong>JavaScript</strong>: <strong>synchronous</strong> and <strong>single-threaded language</strong></p>\n<ul>\n<li>a function may lock up the page (become unresponsive)</li>\n<li>page may have to wait for a function to be over</li>\n</ul>\n</li>\n<li>\n<p>but, JavaScript can also be <strong>aynchronous</strong> (can use <em>asynchronous functions</em>)</p>\n<ul>\n<li>ex. <code class=\"language-text\">setTimeout(_function_, _seconds_)</code></li>\n</ul>\n</li>\n</ul>\n<h4>Asynchronous JavaScript</h4>\n<p>executes everything in the execution stack and then, checks the function queue (which is sent browser API) to execute</p>\n<ul>\n<li><strong>Execution Stack</strong>: <em>call stack</em> for <strong>synchronous functions</strong></li>\n<li>\n<p><strong>Browser APIs</strong>: space of <strong>asynchronous functions</strong> <em>tracked by the browser</em></p>\n<ul>\n<li>functions not built-in to the JavaScript </li>\n<li>functions are <strong>sent to function queue</strong></li>\n<li>ex. <code class=\"language-text\">setTimeout(_function_, _seconds_)</code></li>\n</ul>\n</li>\n<li><strong>Function Queue</strong>: <em>queue</em> for <strong>asynchrnous functions</strong></li>\n<li>\n<p>Event Loop: </p>\n<ul>\n<li></li>\n</ul>\n</li>\n</ul>\n<h4>Execution Stack</h4>\n<h3>Overflow</h3>\n<h3>Asynchronous Functions</h3>\n<h3>Callbacks</h3>\n<h3>Promises</h3>\n<h3>Async/Await</h3>\n<h3>this</h3>\n<h3>Broswers and the DOM</h3>","frontmatter":{"path":"/mobile50/1","title":"Mobile50 lecture 1 - ES6","date":"2019-03-18","tags":["웹개발","프론트엔드","JavaScript","자바스크립트"]}}},"pageContext":{}}