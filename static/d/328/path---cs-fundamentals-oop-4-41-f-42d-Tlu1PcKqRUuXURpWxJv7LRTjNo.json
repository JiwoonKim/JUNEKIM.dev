{"data":{"markdownRemark":{"html":"<h3>상속 (Inheritance)</h3>\n<p>기존의 클래스를 <strong>연장하여 새로운 클래스를 유도하는 것</strong></p>\n<img src=\"/4_inheritance_ex-ea475c622666a376e14fd3f42144a376.png\" width=\"100%\">\n<ul>\n<li><strong>상위 클래스</strong> (<strong>super class</strong>): 기존에 있는 클래스 (또는 parent class라고도 함)</li>\n<li>\n<p><strong>하위 클래스</strong> (<strong>sub class</strong>): 상위 클래스를 연장하는 클래스 (또는 child class라고도 함)</p>\n<ul>\n<li>하위 클래스는 상위 클래스의 데이터와 메소드를 <strong>모두 이어 받는다</strong></li>\n<li>하위클래스에 추가적으로 <strong>변수와 메소드를 추가</strong> 함으로써 기존의 클래스를 <strong>연장하여 사용</strong> 한다</li>\n</ul>\n</li>\n<li>\n<p>상속을 통해 <strong>코드를 재사용</strong> 하기 때문에 <strong>소프트웨어의 생산성을 높일 수 있다</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 상위 클래스: 사람 캐릭터       |   // 하위 클래스: 포켓몬 트레이너</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>            <span class=\"token operator\">|</span>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Trainer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> String name<span class=\"token punctuation\">;</span>         <span class=\"token operator\">|</span>       <span class=\"token comment\">// name, walk()을 상속받음</span>\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    <span class=\"token punctuation\">{</span>    <span class=\"token operator\">|</span>       <span class=\"token comment\">// 자신만의 변수와 함수를 추가하여 연장</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"walking...\"</span><span class=\"token punctuation\">;</span>     <span class=\"token operator\">|</span>       <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> badges<span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>                            <span class=\"token operator\">|</span>       <span class=\"token keyword\">public</span> String <span class=\"token function\">battle</span><span class=\"token punctuation\">(</span>Trainer other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>                                <span class=\"token operator\">|</span>           <span class=\"token keyword\">return</span> <span class=\"token string\">\"challenges a battle!\"</span><span class=\"token punctuation\">;</span>\n                                 <span class=\"token operator\">|</span>       <span class=\"token punctuation\">}</span>\n                                 <span class=\"token operator\">|</span>   <span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>cf) 자바 언어에서는 클래스의 다중 상속을 지원하지 않는다!</li>\n</ul>\n<h4>상속관계 vs 포함관계</h4>\n<ul>\n<li><strong>상속관계</strong> (inheritance): 자식 클래스 <code class=\"language-text\">is-a</code> 부모 클래스의 일종 </li>\n<li>\n<p><strong>포함관계</strong> (aggregation): 클래스 <code class=\"language-text\">has-a</code> 다른 클래스</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> String name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 상속관계 (is-a): 슈퍼 클래스의 연장   |  // 포함관계 (has-is): 다른 클래스를 소유</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Trainer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>  <span class=\"token operator\">|</span>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">room</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> badges<span class=\"token punctuation\">;</span>                <span class=\"token operator\">|</span>      <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> roomNumber<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>                                      <span class=\"token operator\">|</span>      <span class=\"token keyword\">private</span> Person resident<span class=\"token punctuation\">;</span>\n                                       <span class=\"token operator\">|</span>  <span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h4># 상속의 접근 범위</h4>\n<p>상속을 받더라도 접근 지정자의 종류와 상속 관계인 두 클래스의 상대적인 위치에 따라, 자식 클래스가 부모 클래스의 데이터와 함수에 접근이 가능한지의 여부가 달라진다</p>\n<ul>\n<li><code class=\"language-text\">public</code> &#x26; <code class=\"language-text\">protected</code>: <strong>언제든 상속받아 접근 가능</strong></li>\n<li><code class=\"language-text\">default</code>: 두 클래스가 <strong>동일한 패키지에 존재할 경우에만</strong>, 상속받아 접근 가능</li>\n<li>\n<p><code class=\"language-text\">private</code>: 절대 <strong>접근 불가</strong> (상속의 의미가 크게 없음)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Super</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> publicVal<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">int</span> protectedVal<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span> <span class=\"token keyword\">int</span> defaultVal<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> privateVal<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Sub</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Super</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        publicVal <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        protectedVal <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        defaultVal <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 다른 패키지면, 컴파일 오류</span>\n        privateVal <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 무조건 컴파일 오류; getPrivateVal()을 통한 접근이 권장됨</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h4># Super 레퍼런스 (<code class=\"language-text\">super</code>)</h4>\n<p>해당 객체의 <strong>부모 클래스를 가르키는 레퍼런스</strong> </p>\n<ul>\n<li>\n<p>자식 클래스에서 <strong>부모 클래스의 데이터 또는 메소드에 접근</strong> 할 때 사용된다</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Trainer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Trainer</span><span class=\"token punctuation\">(</span>String name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> badges<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 부모의 기본 생성자 이외의 생성자 코드를 재사용</span>\n        <span class=\"token comment\">// (super가 없다면, 자동으로 Master()이 호출 됨)</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 그 외 부분 정의</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>badges <span class=\"token operator\">=</span> badges<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>             <span class=\"token operator\">|</span>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Trainer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>String name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token operator\">|</span>       <span class=\"token keyword\">public</span> <span class=\"token function\">Trainer</span><span class=\"token punctuation\">(</span>String name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> badges<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"walking...\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Trainer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token comment\">// 부모 클래스의 데이터 및 메소드 호출</span>\n        String s <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> s <span class=\"token operator\">+</span> <span class=\"token string\">\"with trainer shoes!\"</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>메소드의 경우, 주로 부모로부터 상속받은 메소드를 자식이 수정(<strong>메소드 오버라이딩</strong>)할 때, 부모 메소드를 호출하는 경우에 사용된다. 나머지 메소드는 어차피 상속받았기 때문에 굳이 super로 접근할 필요가 없고, 오로지 메소드 오버라이딩 시 부모 메소드가 필요될 때에만 사용하면 된다</li>\n<li>\n<p>단, 생성자 메소드는 상속되지 않기 때문에, <strong>파라미터가 있는 부모 생성자를 기반으로 자식 생성자를 정의</strong> 하고자 할 때에도 사용되기도 한다</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Trainer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Trainer</span><span class=\"token punctuation\">(</span>String name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> badges<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 부모의 기본 생성자 이외의 생성자 코드를 재사용</span>\n        <span class=\"token comment\">// (super가 없다면, 자동으로 Master()이 호출 됨)</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 그 외 부분 정의</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>badges <span class=\"token operator\">=</span> badges<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>기본적으로 모든 자식 생성자는 부모의 기본 생성자를 먼저 호출한 후,  자식 생성자를 호출하는 순서를 가진다 (만약 상위 생성자에 기본 생성자가 없다면, 컴파일 오류가 생김)</li>\n</ul>\n</li>\n</ul>\n<h3>업캐스팅과 다운캐스팅</h3>\n<p>업캐스팅된 레퍼런스를 사용하면 메소드가 더 전형적인 형태의 객체를 메소드 인자로 받게끔 정의할 수 있고 컴파일 오류도 덜 남</p>\n<ul>\n<li>\n<p><strong>업캐스팅</strong> (<strong>upcasting</strong>): 슈퍼 클래스 레퍼런스가 서브 클래스 레퍼런스 가르키기</p>\n<ul>\n<li>단, 슈퍼 클래스 레퍼런스는 오로지 슈퍼 클래스에서 정의된 데이터와 함수들만 접근 가능 (서브 클래스에서 추가된 멤버들을 접근 불가능)</li>\n</ul>\n</li>\n<li>\n<p><strong>다운캐스팅</strong> (<strong>downcasting</strong>): 서브 클래스 레퍼런스가 슈퍼 클래스 레퍼런스 가르키기</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 업캐스팅을 통해 자동으로 타입 변환이 이루어짐</span>\nSubclass c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Superclass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 업캐스팅 되었던 것을 다시 강제로 되돌리기</span>\nSuperclass p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Superclass<span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>cf) <code class=\"language-text\">instanceof</code> 연산자: 레퍼런스가 가리키는 객체의 원래 타입을 식별하는데 사용 (true / false 반환)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">Person red <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Trainer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>red <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"red is a person\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 출력</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>red <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Trainer</span><span class=\"token punctuation\">)</span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"red is a pokemon trainer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 출력</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>red <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Professor</span><span class=\"token punctuation\">)</span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"red is a professor\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// X</span></code></pre></div>\n</li>\n</ul>","frontmatter":{"title":"[OOP] 04. 상속","date":"2019-09-25","tags":["Java","객체지향프로그래밍"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/CS_Fundamentals/OOP/4/"}}