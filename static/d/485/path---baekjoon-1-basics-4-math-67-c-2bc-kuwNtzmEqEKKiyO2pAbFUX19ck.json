{"data":{"markdownRemark":{"html":"<blockquote>\n<p>알고리즘 문제를 풀 때 필요한 수학 공식들</p>\n</blockquote>\n<h3>나머지 연산</h3>\n<ul>\n<li>(A + B) % C = <strong>[(A % C) + (B % C)] % C</strong></li>\n<li>\n<p>다이나믹 문제에서 주로 나온다</p>\n<ul>\n<li>경우의 수를 구할 때, 그 수가 <strong>범위를 overflow 하지 않기 위해 결과값에 나머지를 연산하게끔 한다</strong></li>\n</ul>\n</li>\n</ul>\n<h3>최대공약수 (GCD)</h3>\n<p>Greatest Common Divisor</p>\n<ol>\n<li>2부터 min(A, B)까지 모든 정수로 나누어보는 방법: O(N)</li>\n<li>\n<p><strong>유클리드 알고리즘</strong> (Euclidean algorithm): </p>\n<ul>\n<li>\n<p><strong>gcd(a, b) = gcd(b, a % b)</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// 재귀함수로 구현한 유클리드 알고리즘</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">%</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// 비 재귀방식으로 구현한 유클리드 알고리즘</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> a <span class=\"token operator\">%</span> b<span class=\"token punctuation\">;</span>\n        a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n        b <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>최대공약수가 1인 두 수의 관계를 <strong>서로소(Coprime)</strong>라고 한다</li>\n</ol>\n<h3>최소공배수 (LCM)</h3>\n<p>Least Common Multiplier</p>\n<ul>\n<li>최대공배수를 응용하여 구할 수 있다: LCM * GCD = A * B</li>\n<li><strong>LCM = (A * B) / GCD</strong></li>\n<li>최소공배수를 구할 때는 항상 결과값의 <strong>범위를 고려해서 자료형을 선언</strong> 해야 한다.</li>\n</ul>\n<h3>진법 변환 (Base Conversion)</h3>\n<h4>10진법 -> n진법 바꾸기</h4>\n<ul>\n<li>숫자가 <strong>0이 될 때까지 나머지를 계속해서 구해 반대의 순서로 나열</strong> 하면 된다.</li>\n<li>\n<p>ex. 11 -> 3진법: 102</p>\n<ul>\n<li>11/3 = 3 ... 2 | 3/3 = 1 ... 0 | 1/3 = 0 ... 1 => 102</li>\n</ul>\n</li>\n<li>\n<p>단, 숫자가 0일 경우는 예외로 처리해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// 숫자 0 은 예외처리</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nstring s<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    s <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">%</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// n 진법으로 변환</span>\n    num <span class=\"token operator\">/</span><span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 반대의 순서로 나열</span></code></pre></div>\n</li>\n</ul>\n<h4>n진법 -> 10진법 바꾸기</h4>\n<ul>\n<li><strong>n진법으로 표현된 수의 k 자리의 수에 n^k을 곱하면서 더해</strong> 가면 된다.</li>\n<li>ex. 3진법 수 102 -> 11 (= 2 * (3^0) + 0 * (3^1) + 1 * (3^2) )</li>\n<li>다만, 위의 방법으로 하면 n진법 수의 가장 끝자리 n-1부터 시작하여 0까지 거꾸로 더해야 하므로 불편한 단점이 있다.</li>\n<li>\n<p>so instead, <strong>n진법 수의 0자리부터 시작하여 매번 값에 n을 곱해주며 더해가면 된다</strong> (<strong>k자리를 체크할 필요가 없음</strong>)</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">string N<span class=\"token punctuation\">;</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 주어진 b진법의 수 N</span>\n<span class=\"token keyword\">int</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// </span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 매 자리마다 이미 더해진 값에 b 곱하기</span>\n    result <span class=\"token operator\">=</span> result <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 현재 자리의 값을 10진법으로 변환하여 더하기</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'0'</span> <span class=\"token operator\">&lt;=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> '<span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        result <span class=\"token operator\">+</span><span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        result <span class=\"token operator\">+</span><span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token string\">'A'</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h4>-N진수로 변환</h4>\n<ul>\n<li>일반적인 진법 변환과 <strong>똑같이 변환</strong> 을 하면 된다.</li>\n<li>\n<p>단, <strong>나머지가 음수가 나오면 안되기 때문에</strong> 이 점을 조심해서 코딩!</p>\n<ul>\n<li>나머지가 음수인 경우, 몫의 값을 변화시키고 다시 나머지를 계산하는 방법을 사용하면 된다.</li>\n</ul>\n</li>\n</ul>\n<h3>소수</h3>\n<p>약수가 1과 자기 자신밖에 없는 수</p>\n<ul>\n<li><strong>조건</strong>: N은 K (<strong>2 &#x3C;= K &#x3C;= N-1</strong>; 자연수)로 <strong>나누어 떨어지면 안된다</strong>.</li>\n<li>\n<p>소수인지 확인하는 방법: </p>\n<ol>\n<li>N이 K (2 &#x3C;= K &#x3C;= N-1 ; 자연수)로 나누어 떨어지는지 체크.</li>\n<li>\n<p>N이 K (2 &#x3C;= K &#x3C;= N / 2 ; 자연수)로 나누어 떨어지는지 체크.</p>\n<ul>\n<li>N의 약수 중에서 가장 큰 것이 N/2 보다 작거나 같다는 성질을 이용.</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>BUT 위 두 방식 전부 O(N)의 시간복잡도가 걸리므로 비효율적이다.</li>\n</ul>\n<h4>숫자가 소수인지 확인하는 방법</h4>\n<ul>\n<li>\n<p>가장 효율적인 방법은 N이 K (<strong>2 &#x3C;= K &#x3C;= 루트 N</strong>; 자연수)로 <strong>나누어 떨어지는지 체크</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// 소수 확인: O(루트 N)</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">prime</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">*</span>i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h4>에라토스테네스의 체</h4>\n<p><strong>범위 내</strong> 의 숫자들 중 모든 숫자를 구하는 방법</p>\n<ul>\n<li>[m ~ n]의 모든 숫자를 써놓은 상태로 시작한다.</li>\n<li>위의 숫자 중에서 숫자 K (<strong>m &#x3C;= K &#x3C;= 루트 n</strong>; 자연수)의 <strong>배수를 지워나간다</strong>.</li>\n<li>\n<p><strong>남아있는 수가 모두 소수가 된다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// 범위 내에서 소수 찾기: O(N * loglogN)</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> prime<span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">*</span>i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 소수 저장</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>check<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        prime<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 소수의 배수를 모두 지우기</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> j <span class=\"token operator\">+</span><span class=\"token operator\">=</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            check<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h4>골드바흐의 추측 (Goldbach's conjecture)</h4>\n<p><strong>아직 증명이 되지 않은 문제</strong></p>\n<ul>\n<li>\"2보다 큰 모든 짝수는 두 소수의 합으로 표현 가능하다\"</li>\n<li>위의 문제에 3을 더하여,</li>\n<li>\n<p>\"5보다 큰 모든 홀수는 세 소수의 합으로 표현 가능하다\"</p>\n<ul>\n<li>10^18 이하에서는 참인 것이 증명되어 있다.</li>\n</ul>\n</li>\n<li>\n<p>그러므로 <strong>에라토스테네스의 체를 응용해서 검증</strong> 가능: (N - 소수 == 소수)인지를 확인하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// 에라토스테네스의 체를 통해 2부터 n까지 소수를 구하기</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> prime<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token comment\">// 각 소수에 대해 N - prime[i]를 했을 때 소수인지 확인</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> prime<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!</span><span class=\"token operator\">+</span> prime<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>check<span class=\"token punctuation\">[</span>N <span class=\"token operator\">-</span> <span class=\"token operator\">*</span>it<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h4>소인수분해 (Prime Factorization)</h4>\n<ul>\n<li>소수를 구해야 할 필요가 없다.</li>\n<li>\n<p>그저 2부터 루트 N 값까지 루프를 돌며 나누어지면 출력하게끔 하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// 2부터 루트 N의 값까지 소인수분해하기</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">*</span>i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 반복된 값으로 소인수분해를 할 수도 있음</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        n <span class=\"token operator\">/</span><span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 남는 값이 루트 N보다 큰 경우, 소수이므로 그대로 출력</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h4>소인수분해한 개수 세기</h4>\n<p>1676번과 2004번은 순열/조합을 가장한 소인수분해 문제</p>\n<ul>\n<li>팩토리얼 (n!)과 조합 (nCm)에서 0의 개수를 세는 것은 소인수분해했을 때 2와 5의 개수를 세는 것과 같다.</li>\n<li>다만, 위의 방법대로 일일이 하나하나를 소인수분해를 할 경우, O(N + a)의 시간복잡도가 걸리므로 N의 크기가 크면 비효율적일 수 있다.</li>\n<li>\n<p>그러므로, 대신 <strong>구하려는 개수의 소수값인 k의 값을 제곱시키면서 N / k 을 계산</strong> 하는 방법이 효율적이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num_two<span class=\"token punctuation\">,</span> num_five<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// N!을 소인수분해했을 때 2의 개수 세기</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">*</span><span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    num_two <span class=\"token operator\">+</span><span class=\"token operator\">=</span> n <span class=\"token operator\">/</span> i<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// N!을 소인수분해했을 때 5의 개수 세기</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">*</span><span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    num_five <span class=\"token operator\">+</span><span class=\"token operator\">=</span> n <span class=\"token operator\">/</span> i<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>ex. n = 100, 100!을 소인수분해했을 때 5의 개수 세기</li>\n<li>\n<ol>\n<li>1~100 중에서 5를 포함한 숫자의 개수: n / 5 = 20개</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>1~100 중에서 5를 추가로 포함한 숫자의 개수: n / 25 = 4개</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>1~100 중에서 또 5를 추가로 포함한 숫자의 개수: n / 125 = 0개</li>\n</ol>\n</li>\n<li>즉, n의 값을 5, 5^2, 5^3 ...으로 나누어 계수를 세면 된다.</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"[백준] 기초 04. 수학 1","date":"2019-03-29","tags":["백준","알고리즘","Cpp","수학"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/Baekjoon/1_BASICS/4_math/"}}