{"data":{"markdownRemark":{"html":"<blockquote>\n<p>C와 C++의 문자열 정리.</p>\n</blockquote>\n<h3>문자열 (String)</h3>\n<ul>\n<li>C 문자열: <code>char c[]</code>로 선언을 한다.</li>\n<li>\n<p>C++ 문자열: <code>string s</code>로 선언을 한다.</p>\n<pre><code class=\"language-c++\">char c[] = \"c string\"; // C 문자열\nstring s = \"c++ string\"; // C++ 문자열 (NULL전까지만 할당)\nstring s = c;            // C 문자열을 담을 수도 있음 \nstring s(5, '#');        \n// \"#####\"\n</code></pre>\n<h4>문자열 입출력</h4>\n</li>\n<li><code>cin</code>와 <code>cout</code>, 그리고 <code>getline(cin, str)</code>사용이 편리하다.</li>\n<li>\n<p>printf를 사용해야 하는 경우, <code>str.c_str()</code>을 통해 C 문자열로 변환 후 출력해야 한다.</p>\n<pre><code class=\"language-c++\">include &#x3C;string>\nstring str = \"hello\";\nprintf(\"%s\", str.c_str());\n</code></pre>\n</li>\n</ul>\n<h4>문자열 연산</h4>\n<ul>\n<li>비교: <code>==</code>와 <code>!=</code>로 같은지 확인하고 <code>></code> 또는 <code>&#x3C;</code>로 사전순으로 앞서는지 뒤에 서는지 알아볼 수 있다.</li>\n<li>추가: <code>+=</code>와 <code>append</code> 또는 <code>insert</code>를 통해 뒤에 문자열을 추가할 수 있다.</li>\n<li>\n<p>크기: <code>length</code>를 통해 크기를 알아보고, <code>empty</code>를 통해 빈 문자열인지 확인해본다. </p>\n<ul>\n<li>\n<p>(size는 unsigned 형태이기 때문에 size() - 1와 같은 표현이 불가능함)</p>\n<pre><code class=\"language-c++\">include &#x3C;string>\nstring str = \"h\";    // h\nstr += \"ello\";       // hello\nstr.append(\"world\"); // hello world\nstr.insert(10, \"!\"); // hello world! (10번째 index에 추가)\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h4>문자열 &#x3C;-> 숫자</h4>\n<ul>\n<li>문자열 -> 숫자: <code>stoi()</code>, <code>stol</code>, <code>stof</code>, <code>stod</code>를 이용한다.</li>\n<li>\n<p>숫자 -> 문자열: <code>to_string()</code>를 이용한다.</p>\n<pre><code class=\"language-c++\">string str = \"10\";\nint num = stoi(str);   // 10 (기본으로 10진법으로 바꿈)\nnum = stoi(str, 0, 2); // 2 (2진법으로 숫자를 읽어 바꿈)\nnum = stoi(str, 0 16); // 16 (16진법으로 숫자를 읽어 바꿈)\n</code></pre>\n</li>\n</ul>\n<p>str = \"21 Guns\";\nnum = stoi(str); // 21 (숫자가 있는 부분까지만 읽어 바꿈)</p>\n<pre><code>#### 문자열 파싱 (string parsing)\n- `istringstream`을 사용하여 string을 표준 입출력처럼 사용할 수가 있다.\n```c++\n#include &#x3C;string>\n#include &#x3C;stringstream>\nstring str;\nstring line;\nwhile (cin >> line) s+= line;\n\nint num;\nistringstream sin(s); // 문자열 스트림을 생성\nwhile (getline(sin, num, ',')) {...}; // 문자열 스트림의 문자열을 ,로 구분하여 num에 저장\n</code></pre>","frontmatter":{"path":"/algorithm/baekjoon_STL/STL_string","title":"[백준] 프로그래밍 대회에서 사용하는 C++ STL string","date":"2018-01-28","tags":["백준","C++","강의노트","STL"]}}},"pageContext":{}}