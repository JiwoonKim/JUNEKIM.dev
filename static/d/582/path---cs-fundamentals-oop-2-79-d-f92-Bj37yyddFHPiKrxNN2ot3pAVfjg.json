{"data":{"markdownRemark":{"html":"<h3>클래스 (Class)</h3>\n<p><strong>객체를 쉽게 만들기 위해 정의한 템플릿</strong></p>\n<ol>\n<li>\n<p>클래스로 <strong>객체의 상태를 저장하는 변수(field)</strong> 와 <strong>행동을 정의하는 함수(method)</strong> 를 정의하고,</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 동물 클래스 정의</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 접근이 제한된 필드: 상수와 변수</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> String TYPE <span class=\"token operator\">=</span> <span class=\"token string\">\"animal\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> String name<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 접근이 공개된 생성자 메소드</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Animal</span><span class=\"token punctuation\">(</span>String s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        name <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 접근이 공개된 메소드</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>이러한 클래스를 바탕으로 다양한 종류의 <strong>객체 인스턴스(instance)를 만들어 사용</strong> 한다</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 스케치 클래스 정의</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Sketch</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 메인 함수만 있기에 때문에 스케치 클래스는</span>\n    <span class=\"token comment\">// 동물 클래스를 테스트하기 위한 드라이브 코드이다</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 동물 클래스를 바탕으로 인스턴스들을 생성</span>\n        Animal unknown <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Animal tiger <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tiger\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 만들어진 인스턴스의 메소드 사용</span>\n        tiger<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<p>쉽게 비유하자면, <strong>클래스는 붕어빵 틀</strong> 이고, 그 틀로 만든 각 <strong>붕어빵 또는 슈크림빵 하나 하나가 인스턴스 객체</strong> 에 해당한다고 볼 수 있다.</p>\n<h3>캡슐화 (Encapsulation)</h3>\n<p>서로 관련된 데이터와 함수들을 <strong>캡슐처럼 하나의 객체로 묶어</strong> 관리함으로써 <strong>객체 내의 정보를 숨기는 것</strong></p>\n<img src=\"/2_encapsulation-c1b5388491a65a71faecd4566b1dc43f.png\" width=\"70%\">\n<ul>\n<li>캡슐화를 통해 <strong>객체 내부 정보는 외부로부터 은닉</strong> 되며, 일종의 추상화를 통해 <strong>객체의 데이터를 보호</strong> 한다</li>\n<li>또, 객체의 데이터는 <strong>공개된 메소드</strong> 를 통해서만 <strong>접근이 가능</strong> 하다 (일종의 <strong>인터페이스 제공</strong>)</li>\n<li>\n<p>일반적으로 대부분의 객체지향 언어들은 <strong><code class=\"language-text\">클래스</code></strong> 를 사용하여 캡슐화를 이루고 있다</p>\n<ul>\n<li>클래스를 통해 서로 관련된 데이터와 함수를 묶는 객체의 틀을 정의하고, 클래스 내의 접근 지정자들을 통해 정보를 은닉하는 것이다</li>\n</ul>\n</li>\n</ul>\n<h4>접근 지정자</h4>\n<p>클래스 내의 데이터 또는 메소드에 대한 접근 범위를 정의하는 지정자 </p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">접근 지정자</th>\n<th align=\"center\">같은 패키지 클래스의 접근</th>\n<th align=\"center\">외부 클래스의 접근</th>\n<th align=\"left\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code class=\"language-text\">default</code></td>\n<td align=\"center\">O</td>\n<td align=\"center\">X</td>\n<td align=\"left\">같은 패키지 내에서만 접근 허용</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">private</code></td>\n<td align=\"center\">X</td>\n<td align=\"center\">X</td>\n<td align=\"left\">정의된 클래스 내에서만 접근 허용</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">protected</code></td>\n<td align=\"center\">O</td>\n<td align=\"center\">X</td>\n<td align=\"left\">같은 패키지 내에서만 접근 허용</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"left\">(단, 자식 클래스에서는 접근 가능)</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">public</code></td>\n<td align=\"center\">O</td>\n<td align=\"center\">O</td>\n<td align=\"left\">외부까지 모두 접근 허용</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>일반적으로, 클래스 내의 데이터 필드는 private로 정의되는 반면, 메소드 필드는 public로 정의된다</li>\n</ul>\n<h4>메소드를 통한 데이터 접근</h4>\n<p>객체의 데이터에 직접적인 접근을 막고, 메소드를 통해서만 데이터에 접근할 수 있는 인터페이스 제공</p>\n<ul>\n<li>accessor 메소드: 데이터 값을 확인하기 위한 메소드</li>\n<li>\n<p>mutator 메소드: 데이터 값을 바꾸기 위한 메소드</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Account</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 데이터에 직접적인 접근 불가</span>\n    <span class=\"token keyword\">private</span> String name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> balance<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Accessor 메소드</span>\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> balance<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// Mutator 메소드</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>String name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setBalance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> balance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>balance <span class=\"token operator\">=</span> balance<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h4>클래스 전역변수와 전역함수</h4>\n<ul>\n<li>\n<p><code class=\"language-text\">static</code> 키워드로 클래스 전체에 통용되는 변수 또는 함수를 정의</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 동물 클래스 정의</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token comment\">// 클래스 전체에 하나만 통용되는 static 멤버 선언</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 동일한 클래스의 모든 객체에 의해 공유되는 static 메소드 선언</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Sketch</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 클래스 이름으로 static 변수/함수 접근</span>\n        Animal<span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        Animal<span class=\"token punctuation\">.</span><span class=\"token function\">printCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 객체 멤버로 static 변수/함수 접근</span>\n        Animal cat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cat<span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        cat<span class=\"token punctuation\">.</span><span class=\"token function\">printCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>static 변수 또는 함수는 <strong>클래스 전체 이름으로 접근</strong> 하거나 <strong>객체를 통해 접근</strong> 하여 사용할 수 있다</li>\n<li>\n<p>특히, 다른 모든 클래스에서 공유하는 전역 변수나 전역 함수의 경우, static을 사용하여 하나의 클래스로 묶어 정의하면 유용하다 (자바에서의 캡슐화 원칙)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// EX. java.lang.Math 클래스 (모든 메소드가 static으로 정의됨)</span>\n<span class=\"token comment\">// 굳이 객체를 생성하지 않고 바로 호출할 수 있는 상수와 메소드 제공하기 때문에 </span>\n<span class=\"token comment\">// 그대로 사용하는 것이 더 효과적이다</span>\n<span class=\"token comment\">// 올바른 사용법       | 권하지 않는 사용법 </span>\n<span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">|</span> Math m <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">int</span> n <span class=\"token operator\">-</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>","frontmatter":{"title":"[OOP] 02. 클래스와 캡슐화","date":"2019-09-24","tags":["Java","객체지향프로그래밍"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/CS_Fundamentals/OOP/2/"}}