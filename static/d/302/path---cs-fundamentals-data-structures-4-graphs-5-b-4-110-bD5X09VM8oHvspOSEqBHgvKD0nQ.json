{"data":{"markdownRemark":{"html":"<blockquote>\n<p>비선형적으로 그물망처럼 자료를 서로 연결하는 형태로 저장하는 그래프 소개</p>\n</blockquote>\n<h3>그래프</h3>\n<p>동일한 데이터 타입의 노드들을 정점으로 서로 간선으로 이어 저장하는 자료구조</p>\n<p>그래프 <strong>G = (V, E)</strong>: 정점 집합과 간선 집합으로 이루어진다</p>\n<ul>\n<li><strong>정점</strong> (<strong>V</strong>): 자료가 실제로 저장하는 노드 (node, vertex)</li>\n<li><strong>간선</strong> (<strong>E</strong>): 자료들 사이의 관계를 나타내기 위해 자료 간을 잇는 선 (edge)</li>\n<li>cf) 차수 (degree): 해당 정점에 연결되어 있는 간선의 개수</li>\n</ul>\n<h4>그래프는 어디에 사용되는가</h4>\n<h4>그래프의 종류</h4>\n<ul>\n<li>\n<p><strong>방향</strong> (O / X): 유향 그래프 (directed graph), 무향 그래프 (undirected graph)</p>\n</li>\n<li>\n<p><strong>가중치</strong> (O / X): 가중 그래프 (weighted graph), 비가중 그래프 (unweighted graph)</p>\n</li>\n<li>\n<p><strong>순환</strong> (O / X): 순환 그래프 (cyclic graph), 비순환 그래프 (acyclic graph)</p>\n</li>\n<li>\n<p>legal coloring ( adjacent nodes same color X )</p>\n</li>\n</ul>\n<h3>그래프의 표현 방식</h3>\n<p>간선을 어떤 방식으로 저장하는가에 따라 그래프를 표현할 수 있는 방식이 3가지로 나누어진다. 일반적으로 인접 리스트를 가장 많이 사용하며 그 외에 인접 행렬, 그리고 특별한 경우에 간선 리스트를 사용한다. </p>\n<h4>1. 인접 리스트 (Adjacent List)</h4>\n<h4>2. 인접 행렬 (Adjacent Matrix)</h4>\n<h4>3. 간선 리스트 (Edge List)</h4>\n<ul>\n<li>Edge Cases</li>\n<li>node w/ no edges (bi-composites)</li>\n<li>cycles</li>\n<li>loop (cycle only itself)</li>\n</ul>","frontmatter":{"title":"[자료구조] 04. 그래프","date":"2019-08-18","tags":["자료구조","Cpp"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/CS_Fundamentals/Data_Structures/4_graphs/"}}