{"data":{"markdownRemark":{"html":"<blockquote>\n<p>Standard Template Library (STL)는 알고리즘, 컨테이너, 함수, 이터레이터로 이루어져 있으며 그 중 컨테이너를 정리</p>\n</blockquote>\n<ul>\n<li><a href=\"#%EC%88%9C%EC%B0%A8-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-sequential-container\">순차 컨테이너</a>: vector, list, deque</li>\n<li><a href=\"#%EC%97%B0%EA%B4%80-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-associative-containers\">연관 컨테이너</a>: set, map</li>\n<li><a href=\"#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%96%B4%EB%8C%91%ED%84%B0-container-adaptors\">컨테이너 어댑터</a>: stack, queue, priority_queue</li>\n</ul>\n<h3>컨테이너 (Container)</h3>\n<ul>\n<li>Pair, Tuple, Vector, Deque, List, Set, Map, Stack, Queue, Priority Queue, Bitset 등이 존재한다.</li>\n</ul>\n<h4># Pair</h4>\n<ul>\n<li>두 자료 T1과 T2를 묶어서 사용한다.</li>\n<li>Pair는 <utility> 헤더파일에 정의되지만, <algorithm>이나 <vector> 헤더파일에도 포함되어 있기 때문에 일반적으로 이 둘을 사용한다.</li>\n<li><strong>선언</strong>: <code>make_pair</code> 또는 생성자를 이용한다.</li>\n<li>\n<p><strong>접근</strong>: <code>pair.first</code>와 <code>pair.second</code> 또는 <code>tie</code>를 이용한다.</p>\n<pre><code class=\"language-cpp\">#include &#x3C;vector>\n// 선언\npair&#x3C;int,int> p;         // 선언이 따로 없으면 0과 0으로 초기화된다\np = make_pair(1, 2);     // make_pair를 통해 선언과 값 설정\np = pair&#x3C;int,int>(1, 2); // 생성자를 통해 선언과 값 설정\npair&#x3C;int,int> p(1, 2);   // 생성자를 이용한 또 다른 방법\n// 접근\np.first = 0;\np.second = 0;\ntie(x, y) = p;\ntie(a, b) = make_pair(b, a) // 변수에 들어가는 순서를 바꾸는 것도 가능\n</code></pre>\n</li>\n</ul>\n<h4># Tuple</h4>\n<ul>\n<li>둘 이상의 여러 개의 자료를 묶어 사용할 수 있다.</li>\n<li><strong>선언</strong>: <code>make_tuple</code>을 이용한다.</li>\n<li>\n<p><strong>접근</strong>: <code>get&#x3C;></code> 또는 <code>tie</code>를 이용한다.</p>\n<pre><code class=\"language-cpp\">#include &#x3C;tuple>\ntuple&#x3C;int, int, int> t1 = make_tuple(1, 2, 3);\n// 접근\ncout &#x3C;&#x3C; get&#x3C;0>(t1);     // get을 이용하여 접근\ntie(x, y, z) = t1;      // tie를 통해 각 index에 접근\ntie(x, y, ignore) = t1  // tie에 ignore를 함께 사용하여 특정 index에 접근\n</code></pre>\n</li>\n</ul>\n<h3>순차 컨테이너 (Sequential Container)</h3>\n<ul>\n<li>순서가 있는 컨테이너로 vector, list, deque, array, forward_list가 존재한다. </li>\n</ul>\n<h4># Vector</h4>\n<ul>\n<li>길이를 변경할 수 있는 배열이다.</li>\n<li><strong>선언</strong>: 길이를 직접 지정하거나, 특정 값으로 초기화하는 옵션도 가능하다.</li>\n<li><strong>접근</strong>: front와 back, 그리고 [] 또는 iterator를 이용한다.</li>\n<li><strong>삽입</strong>: <code>push_back</code>을 통해 가장 뒤쪽에 삽입, <code>insert</code>를 통해 원하는 자리에 원소를 삽입한다.</li>\n<li><strong>삭제</strong>: <code>pop_back</code>을 통해 가장 뒤쪽을 삭제, <code>erase</code>를 통해 원하는 자리의 원소를 제거, <code>clear</code>로 모든 원소 삭제한다.</li>\n<li>\n<p><strong>크기</strong>: <code>size</code>를 통해 벡터의 크기를 알아보고, <code>empty</code>를 통해 벡터가 비었는지 안 비었는지를 알아본다.</p>\n<pre><code class=\"language-cpp\">#include &#x3C;vector>\n// 선언\nvector&#x3C;int> v;         // 길이가 0인 벡터 선언\nvector&#x3C;int> v(10);     // 길이가 10인 벡터 선언\nvector&#x3C;int> v(15, 1);  // 길이가 15이고 1로 모두 초기화된 벡터 선언\nvector&#x3C;int> v = {1, 2} // list를 이용한 벡터 선언\n// 삽입\nv.insert(인덱스, 값)                  // 인덱스에 값 추가\nv.insert(인덱스, 개수, 값)            // 인덱스에 값 개수만큼 추가\nv.insert(인덱스, v.begin(), v.end()) // 인덱스에 v 벡터의 값들을 모두 삽입\n// 삭제\nv.erase(v.begin() + 인덱스)                    // 인덱스 + 1 자리 제거\nv.erase(v.begin() + 인덱스, v.begin() + 끝자리) // 인덱스 + 1부터 끝 바로 전까지 제거\n</code></pre>\n</li>\n<li>\n<p><strong>순회</strong>: 인덱스 (size와 []의 조합) 또는 iterator (begin &#x26; end의 조합)을 이용한 다양한 방식이 있다.</p>\n<pre><code class=\"language-cpp\">// 순회접근\nfor (int i = 0; i &#x3C; v.size(); i++) {\n    v[i];\n}\nfor (int &#x26;x : v) {\n    x;  // 인덱스 접근\n    *x; // 값 접근\n}\n// 이터레이터 사용하여 순회 접근\nfor(vector&#x3C;int>::iterator it = v.begin(); it != v.end(); it++) {\n    cout &#x3C;&#x3C; *it;\n}\nfor (auto it = v.begin(); it != v.end(); it++) {\n    it - v.begin(); // 인덱스 번호 접근\n    *it;            // 원소 자체의 값에 접근\n}\n</code></pre>\n</li>\n<li>\n<p>cf) vector가 pair 자료로 이루어지는 경우, emplace<em>back을 push</em>back과 동일하게 사용할 수 있다.</p>\n<pre><code class=\"language-cpp\">#include &#x3C;vector>\nvector&#x3C;pair&#x3C;int,int>> a;\na.emplace_back(1, 2);\na.push_back( {3, 4} );\n</code></pre>\n</li>\n</ul>\n<h4># Deque</h4>\n<ul>\n<li>double-ended queue의 약자로 양쪽으로 삽입과 제거가 가능한 큐이다.</li>\n<li><strong>선언</strong>: <deque> 헤더파일을 포함시킨 후에 deque&#x3C;자료> d를 통해 선언한다.</li>\n<li><strong>삽입</strong>: <code>push_front</code>와 <code>push_back</code>을 이용한다.</li>\n<li><strong>삭제</strong>: <code>pop_front</code>와 <code>pop_back</code>을 이용한다.</li>\n</ul>\n<h4># List</h4>\n<ul>\n<li>이중 연결 리스트(Doubly-linked list)를 의미한다.</li>\n<li>사실 프로그래밍 대회에서는 잘 사용하지 않는 컨테이너에 해당된다.</li>\n<li><strong>삽입</strong>: <code>push_back</code>과 <code>insert</code>을 이용한다: O(1)</li>\n<li><strong>삭제</strong>: <code>erase</code>를  이용한다: O(1)</li>\n<li>\n<p><strong>정렬</strong>: list 자체에 내장된 <code>sort</code>함수를 사용해야 한다 (<algorithm>에 포함된 sort 함수를 사용하지 못함)</p>\n<pre><code class=\"language-cpp\">list&#x3C;int> l = {2, 1, -1, 0, -2}; // 리스트 선언과 초기화\n// 정렬\nl.sort();                      // 오름차순으로 정렬 {-2, -1, 0, 1, 2}\nl.sort(greater&#x3C;int>());        // 알고리즘 greater를 사용하여 내림차순으로 정렬\nl.sort([](int &#x26;u, int &#x26;v) {    // compare 함수를 사용하여 절대값 기준으로 정렬\n    return abs(u) &#x3C; abs(v);\n});\nl.reverse();            // 현재 상태를 거꾸로 뒤집는다\n</code></pre>\n</li>\n</ul>\n<h3>연관 컨테이너 (Associative Containers)</h3>\n<ul>\n<li><strong>순서가 없는 자료구조</strong> 들로 set, multiset, map, multimap이 존재한다.</li>\n<li>Binary Search Tree로 구현이 되어 있어 <strong>삽입, 삭제, 탐색이 모두 O(logN)</strong> 이 걸린다.</li>\n</ul>\n<h4># Set</h4>\n<ul>\n<li>집합을 나타낼 때 효과적인 자료구조이다. </li>\n<li><strong>선언</strong>: <set> 헤더파일을 포함시킨 후에 set&#x3C;자료> s를 통해 선언한다.</li>\n<li><strong>접근</strong>: 순서가 없기 때문에 []나 begin() + i와 같은 표현이 불가능하며, 대신 iterator를 이용한다.</li>\n<li><strong>삽입</strong>: <code>insert</code>를 이용하여 내부가 정렬된 상태로 유지된다 (중복된 값은 허용되지 않기에 삽입 성공 실패 여부와 더불어 삽입 위치를 return한다)</li>\n<li><strong>삭제</strong>: <code>erase</code>를 이용한다.</li>\n<li><strong>크기</strong>: <code>size</code>를 이용한다.</li>\n<li><strong>탐색</strong>: <code>find</code>를 사용하여 set에 어떤 값이 들어가있는지 없는지, 있다면 위치가 어디인지를 알 수 있고, <code>count</code>를 이용하는 방법도 있다.</li>\n<li>\n<p><strong>순회</strong>: iterator와 begin &#x26; end 조합을 사용한다 (순서가 없기 때문에 begin() + i와 같은 표현은 불가능)</p>\n<pre><code class=\"language-cpp\">#include &#x3C;set>\nset&#x3C;int> s;\nset&#x3C;int> s = {1, 1, 2, 3} // 중복된 값을 인정하지 않기에 {1, 2, 3}으로만 구성\n// 삽입 (정렬된 상태를 유지한다)\npair&#x3C;set&#x3C;int>::iterator, bool> result = s.insert(4); // 삽입위치와 성공여부를 return\n// 삭제 (이터레이터로 접근하여 삭제)\ns.erase(s.begin()); // 첫 번째 인덱스 삭제\n// 탐색\nauto it = s.find(5); // 없기 때문에 end()를 호출\n// 일일히 find()를 하기보다는 수가 있는지 없는지 (1 or 0) 확인이 효율적\nfor (int i = 1; i &#x3C; 9; i++) {\n    s.count(i);      \n}\n// 순회접근 (it++ 연산이 O(logN)으로 총 O(NlogN)이 걸림)\nfor (auto it = s.begin(); it != s.end(); it++) { \n    *it;\n}\nfor (auto x : s) {\n    x;\n}\n</code></pre>\n</li>\n</ul>\n<h4># Multiset</h4>\n<ul>\n<li>set과 완벽하게 동일하나 같은 수 여러 개를 저장할 수 있는 점이 추가된 자료구조이다.</li>\n</ul>\n<h4># Map</h4>\n<ul>\n<li>key와 value로 이루어진 자료구조이다.</li>\n<li><strong>선언</strong>: <map> 헤더파일을 포함시킨 후에 map&#x3C;자료> m를 통해 선언한다.</li>\n<li><strong>접근</strong>: <code>[key값]</code>을 이용하여 접근할 수 있다 (단, 없는 경우에는 key값을 생성하는 문제 조심!) pair형태처럼 first와 second로도 접근 가능하다.</li>\n<li><strong>삽입</strong>: <code>[key값]</code>을 이용하여 value를 쌍으로 삽입한다.</li>\n<li><strong>삭제</strong>: <code>erase(key값)</code>을 이용한다</li>\n<li><strong>크기</strong>: <code>size</code>를 이용한다.</li>\n<li>\n<p><strong>탐색</strong>: 자료가 있는지 없는지 확인하는 경우에는 [key값]보다는 <code>count</code>를 사용하는 방법이 더 알맞다.</p>\n<pre><code class=\"language-cpp\">map&#x3C;int, int> m;\nmap&#x3C;int, string> m = { {1, \"슬라임\"}, {2, \"드래곤\"}};\n// 접근\ncout &#x3C;&#x3C; m[1]; // \"슬라임\"이 출력\n              // 존재하지 않는 경우 0을 반환한다 (트리구조이기에 O(logN)이 걸림)\n// 순회 접근\nfor (int i = 1; i &#x3C;= 10; i++) {\n    if (m[i]) {...} // 없는 경우에는 key값을 생성하는 문제가 생김 \n}\nfor (int i = 1; i &#x3C;= 10; i++) {\n    if (m.count(i)) {...} // 자료가 있는지 없는지 체크는 이 방법이 더 효율적\n}\n</code></pre>\n</li>\n</ul>\n<h3>컨테이너 어댑터 (Container Adaptors)</h3>\n<ul>\n<li><strong>순차 컨테이너를 변형한 자료구조</strong>로 stack, queue, priority_queue가 존재한다.</li>\n</ul>\n<h4># Stack</h4>\n<ul>\n<li>한쪽으로만 삽입과 삭제가 가능한 자료구조이다. </li>\n<li>기본적으로, deque를 형태로 구현되었으나, list 형태를 명시하여 구현도 가능하다.</li>\n<li><strong>선언</strong>: <stack> 헤더파일을 포함시킨 후에 stack&#x3C;자료> s를 통해 선언한다.</li>\n<li><strong>접근</strong>: <code>top</code>을 사용하여 O(1)로 연산이 가능하다.</li>\n<li><strong>삽입</strong> &#x26; <strong>삭제</strong>: <code>push</code>와 <code>pop</code>를 사용하여 O(1)로 연산이 가능하다.</li>\n<li>\n<p><strong>크기</strong>: <code>size</code>를 통해 크기를 알아보고, <code>empty</code>를 통해 스택이 비었는지 안 비었는지를 알아본다.</p>\n<pre><code class=\"language-cpp\">#include &#x3C;stack>\nstack&#x3C;int> s;\ns.push(1); s.push(2); s.push(3); // 차례대로 쌓이게끔 삽입\ncout &#x3C;&#x3C; s.top();                 // 제일 위의 데이터를 출력\ns.pop();                         // 제일 위의 데이터를 삭제 \n</code></pre>\n</li>\n<li>pair 자료형을 사용시 emplace를 사용할 수도 있다.</li>\n</ul>\n<h4># Queue</h4>\n<ul>\n<li>한쪽으로 삽입하고 반대쪽으로 삭제가 가능한 자료구조이다. </li>\n<li>기본적으로, deque를 형태로 구현되었으나, list 형태를 명시하여 구현도 가능하다.</li>\n<li><strong>선언</strong>: <queue> 헤더파일을 포함시킨 후에 queue&#x3C;자료> q를 통해 선언한다.</li>\n<li><strong>접근</strong>: <code>front</code>와 <code>back</code>을 사용하여 O(1)로 연산이 가능하다.</li>\n<li><strong>삽입</strong> &#x26; <strong>삭제</strong>: <code>push</code>와 <code>pop</code>를 사용하여 O(1)로 연산이 가능하다.</li>\n<li>\n<p><strong>크기</strong>: <code>size</code>를 통해 크기를 알아보고, <code>empty</code>를 통해 스택이 비었는지 안 비었는지를 알아본다.</p>\n<pre><code class=\"language-cpp\">#include &#x3C;queue>\nqueue&#x3C;int> q;\nq.push(1); q.push(2); q.push(3);        // 차례대로 쌓이게끔 삽입\ncout &#x3C;&#x3C; s.front() &#x3C;&#x3C; \" : \" &#x3C;&#x3C; s.back(); // 제일 앞과 뒤의 데이터를 출력\ns.pop();                                // 제일 앞의 데이터를 삭제 \n</code></pre>\n</li>\n<li>pair 자료형을 사용시 emplace를 사용할 수도 있다.</li>\n</ul>\n<h4># Priority Queue</h4>\n<ul>\n<li>큐와 똑같지만 가장 우선순위가 제일 높은 것(ex.숫자가 가장 큰 정수)이 먼저 나오는 자료구조이다.</li>\n<li>대표적으로 <strong>priority heap (최대힙)의 형태로 구현</strong> 된다.</li>\n<li>삽입 &#x26; 삭제: <code>push</code>와 <code>pop</code>을 이용한다.</li>\n<li>접근: 큐이지만 <code>top</code>을 사용하여 가장 큰 수가 위로 올라온다.</li>\n<li><strong>최대힙</strong>: 내림차순으로 정렬되어 삽입이 되고, 큰 순서대로 나온다.</li>\n<li>\n<p><strong>최소힙</strong>: <code>priority_queue&#x3C;자료형, vector&#x3C;자료형>, greater&#x3C;자료형></code>으로 선언하면 된다.</p>\n<pre><code class=\"language-cpp\">vector&#x3C;int> v = {1, 3, 2};\n// 벡터에 있는 원소 우선순위 큐에도 삽입 (최대힙)\npriority_queue&#x3C;int> q1;\nfor (int x : v) { \n    q1.push(x); // {3, 2, 1} 큰 순서대로 정렬이 됨\n} \n// 작은 순서대로 정렬이 됨 (최소힙)\npriority_queue&#x3C;int, vector&#x3C;int>, greater&#x3C;int>> q2; \nfor (int x : v) { \n    q2.push(x); \n}\n</code></pre>\n</li>\n</ul>\n<h4># Bitset</h4>\n<ul>\n<li>vector<bool>와 같은 형태의 자료구조이다.</li>\n<li><strong>접근</strong>: <code>[]</code> 또는 <code>test</code>를 이용한다.</li>\n<li>\n<p><strong>값 바꾸기</strong>: </p>\n<ul>\n<li><code>set</code>으로 1로 바꾸기</li>\n<li><code>reset</code>으로 0으로 바꾸기</li>\n<li><code>flip</code>으로 현재 인덱스의 값을 뒤집기</li>\n</ul>\n</li>\n<li><strong>값 확인</strong>: <code>all</code>로 모든 bit가 1인지를 확인하고, <code>any</code>로 1인 bit가 하나라도 존재하는지를 확인하고, <code>none</code>으로 모든 bit가 0인지를 확인할 수 있다.</li>\n<li><strong>개수 세기</strong>: <code>count</code>로 1인 bit의 개수를 센다.</li>\n<li>\n<p><strong>bit 연산</strong>: <code>&#x26;</code>, <code>|</code>, <code>^</code>, <code>~</code>, <code>&#x3C;&#x3C;</code>, <code>>></code>의 연산이 가능하다.</p>\n<pre><code class=\"language-cpp\">bitset&#x3C;8> b1 ; // 0, 0, 0, 0, 0, 0, 0, 0\nbitset&#x3C;10> b2(88); // 0, 0, 0, 1, 0, 1, 1, 0, 0, 0\nbitset&#x3C;8> b3(\"10110\";) // 0, 0, 0, 1, 0, 1, 1, 0\n// bit 연산\ncout &#x3C;&#x3C; (b1 &#x26; b2); // AND 연산\ncout &#x3C;&#x3C; (b1 | b2); // OR 연산\ncout &#x3C;&#x3C; (b1 ^ b2); // XOR 연산\ncout &#x3C;&#x3C; ~(b1);     // NOT 연산\ncout &#x3C;&#x3C; (b1 &#x3C;&#x3C; 2); // SHIFT LEFT 연산\ncout &#x3C;&#x3C; (b1 >> 2); // SHIFT RIGHT 연산\n</code></pre>\n</li>\n</ul>","frontmatter":{"path":"/baekjoon/STL/STL_container","title":"[백준] STL 03. 컨테이너","date":"2019-01-27","tags":["백준","Cpp","STL"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}