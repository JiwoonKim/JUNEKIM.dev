{"data":{"markdownRemark":{"html":"<blockquote>\n<p>educative.io의 Data Structures in C++ 정리</p>\n</blockquote>\n<h3>Arrays</h3>\n<p>sequence of same data type</p>\n<ul>\n<li>stored in <strong>contiguous memory space</strong></li>\n<li>constant time access (a.k.a. <strong>random access</strong>)</li>\n<li>fixed array: static array, dynamically-allocated array</li>\n<li>flexible array: dynamic array</li>\n</ul>\n<h3>Static Arrays (정적 배열)</h3>\n<p>fixed-sized arrays</p>\n<ul>\n<li>size must be determined at <strong>compile time (before 실행)</strong></li>\n<li><strong>stored in stack</strong></li>\n<li>\n<p>constraint: cannot use input as size</p>\n<pre><code class=\"language-cpp\">// one-dimension\nint nums1[5]; \nint nums2[] = {1, 2, 3};\n// two-dimension\nint grid[row][col];\n</code></pre>\n</li>\n</ul>\n<h3>Dynamically-allocated Arrays (배열을 동적으로 할당)</h3>\n<p>fixed-sized arrays but can use input as size</p>\n<ul>\n<li>size determined at <strong>run-time (while 실행)</strong></li>\n<li><strong>stored in heap</strong></li>\n<li>\n<p>constraint: must predefine max size; cannot resize dynamically</p>\n<pre><code class=\"language-cpp\">// one-dimension\nint* nums3 = new int[5];\ndelete[] nums3;\n// two-dimension\nint** grid = new int * [row];\nfor (int i = 0; i &#x3C; row; i++) {\n    grid[i] = new int[col];\n}\n</code></pre>\n</li>\n</ul>\n<h4>Dynamic Array (동적 배열)</h4>\n<p>resizable array</p>\n<ul>\n<li>store pointer to dynamically-allocated array and replace it w/ newly allocated array as needed</li>\n<li>\n<p>only possible if it is a dynamicically-allocated array</p>\n<pre><code class=\"language-cpp\">class DynamicArr {\nprivate:\nint* arr;\nint num_elements;\nint capacity;\npublic:\nvoid resize() {\n    // increase capacity of new array\n    int* tempArr = new int[capacity * 2];\n    // copy old elements to new array\n    for (int i = 0; i &#x3C; num_elements; i++) {\n        tempArr[i] = arr[i];\n    }\n    // delete the allocated space for old array\n    delete[] arr;\n    // point to new allocated memory\n    arr = tempArr;\n}\n}\n</code></pre>\n</li>\n</ul>\n<h4>which is dynamic array?</h4>\n<ul>\n<li>generally, means resizable array</li>\n<li>ask if it means 'dynamically allocated' or 'dynamic as in resizable' for clarification</li>\n</ul>\n<h3>Vectors</h3>\n<p>dynamically resizable arrays </p>\n<ul>\n<li>\n<p>implemented version of dynamic array</p>\n<pre><code class=\"language-cpp\">#include &#x3C;vector>\nusing namespace std;\n// declare one-dimensional vectors\nvector&#x3C;int> v;\nvector&#x3C;int> v(10);    // size of 10\nvector&#x3C;int> v(10, 0); // size of 10, all values 0\n// declare two-dimensional vectors\nvector&#x3C;int> v[10];                  // 10 vectors (= vector of vectors) \nvector&#x3C;vector&#x3C;int> v(10, 0)> v[10]; // 10 rows &#x26; 10 columns of 0\n</code></pre>\n</li>\n</ul>","frontmatter":{"path":"/cs/datastructure/arrays","title":"Data Structures 01 - Arrays","date":"2019-06-07","tags":["자료구조","Cpp"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}