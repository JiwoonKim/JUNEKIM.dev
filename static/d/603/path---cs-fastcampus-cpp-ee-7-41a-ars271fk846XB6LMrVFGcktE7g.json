{"data":{"markdownRemark":{"html":"<blockquote>\n<p>C++ 언어 중 몰랐던 부분 또는 부족했던 부분만 위주로 정리.\n주로 객체지향 프로그래밍 (OOP)를 위주로 정리</p>\n</blockquote>\n<ul>\n<li><a href=\"#namespace\">Namespace</a></li>\n<li><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4_class\">Class</a></li>\n<li><a href=\"#%ED%85%9C%ED%94%8C%EB%A6%BF_template\">Template</a></li>\n<li><a href=\"#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88_container\">Container</a></li>\n<li><a href=\"#%EC%98%88%EC%99%B8%EC%B2%98%EB%A6%AC_exception_handling\">Exception Handling</a></li>\n</ul>\n<h3>namespace</h3>\n<ul>\n<li><strong>특정한 범위</strong> 또는 <strong>영역</strong>에 이름을 설정할 수 있게 한다.</li>\n<li>\n<p>서로 다른 개발자가 공동으로 프로젝트를 진행할 때 <strong>각자 개발한 모듈을 정리해서 하나로 합칠 때 유용</strong> 하다.</p>\n<pre><code class=\"language-cpp\">#include &#x3C;iostream>\nusing namespace std;\n// 같은 이름의 print이지만 다른 함수가 실행된다\nnamespace A{\n    void print() {\n        cout &#x3C;&#x3C; \"A\\n\";\n    }\n}\nnamespace B{\n    void print() {\n        cout &#x3C;&#x3C; \"B\\n\";\n    }\n}\n</code></pre>\n</li>\n</ul>\n<h3>클래스 (class)</h3>\n<ul>\n<li><strong>객체 지향 프로그래밍 (Object-oriented programming)</strong> 을 가능하도록 해주는 <strong>기본적인 단위</strong>.</li>\n<li>클래스를 사용함으로써 <strong>추상화(abstraction)</strong> 와 <strong>캡슐화(encapsulation)</strong> 를 이루고, 접근 한정자를 통해 <strong>정보 은닉(data hiding)</strong> 을 이룬다.</li>\n<li><strong>클래스(class)</strong> 를 통해 <strong>객체(object)의 틀을 정의</strong> 하고, 이 틀을 바탕으로 인스턴스(instance)를 만들 수 있다. </li>\n<li>\n<p>기본적으로, <strong>private 영역에서 멤버(member)를 정의</strong> 하고 <strong>public 영역에서 메소드(method)를 정의</strong> 한다. </p>\n<pre><code class=\"language-cpp\">// 클래스 정의\nclass Character {\nprivate:    // private 접근 한정자를 사용함으로써 정보 은닉\n    string name:\n    int hp;\npublic:\n    Character(string name, int hp) { // 생성자를 통해 초기화를 할 수 있도록 정의\n        this->name = name;          // this 포인터를 사용하여 \n        this.hp = hp;               // 현재 instance의 멤버와 동일한 이름의 변수를 구분\n    }\n    Character(const Character&#x26; other) { // 복사 생성자를 사용할 수 있도록 정의\n        name = other.name;\n        hp = other.hp;\n    }\n    void show() { cout &#x3C;&#x3C; name &#x3C;&#x3C; \" : \" &#x3C;&#x3C; hp &#x3C;&#x3C; \"\\n\"; }\n    ~Character() {      // 소멸자를 정의\n        cout &#x3C;&#x3C; \"[객체가 소멸됩니다]\"; \n    }\n}\n</code></pre>\n<pre><code class=\"language-cpp\">// 클래스의 객체 선언\nCharacter char1(\"드래곤\", 10); // 생성자를 사용하여 객체 선언\nCharacter char2(char1); // 복제 생성자를 사용하여 객체 선언\n// 동적 할당으로 객체 선언 및 소멸\nCharacter* char3 = new Character(\"슬라임\", 10); // (포인터 변수 선언 필수)\ndelete char3; // 동적 할당이 아니면 오류가 남\n</code></pre>\n</li>\n</ul>\n<h4>상속 (inheritance)</h4>\n<ul>\n<li>부모 클래스(Parent class)와 자식 클래스(Child class)의 상속 관계를 통해 <strong>소스코드의 재사용성을 증대</strong> 할 수 있다.</li>\n<li>자식 클래스는 <code>:</code>을 통해 부모 클래스의 속성들을 상속받는다.</li>\n<li>자식 클래스의 인스턴스를 <strong>생성 시</strong>, <em>부모 클래스의 생성자를 먼저 호출한 후 자식 클래스의 생성자가 호출되는 순서</em> 를 따른다. </li>\n<li>반대로, 자식 클래스의 인스턴스를 <strong>소멸 시</strong>, <em>자식 클래스부터 소멸자가 호출된 후에 부모 클래스의 소멸자가 호출</em> 된다.</li>\n<li>\n<p><em>자식 클래스의 메소드가 부모 클래스의 메소드와 이름이 같고 매개 변수(argument)의 형태가 동일할 때</em>, 부모 클래스의 정의를 무시하고 그 함수를 재정의하는 <strong>오버라이딩(overriding)</strong> 이 가능하다.</p>\n<pre><code class=\"language-cpp\">class SuperCharacter : Character {\nprivate:\n    string superpower; // 기존의 Character 클래스의 멤버도 상속\npublic: \n    SuperCharacter(string superpower, string name, int hp) : Character(name, hp) {\n        this -> superpower = superpower;\n    }\n    // 오버라이딩을 통해 메소드 재정의\n    void show() { \n        cout &#x3C;&#x3C; name &#x3C;&#x3C; \" : \" &#x3C;&#x3C; superpower &#x3C;&#x3C; \"\\n\"; \n    }\n}\n</code></pre>\n</li>\n</ul>\n<h4>오버로딩 (overloading)</h4>\n<ul>\n<li>\n<p><strong>함수 오버로딩</strong>: 동일한 이름의 메소드에 <strong>매개변수의 형태를 다르게 정의</strong> 함으로써 다양한 방식으로 사용할 수 있다.</p>\n<pre><code class=\"language-cpp\">show() { cout &#x3C;&#x3C; name &#x3C;&#x3C; \" : \" &#x3C;&#x3C; superpower &#x3C;&#x3C; \"\\n\"; }\nshow(hp) { cout &#x3C;&#x3C; name &#x3C;&#x3C; \" : \" &#x3C;&#x3C; hp &#x3C;&#x3C; \"\\n\"; }\n</code></pre>\n</li>\n<li>\n<p><strong>연산자 오버로딩</strong>: 기존에 존재하는 연산자를 원하는 방식으로 수정하여 사용할 수 있다.</p>\n<pre><code class=\"language-cpp\">class Character {\n...\npublic {\n    Character operator +(const Character&#x26; other) { // 연산자 + 오버라이딩\n        return Character(name + \" &#x26; \" + other.name);\n    }\n}\n}\n</code></pre>\n</li>\n</ul>\n<h4>캡슐화 (encapsulation)</h4>\n<ul>\n<li>캡슐화는 <strong>서로 관련된 멤버 및 메소드</strong> 를 <strong>하나의 클래스로 묶어 관리</strong>하는 원리이다.</li>\n<li>\n<p>서로 다른 클래스가 서로 private 멤버에 접근해야 할 때, <strong>프렌드 클래스(Friend class)</strong> 로 선언함으로써 모든 멤버를 프렌드로 접근할 수가 있다. </p>\n<ul>\n<li>\n<p>다만, 프렌드 클래스를 너무 남용하면 객체지향 프로그래밍의 정보 은닉 효과가 떨어지기 때문에 필요한 경우에 한해서만 사용하는 것이 좋다.</p>\n<pre><code class=\"language-cpp\">class Weapons {\nfriend class Attack; // Attack 클래스가 Weapons 클래스를 사용할 수 있도록 선언\nprivate:\nstring name;   // Attack 클래스 내에서도 접근가능\n}\nclass Attack {\npublic:\nvoid attack(const Weapons &#x26;w) {\n    // Attack 클래스 내에서 직접적으로 Weapons 클래스 멤버 접근\n    cout &#x3C;&#x3C; w.name &#x3C;&#x3C; \"으로 공격!\";\n}\n}\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>정적 멤버(Static member)</strong> 를 사용함으로써 <strong>모든 객체가 멤버를 공유</strong> 할 수도 있다.</p>\n<pre><code class=\"language-cpp\">class Character {\nprivate: string name;\npublic:\n    static int count;   // 정적 멤버 선언\n    Character(string name) {\n        this.name = name;\n        count++;\n    }\n}\nCharacter::count = 0; // 클래스 밖에서 정적 멤버 count의 값 초기화\n</code></pre>\n</li>\n<li><strong>상수 멤버(Constant member)</strong> 를 사용하면 클래스 내에서도 <strong>변경되지 않는 상수</strong> 를 선언하여 사용할 수도 있다.</li>\n</ul>\n<h4>다형성 (polymorphism)</h4>\n<ul>\n<li><strong>여러 개의 서로 다른 객체가 동일한 기능을 서로 다른 방법으로 처리</strong> 할 수 있게 하는 기능이다.</li>\n<li>\n<p><strong>오버로딩</strong>과 <strong>오버라이딩</strong>을 통해 다형성이 이루어진다.</p>\n<ol>\n<li><strong>compile time에는 오버로딩</strong>(함수와 연산자 오버로딩 포함)을 통해 다형성이 이루어진다.</li>\n<li><strong>runtime에는 오버라이딩</strong>을 통해 다형성이 이루어진다.</li>\n<li>단, </li>\n</ol>\n</li>\n<li><strong>추상 클래스 (Abstract class)</strong> 를 사용함으로써 효과적으로 다형성을 구현할 수 있다 (동적 바인딩을 사용함으로써 정적 바인딩의 문제를 해결)</li>\n<li>\n<p><strong>가상 함수(Virtual function)</strong> 를 사용하여 자식 클래스에서 함수를 재정의할 수 있게 한다. (동적 바인딩 사용)</p>\n<pre><code class=\"language-cpp\"></code></pre>\n</li>\n</ul>\n<h3>템플릿 (Template)</h3>\n<ul>\n<li>템플릿을 통해 data type과 상관없이 함수 및 클래스를 사용하는 <strong>일반화 프로그래밍(Generic Programming)</strong>을 구현할 수가 있다.</li>\n<li><strong>함수 템플릿(Function Template)</strong>이 처음 호출되면 해당 자료형에 맞춰 특수화된 instance를 생성하고 이후에 해당 자료형이 사용될 때마다 instance가 호출된다.</li>\n<li>\n<p>이러한 템플릿의 자료형을 명시적으로 정의하여 함수 템플릿을 오버라이딩할 수도 있다 (<strong>명시적 특수화</strong>)</p>\n<pre><code class=\"language-cpp\">template &#x3C;typename T> // 특정 함수나 클래스 위에 template을 선언함으로써 템플릿 사용가능\nvoid change(T&#x26; a, T&#x26; b) {\nT temp;\ntemp = a;\na = b;\nb = temp;\n}\n</code></pre>\n</li>\n<li>\n<p><strong>클래스 템플릿(Class Template)</strong> 을 사용하면 자료형에 따라 다르게 동작하는 클래스 집합을 만들 수가 있다.</p>\n<pre><code class=\"language-cpp\">template &#x3C;typename T>\nclass Data {\nprivate T data;\npublic:\nData(T data) : data(data) { }\nvoid setData(T data) { this.data = data;\nT getData() { return data; }\n}\n</code></pre>\n</li>\n</ul>\n<h4>스마트 포인터 (Smart Pointer)</h4>\n<ul>\n<li>포인터처럼 동작하는 클래스 템플릿으로 프로그래머의 실수로 <strong>메모리 누수(memory leak)을 방지</strong> 하기 위한 사용된다.</li>\n<li>기본적으로 힙 영역에 동적 할당되는 메모리(new 키워드를 사용)를 해제하기 위해서는 delete 키워드를 사용해야 하는데, 까먹을 수 있기 때문에 <strong>스마트 포인터를 사용</strong> 함으로써 <strong>자동으로 메모리를 해제</strong> 하여 메모리 누수를 더 효과적으로 방지하고 컴퓨터 <strong>시스템의 안전성을 높인다</strong>.</li>\n<li><code>unique_ptr</code>: 하나의 스마트 포인터가 특정한 객체를 처리할 수 있게 한다.</li>\n<li><code>shared_ptr</code>: 특정한 객체를 참조하는 스마트 포인터의 총 개수를 참조한다.</li>\n<li>\n<p><code>weak_ptr</code>: 하나 이상의 shared_ptr 인스턴스가 소유하는 객체에 대한 접근을 제공한다 (부가적인 역할)</p>\n<pre><code class=\"language-cpp\">int a = new int(10);\nunique_ptr&#x3C;int> p(a); // 이제 p가 해당 객체의 메모리 해제 가능\n</code></pre>\n</li>\n</ul>\n<h3>컨테이너 (Container)</h3>\n<ul>\n<li><strong>STL 컨테이너 어댑터 라이브러리</strong>: 매우 활용도가 높은 자료구조를 제공한다.</li>\n<li><code>stack</code>: push, pop, top, empty, size 연산이 가능하다.</li>\n<li><code>queue</code>: push, pop, front, back, empty, size 연산이 가능하다.</li>\n<li><code>priority_queue</code>: 큐 자료구조를 자동으로 정렬한다 (<queue> 헤더파일에 포함시켜야 함)</li>\n</ul>\n<h4>시퀀스 컨테이너 (sequence container)</h4>\n<ul>\n<li>시퀀스 컨테이너는 <strong>선형구조</strong>로 vector, deque, list, forward_list이 존재한다.</li>\n<li><strong>iterator</strong>를 통해 각 원소에 접근이 가능하다 (.begin과 .end 활용)</li>\n<li><code>vector</code>: 뒤쪽에서만 데이터를 삽입과 삭제가 가능하며 배열처럼 사용하기 적합하다.</li>\n<li><code>deque</code>: 양쪽에서 데이터를 삽입과 삭제가 가능하다.</li>\n</ul>\n<h4>연관 컨테이너</h4>\n<ul>\n<li>연관 컨테이너는 <strong>key와 value 형태</strong> 의 데이터를 쌍으로 저장하는 자료구조로 set, multi<em>set, map, multi</em>map이 존재한다.</li>\n<li>\n<p><code>set (집합)</code>: 저장하려는 데이터를 key값으로 사용함으로써 <strong>정렬된 위치</strong>에 데이터를 삽입할 수 있고 <strong>검색이 빠르다</strong>. (단, <strong>key 중복 X</strong>)</p>\n<pre><code class=\"language-cpp\">#include &#x3C;set>\nset&#x3C;int> s\n</code></pre>\n</li>\n<li>\n<p><code>map</code>: 저장하려는 데이터를 <strong>key와 value 쌍</strong> 의 형태로 정렬된 위치에 삽입할 수 있고 <strong>검색이 빠르다</strong>. (단, key의 중복은 허용하지 않음); <strong>해시구조를 대신하여 자주 사용</strong> 된다.</p>\n<pre><code class=\"language-cpp\">#include &#x3C;map>\nmap&#x3C;string, int> m;\nm[\"슬라임\"] = 1;\nm[\"드래곤\"] = 2;\n</code></pre>\n</li>\n</ul>\n<h3>예외처리 (Exception Handling)</h3>\n<ul>\n<li><strong>예외</strong> 란 프로그램이 동작하는 과정에서 발생한 <strong>예상치 못한 오류(error)</strong> 이다.</li>\n<li>이렇게 발생할 가능성이 높은 오류를 <code>try ~ catch</code> 구문을 통해 <strong>예외 처리</strong> 를 수행할 수 있다.</li>\n<li><code>try</code>: 특정한 코드 블록에서 <strong>예외가 발생할 수 있음을 명시</strong> 한다.</li>\n<li><code>throw</code>: try 구문에서 오류가 발생시 <strong>던지듯이 오류를 전달</strong> 한다.\n-한 try 구문 내에서 여러 예외 상황에 대해 throw를 하여 catch가 각 오류를 처리할 수 있게 할 수도 있다 (ex. throw 1)</li>\n<li><code>catch</code>: 던져진 예외에 대해서 <strong>핸들러가 처리</strong> 한다.</li>\n</ul>\n<pre><code class=\"language-cpp\">int a = 1, b = 0;\ntry {                                   // try 내에서 예외를 체크\n    if (b == 0) {\n        throw \"0으로 나눌 수 없습니다\";  // 예외를 던지고 try 영역을 빠져나옴 (예외처리)\n    }\n    cout &#x3C;&#x3C; a / b;                      // 예외가 아닐 경우, 실행\n}\ncatch (const char* str) {               // catch를 통해 던져진 예외를 잡아 실행\n    cout &#x3C;&#x3C; str;\n}\n</code></pre>","frontmatter":{"path":"/cs/fastcampus/cpp","title":"[패캠] 강의노트 02. C++","date":"2019-01-25","tags":["Cpp","컴퓨터공학","객체지향프로그래밍","패스트캠퍼스"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}