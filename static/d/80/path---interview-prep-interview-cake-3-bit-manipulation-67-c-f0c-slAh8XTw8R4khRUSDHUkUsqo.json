{"data":{"markdownRemark":{"html":"<blockquote>\n<p>Interview Cake의 Bit Manipulation 정리</p>\n</blockquote>\n<h3>Binary Numbers</h3>\n<p>computers use binary number system (0, 1)</p>\n<h4>Unsigned Binary Numbers</h4>\n<p>use plain old base 2</p>\n<img src=\"/3_base2-a2b59fd57050c875bfbd95bbaf657609.png\" height=150px>\n<h4>Signed Binary Numbers</h4>\n<p>use <strong>2's complement</strong> encoding to represent both negative and positive numbers</p>\n<img src=\"/3_twos_complement-b487905eae76a9de55e84ae9d8cbf7d9.png\" height=155px>\n<ul>\n<li>the leftmost digit indicates positive (0) or negative (1)</li>\n<li>\n<p><strong>advantages</strong>:</p>\n<ol>\n<li>there is only way to represent zero (= sequence of only 0s)</li>\n<li>base operations (+, -, *) are the same regardless of whether numbers are positive or negative</li>\n</ol>\n</li>\n</ul>\n<p>if asked to convert binary into decimal or vice-versa (convert decimal to binary), ask <strong>\"is that in two's complement or not?\"</strong></p>\n<h3>Bitwise Operations</h3>\n<h4>AND ( &#x26; )</h4>\n<p>return <strong>1 if both bits are 1</strong>; otherwise returns 0</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token number\">5</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">6</span> <span class=\"token comment\">// = 4</span>\n<span class=\"token number\">0101</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0110</span> <span class=\"token comment\">// = 0100 (4)</span></code></pre></div>\n<h4>OR ( | )</h4>\n<p>returns <strong>1 if at least one bit is 1</strong>; otherwise returns 0</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token number\">5</span> <span class=\"token operator\">|</span> <span class=\"token number\">6</span> <span class=\"token comment\">// = 7</span>\n<span class=\"token number\">0101</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0110</span> <span class=\"token comment\">// = 0111 (7)</span></code></pre></div>\n<h4>XOR ( ^ )</h4>\n<p>returns <strong>1 if exactly one of the bits is 1</strong>; otherwise returns 0</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token number\">5</span> <span class=\"token operator\">^</span> <span class=\"token number\">6</span> <span class=\"token comment\">// = 3</span>\n<span class=\"token number\">0101</span> <span class=\"token operator\">^</span> <span class=\"token number\">0110</span> <span class=\"token comment\">// = 0011 (3)</span></code></pre></div>\n<h4>NOT ( ~ )</h4>\n<p><strong>reverses the bits</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token operator\">~</span> <span class=\"token number\">5</span> <span class=\"token comment\">// = -6 in 2's complement</span>\n<span class=\"token operator\">~</span> <span class=\"token number\">0101</span> <span class=\"token comment\">// = 1010 (-6)</span></code></pre></div>\n<h3>Bit Shifting</h3>\n<p>bit shift moves each digit the binary number to the left or right</p>\n<h4>Left Shifts ( &#x3C;&#x3C; )</h4>\n<p>means multiplying the number by 2</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// lose leftmost bits and insert 0s on the right end</span>\n<span class=\"token number\">0010</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span> <span class=\"token comment\">// 0100</span>\n<span class=\"token number\">0010</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span> <span class=\"token comment\">// 1000</span>\n<span class=\"token number\">2</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span> <span class=\"token comment\">// 8</span></code></pre></div>\n<h4>Logical Right Shifts</h4>\n<h4>Arithmetic Right Shifts</h4>","frontmatter":{"title":"Interview Cake - 3. Bit Manipulation","date":"2019-07-15","tags":["Interview Cake","Bit"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/Interview_Prep/Interview_Cake/3_bit_manipulation/"}}