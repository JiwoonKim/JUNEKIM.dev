{"data":{"markdownRemark":{"html":"<blockquote>\n<p>Harvard's Web Programming with Python and Javascript lecture 5 정리</p>\n</blockquote>\n<h3>JavaScript</h3>\n<p>programming language designed to run inside a browser that runs on <strong>client-side</strong></p>\n<ul>\n<li>client-side processes reduce load on the server and are often faster</li>\n</ul>\n<h4>Syntax</h4>\n<ul>\n<li><strong>Variables</strong>: <code class=\"language-text\">const</code>, <code class=\"language-text\">let</code> (local to scope), <code class=\"language-text\">var</code> (local to function)</li>\n<li><strong>Literals</strong>: <code class=\"language-text\">Hello, ${name}</code></li>\n<li>\n<p><strong>Selectors</strong>: </p>\n<ul>\n<li><code class=\"language-text\">document.querySelector(&quot; &quot;)</code></li>\n<li><code class=\"language-text\">document.querySelectorAll(&quot; &quot;)</code></li>\n<li>can change styles: <code class=\"language-text\">__.style._property_</code></li>\n<li>\n<p>can change classes: </p>\n<ul>\n<li><code class=\"language-text\">__.ClassName</code></li>\n<li><code class=\"language-text\">__ClassList.add</code>, <code class=\"language-text\">__ClassList.remove</code>, <code class=\"language-text\">__ClassList.toggle</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Event Listeners</strong>: <code class=\"language-text\">__.addEventListener(_event_, function() { ... });</code></p>\n<ul>\n<li>listens/waits for the event to occur</li>\n<li>when event occured, the function is called (<strong>call back functions</strong>)</li>\n</ul>\n</li>\n<li>\n<p><strong>Arrow Functions</strong>: <code class=\"language-text\">() =&gt; {}</code></p>\n<ul>\n<li>\n<p>used to define <strong>anonymous functions</strong> (w/o the word <em>function</em>)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">x <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">x <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>Hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DOMContentLoaded'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"h1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h4>JavaScript Examples</h4>\n<ul>\n<li>\n<p>To Do List</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DOMContentLoaded'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// when form is submitted, </span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#new-task'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onsubmit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// create a list item element</span>\n        <span class=\"token keyword\">const</span> li <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// assign the input value into the content of the list item</span>\n        li<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#task'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// append the list item to list</span>\n        document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#tasks'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span>'<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// reset the input value in form to blank</span>\n        document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#task'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// stop from from submitting</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>Timer (increment count by 1s)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DOMContentLoaded'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    counter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#counter'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> counter<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// problem: counter resets everytime the browser reloads</span></code></pre></div>\n</li>\n<li>\n<p>Timer (w/ local storage)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// if no counter, set as 0</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'counter'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'counter'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DOMContentLoaded'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// set the counter content as counted before</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#counter'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'counter'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// when button is clicked,</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// increment count</span>\n    <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'counter'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    coutner<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// update counter content value</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span>\"#counter'<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> counter<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// store updated value in local storage</span>\n    localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'counter'</span><span class=\"token punctuation\">,</span> counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<h3>Network Models</h3>\n<ul>\n<li>\n<p><strong>Request-Response model</strong></p>\n<ul>\n<li>basis of HTTP requests and how client-server model works</li>\n<li>useful as long as <strong>data is only being passed when a request is made</strong></li>\n</ul>\n</li>\n<li>\n<p><strong>Ajax</strong></p>\n<ul>\n<li>also <strong>based on request-response model</strong></li>\n<li>can make a request to access server-side resource <strong>while not holding up the app to wait for response</strong></li>\n<li>uses <strong>callback functions</strong> to be invoked when response is ready</li>\n</ul>\n</li>\n<li>\n<p><strong>Web Sockets</strong></p>\n<ul>\n<li><strong>based on event model</strong></li>\n<li><strong>persistent connection</strong></li>\n<li>\n<p>useful for when data is transferred frequently</p>\n<ul>\n<li>data 양이 많아 매번 request를 일일이 매번 만드는 것이 inefficient하기에 web socket가 더 유용</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3>Ajax (Asynchronous JavaScript and XML)</h3>\n<p>asynchronous way of getting data from server</p>\n<ul>\n<li>used to <strong>get more information from server w/o reloading</strong> an entirely new page</li>\n<li>used on the client-side to create asynchronous web apps</li>\n<li>굳이 client-side, server-side 따지지 말기 (ajax is its own concept; bridge btw server &#x26; client)</li>\n</ul>\n<h4>Making an Ajax Call</h4>\n<ol>\n<li>\n<p>make a <strong>request</strong>: <code class=\"language-text\">const request = new XMLHttpRequest()</code></p>\n</li>\n<li>\n<p>set the <strong>method</strong> &#x26; <strong>route</strong>: <code class=\"language-text\">request.open(&#39;GET&#39;, &#39;/&#39;)</code> or <code class=\"language-text\">request.open(&#39;POST&#39;, &#39;/&#39;)</code></p>\n</li>\n<li>\n<p>define the <strong>callback function</strong>: <code class=\"language-text\">request.onload = () =&gt; { ... }</code></p>\n<ul>\n<li>use w/ <code class=\"language-text\">const data = JSON.parse(request.responseText)</code> to <em>parse response data</em></li>\n<li>check <strong>data success</strong> and fail cases</li>\n</ul>\n</li>\n<li>\n<p><strong>send request</strong>: <code class=\"language-text\">request.send()</code> or <code class=\"language-text\">request.send(data)</code></p>\n<ul>\n<li>\n<p>if post request, use w/ <code class=\"language-text\">const data = new FormData()</code> and <em>append object to it</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DOMContentLoaded'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#form'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onsubmit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// create a request</span>\n<span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> currency <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#currency'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// set the method and route of the request</span>\nrequest<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/convert'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// callback function when request is completed</span>\nrequest<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// if successfully received resonse, show content currency</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`1 usd = $ {data.rate} $ {currency}`</span></span><span class=\"token punctuation\">;</span>\n        document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#results'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> content<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// else print error</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#results'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// create an object to hold the user input in</span>\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndata<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'currency'</span><span class=\"token punctuation\">,</span> currency<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// </span>\nrequest<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ol>\n<h3>Web Sockets</h3>\n<p>protocol that allows <strong>full duplex communication</strong></p>\n<ul>\n<li>allows to open and persist a connection to server so data is transferred quickly</li>\n<li>enables <strong>real-time communication</strong></li>\n<li><strong>both client &#x26; server can send messages</strong></li>\n</ul>\n<h4>Using Web Sockets</h4>\n<ul>\n<li>add a specific reference script to the html</li>\n<li>\n<p>use socket in custom script (js)</p>\n<ul>\n<li><code class=\"language-text\">var socket = io.connect(location.protocol + &#39;//&#39; + document.domain + &#39;:&#39; + location.port)</code></li>\n<li><code class=\"language-text\">socket.on(&#39;connect&#39;, () =&gt; { ... }</code></li>\n<li><code class=\"language-text\">socket.emit(&#39;submit vote&#39;, {&#39;selection&#39;: selection})</code></li>\n<li>\n<p><code class=\"language-text\">socket.on(&#39;announce vote&#39;, data =&gt; { ... }</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DOMContentLoaded'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// create a socket connection</span>\n<span class=\"token keyword\">var</span> socket <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">.</span>protocol <span class=\"token operator\">+</span> <span class=\"token string\">'//'</span> <span class=\"token operator\">+</span> document<span class=\"token punctuation\">.</span>domain <span class=\"token operator\">+</span> <span class=\"token string\">':'</span> <span class=\"token operator\">+</span> location<span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsocket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connect'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// if button is clicked, emit a message to server</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>button <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    button<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> selection <span class=\"token operator\">=</span> button<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>vote<span class=\"token punctuation\">;</span>\n        socket<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'submit vote'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'selection'</span><span class=\"token punctuation\">:</span> selection<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// when a message is received from server, display vote</span>\nsocket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'announce vote'</span><span class=\"token punctuation\">,</span> data <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">const</span> li <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nli<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`vote recorded: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>data<span class=\"token punctuation\">.</span>selection<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#votes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>enable sockets in server</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Enable sockets in Flask server</span>\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask<span class=\"token punctuation\">,</span> jsonify<span class=\"token punctuation\">,</span> render_template<span class=\"token punctuation\">,</span> \n<span class=\"token keyword\">from</span> flask_socketio <span class=\"token keyword\">import</span> SocketIO<span class=\"token punctuation\">,</span> emit</code></pre></div>\n</li>\n</ul>\n<p>app = Flask(<strong>name</strong>)\napp.config['SECRET_KEY'] = os.getenv('SECRET_KET')\nsocketio = SocketIO(app)</p>\n<h1>when server receives message, emit message to all (broadcast)</h1>\n<p>@socketio.on(\"submit vote\")\ndef vote(data):\nselection = data['selection']\nemit(\"announce vote\", {\"selection\": selection}, broadcast=True)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>","frontmatter":{"path":"/web50/lecture_5","title":"Web50 lecture 5 - JavaScript & Web Sockets","date":"2018-08-21","tags":["CS50","Web50","강의노트","웹개발","JavaScript","자바스크립트","웹소켓"]}}},"pageContext":{}}