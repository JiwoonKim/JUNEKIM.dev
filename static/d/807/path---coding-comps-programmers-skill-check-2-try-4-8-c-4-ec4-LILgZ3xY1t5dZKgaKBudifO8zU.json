{"data":{"markdownRemark":{"html":"<h3>문제 1: 폰켓몬</h3>\n<p>중복이 허용되는 숫자 배열에서 1/2의 숫자만 고를 수 있을 때, 최대로 고를 수 있는 다른 종류의 숫자의 개수를 구하기</p>\n<ul>\n<li>ex. [3, 1, 2, 3] -> 종류 3개 중 2개 고르기 => 결과: 2</li>\n<li>ex. [3, 3, 3, 2, 2, 4] -> 종류 3개 중 3개 고르기 => 결과: 3</li>\n<li>ex. [3, 3, 3, 2, 2, 2] -> 종류 2개 중 3개 고르기 => 결과: 3</li>\n</ul>\n<h4>내가 푼 방법</h4>\n<p>시간복잡도 O(n), 공간복잡도 O(n)</p>\n<ol>\n<li>주어진 숫자 배열에서 숫자 종류의 개수 세기</li>\n<li>(배열의 크기 / 2)하여 고르는 개수 구하기</li>\n<li>\n<p>종류의 개수와 고르는 개수를 비교하여 최대로 골라지는 종류의 개수 구하기</p>\n<ul>\n<li>(종류의 개수 >= 고르는 개수)일 경우, 고를 수 있는 개수만큼 전부 다른 걸로 고를 수 있기 때문에 고르는 개수를 그대로 반환</li>\n<li>(종류의 개수 &#x3C; 고르는 개수)일 경우, 아무리 많이 골라도 결국 종류의 개수만큼만 고를 수 있기 때문에 종류의 개수를 그대로 반환</li>\n</ul>\n</li>\n</ol>\n<h4>내가 작성한 코드</h4>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 종류의 개수 세기</span>\n    unordered_set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> categories<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        categories<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 고르는 개수 구하기</span>\n    <span class=\"token keyword\">int</span> num_categories <span class=\"token operator\">=</span> categories<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> num_picks <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 종류의 개수와 고르는 개수 비교</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num_categories <span class=\"token operator\">>=</span> num_picks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> num_picks<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> num_categories<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>문제 2: 가장 큰 수</h3>\n<p>숫자 배열이 주어졌을 때, 이 숫자들을 이어붙여 만들 수 있는 가장 큰 수를 구하기</p>\n<ul>\n<li>ex. [6, 10, 2] => 결과: \"6210\"</li>\n<li>ex. [3, 30, 34, 5, 9] => 결과: \"9534330\"</li>\n</ul>\n<h4>내가 푼 방법</h4>\n<ol>\n<li>배열의 각 숫자를 문자열 형태로 변환하여 저장</li>\n<li>\n<p>문자열 형태의 숫자들을 특별한 내림차순으로 정렬</p>\n<ul>\n<li>기본적으로는 문자열의 내림차순을 따른다 (ex. \"9\" > \"34\" > \"3\")</li>\n<li>단, 길이가 다른 부분에서 0이 어이지는 숫자의 경우 더 작은 숫자로 간주한다 (ex. \"3\" > \"30\")</li>\n</ul>\n</li>\n<li>내림차순으로 정렬된 숫자들을 차례대로 이어붙인 문자열 반환</li>\n</ol>\n<h4>내가 작성한 코드</h4>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// 숫자를 문자열로 변환하여 내림차순으로 정렬하기</span>\nstring <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> numbers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    string answer <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> numbers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        nums<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>string num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        answer <span class=\"token operator\">+</span><span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 도움 함수: 특별하게 내림차순을 적용하는 비교함수</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">cmp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>u<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> u <span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> u<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        string sub <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>u <span class=\"token operator\">==</span> sub<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> u <span class=\"token operator\">></span> sub<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        string sub <span class=\"token operator\">=</span> u<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">==</span> sub<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> sub <span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>모범 답안과 비교</h4>\n<p>시간복잡도 O(N log N), 공간복잡도 O(1)</p>\n<ul>\n<li>위와 같이 풀었을 경우 구멍이 뚫린 것마냥 오류가 나는 경우가 파다하다 (<a href=\"https://stroot.tistory.com/114\">틀리기 쉬운 테스트 케이스 참고</a>)</li>\n<li>그렇기 때문에 다른 방식으로 비교함수를 구현하여 정렬해야만 한다 (두 수를 문자열 형태로 이어붙였을 때, 더 큰 수가 나오게끔 정렬)</li>\n<li>\n<p>또한, [0, 0, 0]과 같은 특수 경우도 예외 처리를 해야 한다 (\"000\"이 아니라 \"0\"을 반환해야 함)</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// 도움 함수: 두 수를 문자열 형태로 이어붙여 비교</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">cmp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> u<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\nstring first <span class=\"token operator\">=</span> <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstring back <span class=\"token operator\">=</span> <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>first <span class=\"token operator\">></span> back<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// </span>\nstring <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> numbers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 위 비교함수를 바탕으로 내림차순으로 정렬</span>\nstring answer <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> numbers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    answer <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 만약 앞에 0이 오는 예외의 경우, 0 반환 </span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>answer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    answer <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h3>결과 및 후기</h3>\n<p>첫 번째 문제를 빠르게 풀고 넘어왔으나, 두 번째 문제의 테스트 케이스를 통과하는 해답을 작성하지 못해 63.6점으로 <strong>불합격</strong> 했다.</p>\n<ul>\n<li>두 번째 문제에서 단순히 숫자들을 문자열로 변환하여 조금 특별한 내림차순으로 풀면 되는 줄 알았는데, 그렇게 했을 경우 틀리는 테스트 케이스가 굉장히 많다. 정렬 방식을 바꾸어야만 했고 더불어서 생각지 못한 예외의 경우가 있었다.</li>\n</ul>\n<h3>What I learned</h3>\n<ul>\n<li>\n<p>문제가 풀리지 않는 것 같으면, <strong>문제를 작은 단위로 잘라서 생각해볼 것</strong>!</p>\n<ul>\n<li>ex. 두 번째 문제에서 [3, 34, 30]이 주어졌을 때 숫자들의 각 자리를 일일이 비교하기보다는 주어진 문제에서 이어붙이라고 한 것을 그대로 실행해볼 것! [3, 34]로 단위를 잘랐을 때, 이어붙였을 때의 더 큰 것을 찾는 문제로 생각하여 점점 문제를 확장해나가보자!</li>\n</ul>\n</li>\n<li><strong>문제의 힌트는 문제 안에 있다!</strong> 문제를 다시 찬찬히 읽고 어떻게 나아갈지를 잘 생각해보자! 또 예외의 경우들은 주어진 문제의 명제, 그리고 가능한 조건들 안에 있으니 잘 생각해보고 만들자!!</li>\n</ul>","frontmatter":{"title":"[프로그래머스] 스킬 체크 Level 2 - 도전 4","date":"2019-09-05","tags":["알고리즘","코딩 테스트"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/Coding_Comps/Programmers/skillCheck2_try_4/"}}