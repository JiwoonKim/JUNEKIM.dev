{"data":{"markdownRemark":{"html":"<blockquote>\n<p>git와 github 사용에 필요한 치트키들을 정리.\n개인적인 자주 사용하는 커맨드들을 반영하여 만든 치트키입니다.</p>\n</blockquote>\n<h4>유저 설정</h4>\n<ul>\n<li>이름 설정: <code class=\"language-text\">git config --global name &quot;{name}&quot;</code></li>\n<li>이메일 설정: <code class=\"language-text\">git config --global email {email}</code></li>\n</ul>\n<h3>나 홀로 프로젝트</h3>\n<h4>레포 만들기</h4>\n<ul>\n<li>로컬 컴퓨터에서 시작: <code class=\"language-text\">git init</code>으로 현재 디렉토리(폴더)에 빈 레포 만들기</li>\n<li>리모트 서버로부터 다운: <code class=\"language-text\">git clone {url}</code>으로 레포 복사하여 로컬 컴퓨터에서 사용하기</li>\n</ul>\n<h4>커밋: 코드 변화 기록</h4>\n<ol>\n<li><code class=\"language-text\">git add {filenames}</code></li>\n<li>\n<p><code class=\"language-text\">git commit -m &quot;{message}&quot;</code></p>\n<ul>\n<li><code class=\"language-text\">git commit</code>: 메세지 헤더 + 바디로 구성 가능</li>\n<li>1 + 2 : <code class=\"language-text\">git commit -am {filenames} &quot;{message}&quot;</code></li>\n</ul>\n</li>\n<li><code class=\"language-text\">git push origin {branchname}</code></li>\n</ol>\n<h4>브랜치 합치기</h4>\n<ol>\n<li><code class=\"language-text\">git checkout master</code></li>\n<li><code class=\"language-text\">git merge {branchname}</code></li>\n</ol>\n<h3>협업하기</h3>\n<h4>1. 로컬 컴퓨터에 프로젝트 셋업</h4>\n<p>fork &#x26; pull 모델 사용</p>\n<ol>\n<li>레포 <code class=\"language-text\">fork</code></li>\n<li>로컬 컴퓨터에 <code class=\"language-text\">clone</code></li>\n<li>로컬에서 본래 레포 링크 설정: <code class=\"language-text\">git remote add upstream {original_repo_url}</code></li>\n</ol>\n<h4>2. 브랜치 만들어 작업</h4>\n<p>반드시 다른 branch의 작업이 해당 branch에도 저장되지 않게끔 조심할 것!</p>\n<ul>\n<li>새 브랜치를 만들어서 작업하기: <code class=\"language-text\">git branch {name}</code> + <code class=\"language-text\">git checkout {branchname}</code></li>\n<li>fork된 레포에서 브랜치 가져오기: <code class=\"language-text\">git checkout --track origin/{branch}</code></li>\n</ul>\n<h4>3. 코드 추가와 커밋</h4>\n<p>Don’t push your work until you’re happy with it</p>\n<ul>\n<li>해당 브랜치에서 코드 추가 및 변경 + 커밋</li>\n</ul>\n<h4>4. 오리지널 레포에 수정사항 반영</h4>\n<p>don't do a pull request w/o fully checking the bottom part of which code changes should be applied</p>\n<ol>\n<li>먼저 오리지널 레포의 변화 가져오기: <code class=\"language-text\">git fetch upstream</code> + <code class=\"language-text\">git rebase upstream/master</code></li>\n<li>github 레포에서 <code class=\"language-text\">pull request</code> 버튼 누르기</li>\n</ol>\n<h4>5. 브랜치 삭제</h4>\n<ul>\n<li>\n<p>로컬 컴퓨터에서 삭제 후 반영하기</p>\n<ul>\n<li><code class=\"language-text\">git branch -d {branchname}</code> + <code class=\"language-text\">git push origin -d {branchname}</code></li>\n</ul>\n</li>\n<li>github 레포에서 바로 삭제하기</li>\n</ul>\n<h3>커밋 관리</h3>\n<h4>커밋 삭제</h4>\n<ul>\n<li><code class=\"language-text\">git rebase -i HEAD</code></li>\n</ul>\n<h4>가장 최근 커밋 상태로 돌아가기</h4>\n<ul>\n<li><code class=\"language-text\">git reset --hard HEAD</code></li>\n</ul>","frontmatter":{"title":"[Git] 치트키 정리","date":"2019-01-30","tags":["Git","치트키"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/Cheatkeys/git/"}}