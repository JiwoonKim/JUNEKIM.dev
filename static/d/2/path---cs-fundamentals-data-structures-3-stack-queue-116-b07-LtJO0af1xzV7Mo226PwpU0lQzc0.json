{"data":{"markdownRemark":{"html":"<blockquote>\n<p>특정한 순서로 자료를 저장하는 스택과 큐 소개</p>\n</blockquote>\n<h3>스택과 큐</h3>\n<p>동일한 데이터 타입을 <strong>특정한 순서</strong> 로 저장하는 자료구조들</p>\n<img src=\"/3_stack_vs_queue-939da9df5976df8e4c5b61f1d445c71e.png\" width=100%>\n<ul>\n<li>\n<p><strong>특정한 순서</strong> 를 <strong>기억해야 되는 경우</strong> 에 주로 사용된다.</p>\n<ul>\n<li>특히 <strong>제일 최근에 저장</strong> 하거나 <strong>마지막에 저장한 자료</strong> 에 접근하는데 매우 유용하다.</li>\n</ul>\n</li>\n<li><strong>배열</strong> 또는 <strong>연결 리스트</strong> 를 통해 구현이 가능하다.</li>\n</ul>\n<h3>스택 (Stack)</h3>\n<p>동일한 데이터 타입을 가장 최근 순서 (LIFO)로 저장하는 자료구조</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// 스택 정의</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>                    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> stackArr<span class=\"token punctuation\">;</span>              <span class=\"token keyword\">void</span> <span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        size_t size<span class=\"token punctuation\">;</span>                    <span class=\"token keyword\">return</span> stackArr<span class=\"token punctuation\">[</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        size_t capacity<span class=\"token punctuation\">;</span>            <span class=\"token punctuation\">}</span>\n                                    <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                        stackArr<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n                                        size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                                    <span class=\"token punctuation\">}</span>\n                                    <span class=\"token keyword\">void</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                        size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                                    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><strong>LIFO</strong> (Last in First Out): <strong>가장 최근 순서</strong> 를 기억하는데 주로 사용된다</li>\n<li>\n<p>맨 위 <strong>top 데이터 값만</strong> 삽입, 삭제, 접근 등의 <strong>연산이 가능</strong> 하다: O(1)</p>\n<ul>\n<li>맨 위의 데이터에 대해 <code class=\"language-text\">push</code>, <code class=\"language-text\">pop</code>, <code class=\"language-text\">top</code> 연산이 가능하다.</li>\n<li>그 외의 데이터의 경우에는 위에서부터의 데이터를 차례대로 빼내어 따로 저장한 후 다시 삽입해주어야만 한다. 즉, 그 외의 데이터에 대한 연산은 탐색이 필요하므로 O(n)의 시간과 추가적인 공간이 필요하다.</li>\n</ul>\n</li>\n</ul>\n<h4>스택의 용도</h4>\n<ul>\n<li>\n<p>백트래킹 및 재귀함수</p>\n<ul>\n<li>DFS, 괄호 체크</li>\n</ul>\n</li>\n</ul>\n<h3>큐 (Queue)</h3>\n<p>동일한 데이터 타입을 FIFO 순서로 저장하는 자료구조</p>\n<ul>\n<li><strong>FIFO</strong> (First in First Out): <strong>가장 오래된 순서</strong> 를 기억하는데 주로 사용된다</li>\n<li>\n<p>맨 앞 <strong>front 데이터 값만</strong> 삽입, 삭제, 접근 등의 <strong>연산이 가능</strong> 하다: O(1)</p>\n<ul>\n<li>그 외의 데이터의 경우에는 위에서부터의 데이터를 차례대로 빼내어 따로 저장한 후 다시 삽입해주어야만 한다.</li>\n<li>즉, 그 외의 데이터에 대한 연산은 탐색이 필요하므로 O(n)의 시간과 추가적인 공간이 필요하다.</li>\n</ul>\n</li>\n</ul>\n<h3>C++ STL의 스택과 큐</h3>\n<p>C++ 언어에서 구현된 스택과 큐 자료구조</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// STL 스택                 // STL 큐</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stack></span>        |   #<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>    <span class=\"token operator\">|</span>   <span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\nstack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span>           <span class=\"token operator\">|</span>   queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> q<span class=\"token punctuation\">;</span></code></pre></div>\n<table>\n<thead>\n<tr>\n<th align=\"center\">연산</th>\n<th align=\"left\">스택 (stack)</th>\n<th align=\"left\">큐 (queue)</th>\n<th align=\"left\">시간복잡도</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><strong>접근</strong></td>\n<td align=\"left\">s.top()</td>\n<td align=\"left\">q.front()</td>\n<td align=\"left\">O(1)</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"left\"></td>\n<td align=\"left\">q.back()</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\"><strong>삽입</strong></td>\n<td align=\"left\">s.push()</td>\n<td align=\"left\">q.push()</td>\n<td align=\"left\">O(1)</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>삭제</strong></td>\n<td align=\"left\">s.pop()</td>\n<td align=\"left\">q.pop()</td>\n<td align=\"left\">O(1)</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>크기</strong></td>\n<td align=\"left\">s.size()</td>\n<td align=\"left\">q.size()</td>\n<td align=\"left\">O(1)</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>비었나?</strong></td>\n<td align=\"left\">s.empty()</td>\n<td align=\"left\">q.empty()</td>\n<td align=\"left\">O(1)</td>\n</tr>\n</tbody>\n</table>","frontmatter":{"title":"[자료구조] 03. 스택과 큐","date":"2019-08-07","tags":["자료구조","Cpp"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/CS_Fundamentals/Data_Structures/3_stack_queue/"}}