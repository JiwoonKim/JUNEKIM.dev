{"data":{"markdownRemark":{"html":"<h3>입출력</h3>\n<ul>\n<li><code>cin</code>와 <code>cout</code> 사용.</li>\n<li><code>getline(cin, s)</code>: 한 줄 읽기</li>\n</ul>\n<h4>실수 출력</h4>\n<pre><code class=\"language-c++\">#include &#x3C;iomanip>\n#include &#x3C;iostream>\nusing namespace std;\n\ndouble f = 3.14159;\ncout &#x3C;&#x3C; setprecision(5) &#x3C;&#x3C; f ; // 총 5글자 반올림하여 출력: 3.1416\ncout &#x3C;&#x3C; fixed &#x3C;&#x3C; setprecision(5) &#x3C;&#x3C; f; // 소수점 5자리까지 출력: 3.1415\n</code></pre>\n<h4>출력 속도</h4>\n<ul>\n<li>endl는 flush까지 포함하기 때문에 '\\n'을 사용하는 것이 빠르다.</li>\n<li>printf가 cout보다 빠르다.</li>\n<li>cin/cout 사용 전에 <code>ios_base::sync_with_stdio(false);</code>를 사용하면  printf의 속도로 사용가능 (단, cin/cout을 scanf/printf와 같이 사용할 수 없음)</li>\n</ul>\n<h3>auto 자료형</h3>\n<ul>\n<li>컴파일러가 자료형 타입을 추론해서 타입을 결정한다.</li>\n<li>\n<p>변수의 타입을 명확하게 알 수 있게 value를 assign해야 함.</p>\n<pre><code class=\"language-c++\">auto a;     // 자료형을 추론할 수 없기에 컴파일 에러가 뜸\nauto b = 0; // 자료형이 추론 가능\n</code></pre>\n</li>\n<li>\n<p>iterator로 사용할 때 매우 편리하다.</p>\n<pre><code class=\"language-c++\">#include\nmap&#x3C;pair&#x3C;int, int>, vector&#x3C;pair&#x3C;int,string>>> d;\nfor (auto it = d.begin(); ...) //길게 자료형을 선언해야 하는 대신 auto 편리하게 사용\n</code></pre>\n</li>\n</ul>\n<h3>range-based FOR</h3>\n<ul>\n<li>\n<p>foreach에 해당하는 문법.</p>\n<pre><code class=\"language-c++\">#include\nvector&#x3C;int> a = {1, 2, 3, 4, 5};\nfor (auto x : a) {...}\n</code></pre>\n</li>\n</ul>\n<h3>람다 함수 (Lamda Function)</h3>\n<ul>\n<li>\n<p>이름이 없는 익명 함수: [캡쳐] (함수인자) {함수내용}으로 정의한다.</p>\n<pre><code class=\"language-c++\">cout &#x3C;&#x3C; [](int x, int y) {\nreturn x + y; \n}(1, 2);\n</code></pre>\n<pre><code class=\"language-c++\">auto sum = [](int x, int y) {\nreturn x + y;\n};\ncout &#x3C;&#x3C; sum(1, 2);\n</code></pre>\n</li>\n</ul>\n<h4>캡쳐</h4>\n<ul>\n<li>람다 함수의 scope를 어떻게 결정할 것인지를 정하는 부분이다.</li>\n<li>\n<p>[&#x26;]를 통해 람다 함수 밖의 모든 변수를 참조할 수 있다.</p>\n<pre><code class=\"language-c++\">int x;\nauto is_less = [&#x26;] (int number) {\nreturn number &#x3C; x;\n};\n</code></pre>\n</li>\n</ul>\n<h4>리턴 타입</h4>\n<pre><code class=\"language-c++\">function&#x3C;void()> print = [] {};\nfunction&#x3C;void(int)> print2 = [](int x) {};\nfunction&#x3C;int(int,int)> sum = [](int x, int y) {\n    return x + y;\n};\n</code></pre>","frontmatter":{"path":"/algorithm/baekjoon_STL/cpp_basic","title":"[백준] 프로그래밍 대회에서 사용하는 C++ 언어","date":"2018-01-24","tags":["백준","C++","강의노트"]}}},"pageContext":{}}