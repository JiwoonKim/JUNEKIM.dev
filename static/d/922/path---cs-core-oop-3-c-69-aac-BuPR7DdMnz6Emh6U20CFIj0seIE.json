{"data":{"markdownRemark":{"html":"<h3>자바 언어 (Java)</h3>\n<p><strong>플랫폼 독립적인 클래스 기반의 객체지향 프로그래밍 언어</strong></p>\n<ol>\n<li>\n<p>\"<strong>Write once, run anywhere</strong>\": 자바 프로그램이 컴파일된 바이트 코드(byte code)는 JVA가 있는 어떠한 플랫폼에서도 실행이 가능하다</p>\n<ul>\n<li>자바 소스 파일(.java)은 자바 컴파일러인 javac을 통해 <strong>바이트 코드(.class)로 컴파일</strong> 된다</li>\n<li>바이트 코드(.class)로 된 파일은 <strong>JVM(Java Virtual Machine)이 인터프리터(interpreter) 방식으로 해석하고 실행</strong> 한다 (각 플랫폼마다 호환되는 JVM이 있기 때문에, JVM만 있으면 플랫폼 호환성을 해결할 수 있다)</li>\n<li>즉, 프로그래머는 호환성 문제를 신경 쓸 필요 없이, <strong>자바 프로그램 하나만을 작성하면 JVM이 있는 어떤 환경에서든 사용가능해진다</strong></li>\n<li>cf 그림 일러 추가하기) C언어의 경우에는 각 OS에 따라 다른 컴파일러를 가지고 있어 컴파일되는 최종 .exe 기계어 파일이 달라지기 때문에 이를 다른 환경에서 실행할 수 없다. (사용을 위해서는 실행되는 파일을 다운받아 사용하는데, 한 c파일 당 여러 컴파일러들을 통해 컴파일 환경에 맞는 다양한 exe파일을 제공해야만 한다) 그에 반해 java는 완전히 최종 컴파일된 기계어를 사용자들에게 제공하기보다는 바이트 코드로 컴파일한 단 하나의 파일만을 제공하고서 사용자들이 각자의 환경에서 알아서 jvm을 사용하여 환경에 맞게끔 사용할 수 있게끔 하는 시스템이다</li>\n</ul>\n</li>\n<li>\n<p><strong>안전하고 효율적인 메모리 사용</strong></p>\n<ul>\n<li>Garbage collector를 사용함으로써 대다수 메모리 처리 작업이 자동적으로 이루어진다</li>\n<li>메모리 포인터를 사용하지 않음으로써 접근이 허용되지 않는 메모리 접근 및 사용의 위험성을 제거한다</li>\n</ul>\n</li>\n<li>분산시스템(distributed system)을 지원: 다른 컴퓨터와의 네트워크 연결을 위해 주요한 프로토콜(http, ftp)들과, socket 통신(tcp/ip), 다중 쓰레드(multi-threaded) 프로그램을 지원</li>\n</ol>\n<h3>자바 설치하기</h3>\n<p>자바 표준 배포판(SE; Standard Edition) 설치</p>\n<ul>\n<li>\n<p><a href=\"(https://www.oracle.com/technetwork/java/javase/downloads/index.html)\"><strong>JDK</strong> (Java Software Development Kit)</a>: 자바 응용 개발 환경으로, 개발에 필요한 도구 포함 컴파일러 및 도구, 자바 런타임 환경(JRE), 클래스 라이브러리의 소스, 자바 응용 프로그램의 샘플 소스 등을 제공</p>\n<ul>\n<li>\n<p>javac: 자바 소스 파일(.java)을 바이트 코드 파일(.class)로 컴파일하는 자바 컴파일러</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">// 자바 소스 파일 컴파일\njavac MyProgram.java</code></pre></div>\n</li>\n<li>\n<p><strong>JRE</strong> (Java Runtime Environment): 자바 실행 환경으로 JVM이 포함 (자바 실행 환경만 필요한 경우, JRE만 따로 다운 가능)</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">// 자바 바이트 코드 파일 실행\njava MyProgram</code></pre></div>\n</li>\n<li>자바 API: 클래스 라이브러리로 패키지(서로 관련된 클래스들을 묶은 형태)로 제공</li>\n</ul>\n</li>\n<li>자바 JDK 구성</li>\n</ul>\n<img src=\"/babydragon/1_java_se-fe953d585ef1fc03acbce46e59acea14.png\" width=\"100%\">\n<h3>자바 프로그램</h3>\n<p>반드시 <strong>클래스로 정의</strong> 된다</p>\n<ol>\n<li>\n<p>한 파일(.java) 당, 반드시 한 <code class=\"language-text\">public class</code>만이 존재할 수 있으며, 파일 이름과 클래스 이름이 같아야 한다</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Greetings</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>한 파일에 여러 class가 존재하기 위해서는 하나의 <code class=\"language-text\">public class</code>와 나머지는 다른 한정자를 사용하여 정의하여 사용하면 된다 </li>\n</ul>\n</li>\n<li>\n<p><strong>main() 메소드</strong> 가 실제로 실행되는 <strong>드라이버 프로그램</strong> 코드이다</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 드라이버 프로그램</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyProgram</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 외부에서 실행이 가능한 메인 메소드로 행동 정의</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Greetings<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>클래스들을 정의하여 <strong>패키지</strong> 형태로 가져다 사용할 수 있는 코드</li>\n</ol>\n<h3>데이터 타입</h3>\n<p>자바 언어에서 기본적으로 지원하는 데이터 타입</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">종류</th>\n<th align=\"left\">데이터 타입</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">논리</td>\n<td align=\"left\"><code class=\"language-text\">boolean</code> (1 byte)</td>\n</tr>\n<tr>\n<td align=\"left\">문자</td>\n<td align=\"left\"><code class=\"language-text\">char</code> (2 byte, unicode)</td>\n</tr>\n<tr>\n<td align=\"left\">정수</td>\n<td align=\"left\"><code class=\"language-text\">byte</code> (1 byte), <code class=\"language-text\">short</code> (2 byte), <code class=\"language-text\">int</code> (4 byte), <code class=\"language-text\">long</code> (8 byte)</td>\n</tr>\n<tr>\n<td align=\"left\">실수</td>\n<td align=\"left\"><code class=\"language-text\">float</code> (4 byte), <code class=\"language-text\">double</code> (8 byte)</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>\n<p><strong>변수</strong>: 접근 지정자 + 데이터 타입 명시</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> number <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p><strong>상수</strong>: 접근 지정자 + <code class=\"language-text\">final</code> + 데이터 타입 + 대문자 상수명 명시</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> MAX <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<h3>레퍼런스 (Reference)</h3>\n<p>자바에서는 포인터를 사용하지 않고 대신 레퍼런스를 사용한다</p>\n<h4>1. 클래스 레퍼런스 (class reference)</h4>\n<ul>\n<li>\n<p>객체 인스턴스를 만들어 참조</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 클래스 레퍼런스 변수 = new + 객체 생성자()</span>\n<span class=\"token keyword\">public</span> Circle c1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 객체를 치환하면, 객체가 아닌 레퍼런스가 복사됨</span>\n<span class=\"token comment\">// (한 객체를 두 레퍼런스가 참조하는 형태)</span>\n<span class=\"token keyword\">public</span> Circle c1 <span class=\"token operator\">=</span> c2<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<h4>2. 배열 레퍼런스 (array reference)</h4>\n<ul>\n<li>\n<p>배열도 일종의 객체이므로, 인스턴스를 만들어 레퍼런스로 참조</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 변수 [] = new 타입 [크기]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 레퍼런스를 전달받을 경우, 값 변형이 전부 반연됨 </span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> array<span class=\"token punctuation\">)</span> num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 레퍼런스를 전달했기 때문에 변형한 값이 반영됨</span>\n<span class=\"token function\">increment</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<h4>3. 인터페이스 레퍼런스 (interface reference)</h4>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"></code></pre></div>\n<h3>입출력</h3>\n<ul>\n<li><strong>입력</strong>: <code class=\"language-text\">Scanner</code> 클래스의 <code class=\"language-text\">nextLine()</code>, <code class=\"language-text\">nextInt()</code> 메소드를 사용</li>\n<li>\n<p><strong>출력</strong>: <code class=\"language-text\">System.out.println()</code> 또는 <code class=\"language-text\">System.out.print()</code>을 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 입력</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Scanner<span class=\"token punctuation\">;</span>\nScanner scan <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstring message <span class=\"token operator\">=</span> scan<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 출력</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Entered: \"</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<h3>Garbage Collection</h3>\n<p>객체 소멸</p>\n<ul>\n<li>new에 의해 생성된 객체에 할당되었던 메모리를 JVM에게\n되돌려 주는 것</li>\n<li>가용 메모리에 포함시킴\n자바는 객체 삭제 기능 없음</li>\n<li>개발자에게는 매우 다행스러운 것</li>\n<li>C/C++에서는 할당받은 객체를 개발자가 프로그램 내에서 삭제해야 함\nGarbage Collection</li>\n<li>객체에 대한 레퍼런스가 없어지면 객체는 가비지(garbage)가 됨</li>\n<li>JVM 의 garbage collector 가 garbage 를 반환\n자동 실행\n JVM 에 포함된 가비지 컬렉터(garbage collector)가 자동으로 실행\n 개발자가 강제로 실행하려는 경우\n System 또는 Runtime 객체의 gc( ) 메소드를 호출한다.\n 그러나~ garbage collection 시점은 JVM 이 전적으로 판단한다.</li>\n</ul>","frontmatter":{"title":"[OOP] 03. 자바 언어","date":"2019-09-24","tags":["Java","객체지향 프로그래밍"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/CS_Core/OOP/3/"}}