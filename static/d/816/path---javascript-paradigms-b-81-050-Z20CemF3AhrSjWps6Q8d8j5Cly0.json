{"data":{"markdownRemark":{"html":"<h3>패러다임</h3>\n<ul>\n<li>\n<p>imperative</p>\n<ul>\n<li>procedural</li>\n<li>object-oriented</li>\n</ul>\n</li>\n<li>\n<p>declarative</p>\n<ul>\n<li>functional </li>\n</ul>\n</li>\n</ul>\n<h3>함수형 패러다임 (Functional Paradigm)</h3>\n<p>모든 것을 함수로! (everything in functions)\n함수 = input -> output</p>\n<ol>\n<li>\n<p>avoid side-effects; use pure functions</p>\n<ul>\n<li>ex. printing (X), using or changing global variables (X)</li>\n</ul>\n</li>\n<li>\n<p>higher-order functions</p>\n<ul>\n<li>use functions as input or outputs; nested functions possible</li>\n<li>ex. iteration like for-loop (X) -> instead, use <code class=\"language-text\">map</code>, <code class=\"language-text\">reduce</code>, <code class=\"language-text\">filter</code></li>\n</ul>\n</li>\n<li>\n<p>avoid mutability; can't change values of data</p>\n<ul>\n<li>\n<p>all data = immutable</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// use this way instead of changing initial[0] = 0;</span>\n<span class=\"token keyword\">let</span> initial <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> changed <span class=\"token operator\">=</span> initial<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>problem: unnecesaary duplicates just to change small part of data</li>\n<li>\n<p>solution: use persistent data structures (structural sharing)</p>\n<ul>\n<li>ex. Mori, immutable.js</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://codewords.recurse.com/issues/one/an-introduction-to-functional-programming\">참고자료</a></p>\n</li>\n</ol>","frontmatter":{"title":"자바스크립트로 패러다임 살펴보기","date":"2019-07-12","tags":["웹개발","프론트엔드","JavaScript","패러다임"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/Javascript/paradigms/"}}