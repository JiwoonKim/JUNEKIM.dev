{"data":{"markdownRemark":{"html":"<blockquote>\n<p>[Interview Cake의 Data Structure 파트] 정리</p>\n</blockquote>\n<h3>Short Circuit Evaluation</h3>\n<p>strategy of <strong>stop evaluating logical expression as soon as the result is certain to avoid unnecessary work</strong></p>\n<ul>\n<li><code class=\"language-text\">(first &amp;&amp; second)</code>: stop if first is false; don't even bother to check second bcuz the whole expression is false anyway</li>\n<li><code class=\"language-text\">(first || second)</code>: stop if first is true; the whole expression is true anyway</li>\n</ul>\n<p><strong>use to filter out edge cases</strong> (especially seg fault cases!)</p>\n<ul>\n<li>ex. (cur &#x26;&#x26; cur->data > 0)</li>\n</ul>\n<h3>Garbage Collection</h3>\n<p>C++ (manual memory management) &#x3C;-> Java (garbage collector)</p>\n<ul>\n<li>\n<p><strong>manual memory management</strong>:</p>\n<ul>\n<li>\n<p>manually free allocated memory (ex. <code class=\"language-text\">new</code>)</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// manual memory management for C++</span>\n<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> str<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>garbage collector</strong>: automatically frees up memory that a program is not using anymore</p>\n<ul>\n<li>strategies: tracing garbage collection, reference counting</li>\n</ul>\n</li>\n</ul>\n<h4>cf) Smart Pointers in C++</h4>\n<p>pointers which <strong>automatically manage and free resources</strong></p>\n<ul>\n<li>unique pointers: the only reference to its allocated resource</li>\n<li>\n<p>shared pointers</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"></code></pre></div>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">### Mutable vs. Immutable Objects\n- __mutable object__: can be changed after it&#39;s created\n    - mutable objects are nice bcuz you can make __changes in-place__\n    - but be careful since the changes are reflecting into all references of that object\n- __immutable object__: cannot be changed\n\n#### in C++\n__everything is mutable by default__\n- `const` keyword to make immutable\n- but `const_cast` lets you cast away const keyword so nothing is truly immutable\n```cpp\n// immutable vector\nconst vector&lt;int&gt; v = {0, 1};\n// modified to mutable vector\nconst_cast&lt;vector&lt;int&gt;&amp;&gt;(v)[0] = 1;</code></pre></div>","frontmatter":{"title":"Interview Cake - 0. General Programming","date":"2019-06-27","tags":["Interview Cake"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/Interview_Prep/Interview_Cake/0_general_programming/"}}