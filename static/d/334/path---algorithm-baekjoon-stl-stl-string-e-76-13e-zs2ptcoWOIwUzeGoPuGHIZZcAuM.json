{"data":{"markdownRemark":{"html":"<blockquote>\n<p>C와 C++의 문자열 정리.</p>\n</blockquote>\n<h3>문자열 (String)</h3>\n<ul>\n<li>C 문자열: <code class=\"language-text\">char c[]</code>로 선언을 한다.</li>\n<li>\n<p>C++ 문자열: <code class=\"language-text\">string s</code>로 선언을 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">char c[] = &quot;c string&quot;; // C 문자열\nstring s = &quot;c++ string&quot;; // C++ 문자열 (NULL전까지만 할당)\nstring s = c;            // C 문자열을 담을 수도 있음 \nstring s(5, &#39;#&#39;);        \n// &quot;#####&quot;</code></pre></div>\n<h4>문자열 입출력</h4>\n</li>\n<li><code class=\"language-text\">cin</code>와 <code class=\"language-text\">cout</code>, 그리고 <code class=\"language-text\">getline(cin, str)</code>사용이 편리하다.</li>\n<li>\n<p>printf를 사용해야 하는 경우, <code class=\"language-text\">str.c_str()</code>을 통해 C 문자열로 변환 후 출력해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">include &lt;string&gt;\nstring str = &quot;hello&quot;;\nprintf(&quot;%s&quot;, str.c_str());</code></pre></div>\n</li>\n</ul>\n<h4>문자열 연산</h4>\n<ul>\n<li>비교: <code class=\"language-text\">==</code>와 <code class=\"language-text\">!=</code>로 같은지 확인하고 <code class=\"language-text\">&gt;</code> 또는 <code class=\"language-text\">&lt;</code>로 사전순으로 앞서는지 뒤에 서는지 알아볼 수 있다.</li>\n<li>추가: <code class=\"language-text\">+=</code>와 <code class=\"language-text\">append</code> 또는 <code class=\"language-text\">insert</code>를 통해 뒤에 문자열을 추가할 수 있다.</li>\n<li>\n<p>크기: <code class=\"language-text\">length</code>를 통해 크기를 알아보고, <code class=\"language-text\">empty</code>를 통해 빈 문자열인지 확인해본다. </p>\n<ul>\n<li>\n<p>(size는 unsigned 형태이기 때문에 size() - 1와 같은 표현이 불가능함)</p>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">include &lt;string&gt;\nstring str = &quot;h&quot;;    // h\nstr += &quot;ello&quot;;       // hello\nstr.append(&quot;world&quot;); // hello world\nstr.insert(10, &quot;!&quot;); // hello world! (10번째 index에 추가)</code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h4>문자열 &#x3C;-> 숫자</h4>\n<ul>\n<li>문자열 -> 숫자: <code class=\"language-text\">stoi()</code>, <code class=\"language-text\">stol</code>, <code class=\"language-text\">stof</code>, <code class=\"language-text\">stod</code>를 이용한다.</li>\n<li>\n<p>숫자 -> 문자열: <code class=\"language-text\">to_string()</code>를 이용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">string str = &quot;10&quot;;\nint num = stoi(str);   // 10 (기본으로 10진법으로 바꿈)\nnum = stoi(str, 0, 2); // 2 (2진법으로 숫자를 읽어 바꿈)\nnum = stoi(str, 0 16); // 16 (16진법으로 숫자를 읽어 바꿈)</code></pre></div>\n</li>\n</ul>\n<p>str = \"21 Guns\";\nnum = stoi(str); // 21 (숫자가 있는 부분까지만 읽어 바꿈)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#### 문자열 파싱 (string parsing)\n- `istringstream`을 사용하여 string을 표준 입출력처럼 사용할 수가 있다.\n```c++\n#include &lt;string&gt;\n#include &lt;stringstream&gt;\nstring str;\nstring line;\nwhile (cin &gt;&gt; line) s+= line;\n\nint num;\nistringstream sin(s); // 문자열 스트림을 생성\nwhile (getline(sin, num, &#39;,&#39;)) {...}; // 문자열 스트림의 문자열을 ,로 구분하여 num에 저장</code></pre></div>","frontmatter":{"path":"/algorithm/baekjoon_STL/STL_string","title":"[백준] 프로그래밍 대회에서 사용하는 C++ STL string","date":"2018-01-28","tags":["백준","C++","강의노트","STL"]}}},"pageContext":{}}