{"data":{"markdownRemark":{"html":"<blockquote>\n<p>자료구조 중 기본 중 가장 기초적인 배열 소개</p>\n</blockquote>\n<h3>배열 (Arrays)</h3>\n<p>sequence of same data type</p>\n<ul>\n<li>stored in <strong>contiguous memory space</strong></li>\n<li>constant time access (a.k.a. <strong>random access</strong>)</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">fixed array</th>\n<th align=\"center\">flexible array</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">static array</td>\n<td align=\"center\">dynamic array</td>\n</tr>\n<tr>\n<td align=\"center\">dynamically-allocated array</td>\n<td align=\"center\">*</td>\n</tr>\n</tbody>\n</table>\n<h3>정적 배열 (Static Arrays)</h3>\n<p>fixed-sized arrays</p>\n<ul>\n<li>size must be determined at <strong>compile time (before 실행)</strong></li>\n<li><strong>stored in stack space</strong></li>\n<li>\n<p>constraint: cannot use variable as size</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// one-dimension</span>\n<span class=\"token keyword\">int</span> nums1<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">int</span> nums2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<p>// two-dimension\nint grid[5][5];</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">### 동적으로 할당된 배열 (Dynamically-allocated Arrays)\nfixed-sized arrays but can use variable input as size\n- size determined at __run-time (while 실행)__\n- __stored in heap space__\n- constraint: must predefine max size; cannot resize dynamically\n```cpp\n    // one-dimension\n    int* nums3 = new int[5];\n    delete[] nums3;\n    // two-dimension\n    int** grid = new int * [row];\n    for (int i = 0; i &lt; row; i++) {\n        grid[i] = new int[col];\n    }</code></pre></div>\n<h3>동적 배열 (Dynamic Array)</h3>\n<p>resizable array</p>\n<ul>\n<li>store pointer to dynamically-allocated array and replace it w/ newly allocated array as needed</li>\n<li>\n<p>only possible if it is a dynamicically-allocated array</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DynamicArr</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> num_elements<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// increase capacity of new array</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> tempArr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>capacity <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// copy old elements to new array</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> num_elements<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        tempArr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// delete the allocated space for old array</span>\n    <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// point to new allocated memory</span>\n    arr <span class=\"token operator\">=</span> tempArr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h4>which is dynamic array?</h4>\n<ul>\n<li>generally, means resizable array</li>\n<li>ask if it means 'dynamically allocated' or 'dynamic as in resizable' for clarification</li>\n</ul>\n<h3>백터 (Vectors)</h3>\n<p>dynamically resizable arrays </p>\n<ul>\n<li>\n<p>implemented version of dynamic array in c++</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// declare one-dimensional vectors</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// size of 10</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// size of 10, all values 0</span>\n<span class=\"token comment\">// declare two-dimensional vectors</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>                  <span class=\"token comment\">// 10 vectors (= vector of vectors) </span>\nvector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> v<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10 rows &amp; 10 columns of 0</span></code></pre></div>\n</li>\n</ul>\n<blockquote>\n<p>해당 포스트는 educative.io의 Data Structures in C++를 바탕으로 정리되었습니다</p>\n</blockquote>","frontmatter":{"title":"[자료구조] 01. 배열","date":"2019-06-07","tags":["자료구조","Cpp"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/CS_Fundamentals/Data_Structures/1_arrays/"}}