{"data":{"markdownRemark":{"html":"<h3>다형성 (Polymorphism)</h3>\n<p><code class=\"language-text\">poly</code>(many) + <code class=\"language-text\">morphs</code>(forms)가 합쳐진 뜻으로 <strong>한 객체가 여러 가지 형태를 취할 수 있는 능력</strong> 을 의미</p>\n<ul>\n<li>\n<p><strong>한 클래스가 다른 클래스로부터 상속되었다면</strong>, 그 클래스의 <strong>객체는 다형성을 가진다</strong> 고 할 수 있다</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Deer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\nDeer deerForm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Deer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 사슴 형태일 수도 있고</span>\nAnimal animalForm <span class=\"token operator\">=</span> deerForm<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 동물 형태일 수도 있다</span></code></pre></div>\n</li>\n<li>\n<p>다른 말로, 하나의 인터페이스로 여러 가지 타입에 접근할 수 있다는 표현으로 쓰이기도 한다</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li><strong>자바의 모든 클래스는 다형성을 가진다</strong> (bcuz 모든 클래스는 Object 클래스로부터 상속됨) </li>\n</ul>\n<h4>다형성의 종류</h4>\n<ol>\n<li>부모 클래스 레퍼런스가 자식 클래스의 객체를 가르키는 경우(업캐스팅)가 가장 대표적이다</li>\n<li></li>\n</ol>\n<p>There are two types of polymorphism in Java: compile-time polymorphism and runtime polymorphism.</p>\n<h3>업캐스팅과 다운캐스팅</h3>\n<ul>\n<li>\n<p><strong>업캐스팅</strong> (<strong>upcasting</strong>): 슈퍼 클래스 레퍼런스가 서브 클래스 레퍼런스 가르키기</p>\n<ul>\n<li>단, 슈퍼 클래스 레퍼런스는 오로지 슈퍼 클래스에서 정의된 데이터와 함수들만 접근 가능 (서브 클래스에서 추가된 멤버들을 접근 불가능)</li>\n</ul>\n</li>\n<li>\n<p><strong>다운캐스팅</strong> (<strong>downcasting</strong>): 서브 클래스 레퍼런스가 슈퍼 클래스 레퍼런스 가르키기</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 업캐스팅을 통해 자동으로 타입 변환이 이루어짐</span>\nChild c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 업캐스팅 되었던 것을 다시 강제로 되돌리기</span>\nParent p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Parent<span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>cf) <code class=\"language-text\">instanceof</code> 연산자: 레퍼런스가 가리키는 객체의 원래 타입을 식별하는데 사용 (true / false 반환)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">Person p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Artist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p1 <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p1 is Person\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 출력</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p1 <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Artist</span><span class=\"token punctuation\">)</span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p1 is Artist\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 출력</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p1 <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Picasso</span><span class=\"token punctuation\">)</span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p1 is Picasso\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// X</span></code></pre></div>\n</li>\n</ul>\n<h3>자바 언어에서의 다형성</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">컴파일 타임 다형성</th>\n<th align=\"left\">런타임 다형성</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">메소드 오버로딩</td>\n<td align=\"left\">메소드 오버라이딩</td>\n</tr>\n</tbody>\n</table>\n<h4>메소드 오버로딩 (Method Overloading)</h4>\n<p>한 클래스 내에서 이름이 같은 메소드가 여러 개 존재</p>\n<ul>\n<li>\n<p>반드시 <strong>메소드의 인자 개수</strong> 또는 <strong>타입</strong> 이 <strong>달라야 한다</strong> (+ 리턴 타입이 추가로 달라져도 괜찮다)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> String name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> String action<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 생성자 2개 (메소드 오버라이딩)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Animal</span><span class=\"token punctuation\">(</span>String s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        name <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Animal</span><span class=\"token punctuation\">(</span>String s<span class=\"token punctuation\">,</span> String a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        action <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 같은 이름의 메소드 3개 (메소드 오버라이딩)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span>String action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 매개변수 변화</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>action <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span>String action<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> changeName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 매개변수 &amp; 리턴타입 변화</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> action <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h4>메소드 오버라이딩 (Method Overridding)</h4>\n<p>서브 클래스의 메소드를 재정의함으로써 슈퍼 클래스로부터 상속받은 메소드</p>\n<h3></h3>\n<h4>추상 클래스 (Abstract Class)</h4>","frontmatter":{"title":"[OOP] 05. 다형성","date":"2019-10-01","tags":["Java","객체지향프로그래밍"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/CS_Fundamentals/OOP/5/"}}