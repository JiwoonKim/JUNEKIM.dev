{"data":{"markdownRemark":{"html":"<h3>다이나믹 프로그래밍 (Dynamic Programming)</h3>\n<ul>\n<li><strong>큰 문제를 작은 부분 문제로 나눠서 푸는 알고리즘</strong>.</li>\n<li>dynamic은 사실 아무런 부여 의미가 없음 (멋있어서 이름이 지어졌다는 사실!)</li>\n<li>\n<p>두 가지 속성을 이해해야 다이나믹 프로그래밍으로 문제를 풀 수 있다.</p>\n<ol>\n<li><strong>Overlapping Subproblem</strong>: 작게 나누어진 부분 문제들이 서로 겹쳐야 한다.</li>\n<li><strong>Optimal Substructure</strong>: 같은 문제를 구할 때마다 정답이 일정하고 문제의 정답을 작은 문제의 정답으로부터 구할 수 있다.</li>\n</ol>\n</li>\n<li>작은 문제들의 정답 기록해 놓고 (<strong>Memoization</strong>) 다시 사용하는 방법을 이용한다.</li>\n</ul>\n<h4>피보나치 수 문제로 동적계획 알고리즘 이해하기</h4>\n<ul>\n<li>F0 = 0, F1 = 1, FN = FN-1 + FN-2 (N >= 2)</li>\n<li>문제: N번째 피보나치 수 구하기</li>\n<li>작은 문제: N-1번째 피보나치 수 구하기, N-2번째 피보나치 수 구하기</li>\n<li>\n<p>문제의 정답을 작은 문제의 정답을 합하는 것으로 구할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> d<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// memoriazation을 하여 다음에 사용할 수 있게 하기</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 값이 존재할 경우 (우연히 양수이기에 조건 사용)</span>\n        <span class=\"token keyword\">return</span> d<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    d<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> d<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h3>다이나믹을 푸는 두 가지 방법 (구현의 차이일 뿐)</h3>\n<ol>\n<li>\n<p><strong>Top-down</strong>: 큰 문제를 점점 작게 만들어나가면서 푸는 방법 </p>\n<ul>\n<li>시간복잡도: 메모에 채워야하는 칸의 수 x 1칸을 채우는 복잡도</li>\n<li>ex) 위의 피보나치 수 구하는 방식 (재귀함수 사용): O(N)</li>\n</ul>\n</li>\n<li>\n<p><strong>Bottom-up</strong>: 작은 문제부터 하나도 빠짐없이 차례대로 푸는 방법</p>\n<ul>\n<li>시간복잡도: 위와 동일</li>\n<li>ex) for문으로 피보나치 수 구하는 방식: O(N)</li>\n</ul>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> d<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    d<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    d<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        d<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> d<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> d<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> d<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>top-down 또는 bottom-up <strong>편한대로 사용</strong> 하면 된다!</li>\n</ul>\n<h3>문제 풀이 전략</h3>\n<p><strong>d[n] 구하는 방식</strong> 으로 문제를 이해하기</p>\n<ol>\n<li><strong>d[i]에 무엇이 들어가야 하는지 파악</strong> 하여 식 적기 </li>\n<li>\n<p>d[n]과 d[n-1] 등의 관계가 어떻게 연결되는지 잘 살펴보기</p>\n<ul>\n<li>단순히 d[n]과 d[n-1]의 패턴을 고려할 것이 아니라,</li>\n<li><em>문제에서 주어지는 조건들을 가지고 어떻게 d[n]을 만들어나갈 수 있는지 초점을 맞출 것!</em></li>\n<li>\n<p>ex. 쉬운 계단 수 문제</p>\n<ul>\n<li>fail: d[n] = 2 * d[n-1] - (n-1) 방식으로 패턴을 만들어나가기 (그냥 운좋게 처음 d[1], d[2], d[3], d[4]까지는 맞으나, 그 후부터는 틀림.</li>\n<li>correct: 1~9를 숫자길이가 하나 짧은 숫자에 붙여나가는 패턴 사용하면 (문제 풀이 방식 참고)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>경우의 수가 나누어져서 따져야 하는 경우</strong>, <strong>이차원 배열 d[n][i]를 사용</strong> 하여 n번째마다 경우의 수 i를 각각 기록하는 방식 사용하기</li>\n<li><strong>최대 or 최소값</strong> 구하는 문제의 경우, 경우의 수를 따지고 그 중 </li>\n</ol>","frontmatter":{"path":"/baekjoon/basic/dynamic_programming","title":"[백준] 기초 03. 다이나믹 프로그래밍 1","date":"2019-02-03","tags":["백준","알고리즘","C++","다이나믹 프로그래밍"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}