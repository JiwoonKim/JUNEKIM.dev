{"data":{"markdownRemark":{"html":"<h3>오늘의 커밋</h3>\n<h4>연결 리스트 쿠키 굽기 완료!</h4>\n<blockquote>\n<p>어제와 그제에 이어 오늘도 연결 리스트 관련 자료구조 문제를 열심히 풀었다. 마저 남은 (2-5. merge two lists), (2-6. find intersection), (2-7. cycle detection) 문제들을 풀어서 드디어 연결 리스트 섹션을 모두 완료했다! 사실 (2-5. merge two lists) 문제에서 정말 너무 다양한 코드 방식들이 계속 나와서 하나하나 읽고 직접 코드를 작성하는데 시간이 오래 걸린 것 같다. 분명 단순하게 merge sort의 일부분을 구현하여 두 연결 리스트를 합치는 알고리즘은 동일한데도 조금씩 코드가 다르게 사용될 수 있어서 끄적끄적 다 작성하여 총 4개나 함수를 짜게 되었다 다시 말하지만, 분명 똑같은 알고리즘 진행 방식이지만, 조금씩 다른 부분이 있다. 예를 들면, (a) 코드는 새로운 리스트에 두 연결리스트가 합쳐진 결과물을 저장하는 out-of-place 방식인데 비해, (b) 코드는 기존의 두 리스트들을 변형하여 하나의 리스트로 합친 in-place 방식으로 구현했다. 풀이방법 또는 코드를 더 최적화 시킬 수 있는 방법을 검색하던 중에 dummy 노드를 사용하는 방식이 있어 정말로 획기적이고 기발하다고 생각했다. (b) 코드에서 조금 거슬렸던 부분이 헤드 노드를 설정하는 코드와 뒤에서 노드들을 merge sort 방식으로 연결할 때의 코드가 반복된다는 점이었는데, 이를 단번에 해결할 수 있는 방법이었기 때문이다. 이 헤드 노드를 따로 설정해야 뒤에 노드들을 연결할 때 seg fault 오류가 방지되기 때문에 따로 분리할 수밖에 없었지만 참 거슬렸는데...이렇게 단번에 코드를 합칠 수 있는 방법이 있다니! 더미 노드를 시작점으로 설정해놓음으로써 헤드 노드 값도 다른 노드들과 동일하게 merge sort 방식으로 연결할 수 있게 되었고 마지막에 더미 노드를 삭제하면 되는 방법! 코드도 깔끔해지고 훨씬 논리적으로도 이해가 잘 전달되어서 이 방식을 알게 된 것이 너무 신난다. 마찬가지로 (2-6. find intersection) 문제도 두 리스트의 길이 차이가 있으면 사실 찾기가 어려워지는 문제가 있었는데, 이를 역으로 이용하여 합쳐지는 지점을 찾는 방법도 굉장히 기발했다. 여러모로 포인터를 다루어야 하니 처음 시작할 때 조금 부담스러운 점도 있었지만, 이제는 대표적인 문제 유형은 다 풀어보았기 때문인지 포인터들을 사용하는 것이 전혀 두렵지 않고 연결 리스트도 낯설어서 무서운 느낌이 들하다. 연결 리스트와 친해진 느낌..! 자료구조 쿠키 굽기 시리즈를 시작한 목적에 맞게 성장하고 있는 것 같아서 뿌듯하다.</p>\n</blockquote>\n<h3>오늘의 풀리퀘스트</h3>\n<ul>\n<li>내일은 스택과 큐 정리 시작하면서 관련 hackerrank 문제 풀어야지!</li>\n<li>자바스크립트나 리액트 프로젝트는 언제..?</li>\n</ul>","frontmatter":{"title":"[일일커밋] 13만큼 커밋해!","date":"2019-08-16","tags":["일일커밋"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/Daily_Commit/2019_08_16/"}}