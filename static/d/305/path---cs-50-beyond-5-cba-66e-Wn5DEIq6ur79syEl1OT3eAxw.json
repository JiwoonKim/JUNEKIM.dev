{"data":{"markdownRemark":{"html":"<blockquote>\n<p>Harvard's CS50 Beyond lecture 5 정리</p>\n</blockquote>\n<h3>Thinking in React</h3>\n<p><strong>thinking about how it is that we take an application, decompose it into pieces and put it back together</strong></p>\n<h4>Build React Apps in Real World</h4>\n<ul>\n<li><code>node.js</code>: javascript run-time</li>\n<li><code>create-react-app</code>: build a starter app as default</li>\n<li><code>npm run start</code>: dynamic reloading, automatically separates files</li>\n<li><code>npm run build</code>: compile jsx scripts into javascript</li>\n</ul>\n<h3>Life Cycle Methods</h3>\n<p>functions that run at a particular point in a component's life</p>\n<ul>\n<li>every component has life cycle methods</li>\n</ul>\n<h4>componentDidMount()</h4>\n<p>function run every time a component is mounted (= as soon as component is added to DOM; before the content is ultimately rendered)</p>\n<pre><code class=\"language-jsx\">componentDidMount() {\n    // update initial state to data in local storage\n    const count = localStorage.getItem(\"count\");\n    if (count !== null) {\n        this.setState({\n            count: parseInt(count);\n        })\n    }\n    // store state data into local storage\n    window.addEventListener(\"beforeunload\", () => {\n        localStorage.setItem(\"count\", this.state.count);\n    });\n}\n</code></pre>\n<h3>Connect with Backend / API</h3>\n<h4>API Call</h4>\n<pre><code class=\"language-jsx\">// convert currency using API call\nconvertCurrency = () => {\n    const value = parseFloat(this.setState.value);\n    // handle exception: input not a number\n    if isNaN(value) {\n        return;\n    }\n    // fetch currency from API and update state\n    fetch(`https://api.exchangeratesapi.io/latest?base=${this.state.base}`)\n    .then(response => response.json())\n    .then(data => {\n        this.setState({\n            converted: data.rates[this.state.other] * value\n        })\n    })\n}\n</code></pre>\n<h4>Cache</h4>\n<p>use <strong>cache invalidation</strong> (update data upon out-of-date state) <strong>to reduce latency issue</strong></p>\n<pre><code class=\"language-jsx\">...\n// create cache variable in component (not state)\nthis.cached = {};\n...\n// within changeCurrency method\n// check cache for data less than a minute old\nif (this.cached[this.state.base] !-- undefined &#x26;&#x26;\n    Date.now() - this.cached[this.state.base].timestamp &#x3C; (1000 * 60)) {\n        this.setState({\n            converted: this.cached[this.state.base].rates[this.state.other] * value\n        })\n        return;\n}\n...\n.then(data => {\n    // update cache data along w/ timestamp\n    this.cached[this.state.base] = {\n        rates: data.rates,\n        timestamp: Data.now()\n    }\n    ...\n})\n</code></pre>\n<ul>\n<li>cache = general term for any way to storing data in a particular place</li>\n<li>local storage = type of cache whose data is stored inside browser, useful to persist data even through refreshing</li>\n<li>cookie = keeping track data for interaction between server and browser</li>\n</ul>\n<h3>Currency App (in React)</h3>\n<pre><code class=\"language-jsx\">class App extends Component {\n    constructor(props) {\n        super(props);\n        // define list of currencies available\n        this.currencies = [\"USD\", \"KRW\", \"JPY\", \"EUR\"];\n        this.cached = {};\n        // define state for component: currency types and values\n        this.state = {\n            baseCurrency: \"USD\",\n            otherCurrency: \"KRW\",\n            value: 0,\n            converted: 0\n        };\n    }\n    render() {\n        return (\n            &#x3C;div>\n                {/* select menu &#x26; input for base currency */}\n                &#x3C;select onChange={this.makeSelection} name=\"base\" value={this.state.baseCurrency}>\n                    {this.currencies.map(currency => &#x3C;option key={currency} value={currency}>{currency}&#x3C;/option>)}\n                &#x3C;/select>\n                &#x3C;input onChange={this.changeValue} value={this.state.value} />\n\n                {/* select menu &#x26; input for base currency */}\n                &#x3C;select onChange={this.makeSelection}  name=\"base\" value={this.state.otherCurrency}>\n                    {this.currencies.map(currency => &#x3C;option key={currency} value={currency}>{currency}&#x3C;/option>)}\n                &#x3C;/select>\n                &#x3C;input disabled value={this.state.converted === null ? \"Calculating...\" : this.state.converted} />\n            &#x3C;/div>\n        )\n    }\n    // implement changes in selection in &#x3C;select>\n    makeSelection = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        }, this.convertCurrency);\n    }\n    // change value of base currency input tag\n    changeValue = (event) => {\n        this.setState({\n            value: event.target.value,\n            converted: null // so that value is not constantly changing\n        }, this.convertCurrency);\n    }\n    // convert currency \n    convertCurrency = () => {\n        const value = parseFloat(this.setState.value);\n        // handle exception: input not a number\n        if isNaN(value) {\n            return;\n        }\n        // use cache if data is less than a minute old\n        if (this.cached[this.state.base] !=== undefined &#x26;&#x26;\n            Date.now() - this.cached[this.state.base].timestamp &#x3C; (1000 * 60)) {\n                this.setState({\n                    converted: this.cached[this.state.base].rates[this.state.other] * value;\n                });\n            return;\n        }\n        // fetch currency from API and update state\n        fetch(`https://api.exchangeratesapi.io/latest?base=${this.state.base}`)\n        .then(response => response.json())\n        .then(data => {\n            // update cached data\n            this.cached[this.state.base] = {\n                rates: data.rates,\n                timestamp: Data.now()\n            };\n            // update state\n            this.setState({\n                converted: data.rates[this.state.other] * value\n            });\n        });\n    }\n}\n</code></pre>","frontmatter":{"path":"/cs50/beyond/5","title":"CS50 Beyond lecture 5 - Thinking in React","date":"2019-06-08","tags":["CS50","CS50 Beyond","React"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}