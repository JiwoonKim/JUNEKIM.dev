{"data":{"markdownRemark":{"html":"<blockquote>\n<p>2019년 5월 10일 Pramp 인터뷰 Question (what I asked)</p>\n</blockquote>\n<h3>Shifted Array Search</h3>\n<p>Given a sorted array shiftArr (that is shifted to the left by an unknown offset) and a num, find the index of the number within the array. (if number doesn't exist within array, return -1)</p>\n<h3>문제 분석</h3>\n<p>1번보다 2번이 더 효율적이기 때문에 2번 방식으로 문제를 풀어야 함</p>\n<ol>\n<li>\n<p>shiftArr의 원소를 차례대로 체크하여 num의 index 반환 (shiftArr의 끝에 도달해도 없으면 -1 반환)</p>\n<ul>\n<li>O(N): Brute-force Method</li>\n</ul>\n</li>\n<li>\n<p><strong>정렬되었다는 성질을 이용하여 Binary Search를 이용하여 index 찾기</strong></p>\n<ul>\n<li>O(logN): Binary Search Method</li>\n<li>단, 단순히 sorted된 상태가 아니라, <strong>shifted to the left일 수 있다는 점에서 변형된 문제</strong></li>\n</ul>\n</li>\n</ol>\n<h3>풀이</h3>\n<h4>1. Offset 찾기</h4>\n<ul>\n<li>\n<p>Shifted된 array의 성질:</p>\n<ol>\n<li>한 부분을 제외하고는 항상 오름차순으로 정렬되어 있음</li>\n<li>한 부분에서만 (shiftArr[i - 1] > shiftArr[i])가 충족됨 (i가 array에서 가장 작은 숫자)</li>\n<li>\n<p>(shiftArr[first] > shiftArray[last])가 충족됨: offset부터 오름차순, 마지막</p>\n<ul>\n<li>그림 추가</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p><strong>이진탐색으로 offset된 pivot 값 찾기</strong> (<strong>재귀</strong>)</p>\n<ul>\n<li>if mid값이 (shiftArr[mid - 1] > shiftArr[mid]) 충족하면, mid 값 반환</li>\n<li>\n<p>아니라면, shiftArr[mid]과 shiftArray[last] 비교하여 어느쪽에 pivot 값이 있는지 찾아서 재귀적으로 탐색</p>\n<ul>\n<li>(shiftArr[mid] > shiftArray[last]): <strong>정렬에 역행 -> pivot값은 mid의 오른편에 존재</strong></li>\n<li>(shiftArr[mid] &#x3C; shiftArray[last]): <strong>오른차순 정렬된 상태 -> pivot값은 mid의 왼편에 존재</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4>2. Offset을 기준으로 shiftArr에서 num 인덱스 찾기 (<strong>binary search</strong>)</h4>\n<ol>\n<li>\n<p><strong>offset을 기준으로 완벽히 정렬된 두 array로 나누기</strong>: (pivot == offset; 가장 작은 숫자의 인덱스)</p>\n<ul>\n<li>[0, pivot - 1] 배열, [pivot, last] 배열로 자르기</li>\n</ul>\n</li>\n<li>\n<p>last 값과 num를 비교하여</p>\n<ul>\n<li>(num > shiftArray[last]): num은 왼쪽 배열에 존재</li>\n<li>(num &#x3C; shiftArray[last]): num은 오른쪽 배열에 존재</li>\n</ul>\n</li>\n<li>2번에서 구한 배열을 대상으로 binary search하여 num의 인덱스 값 구하기 (없으면 -1 반환)</li>\n</ol>\n<h3>코드</h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">findPivot</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> shiftArr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> startIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lastIndex <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>startIndex <span class=\"token operator\">+</span> lastIndex<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// if only one element, return as pivot</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>startIndex <span class=\"token operator\">==</span> lastIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token comment\">// if more than one element, check if mid point is pivot</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shiftArr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> shiftArr<span class=\"token punctuation\">[</span>mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// if not pivot</span>\n  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// if mid's value is larger than last value,  </span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shiftArr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> shiftArr<span class=\"token punctuation\">[</span>lastIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// pivot is located on the right side of mid value</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">findPivot</span><span class=\"token punctuation\">(</span>shiftArr<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> lastIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// pivot is located on the left side of mid value</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">findPivot</span><span class=\"token punctuation\">(</span>shiftArr<span class=\"token punctuation\">,</span> startIndex<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> shiftArr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> startIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lastIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>startIndex <span class=\"token operator\">+</span> lastIndex<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// if last element, determine whether num exists in shiftArr</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>startIndex <span class=\"token operator\">==</span> lastIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shiftArr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token comment\">// if more than one elemnt, use binary search to find index</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">==</span> shiftArr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;</span> shiftArr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span> shiftArr<span class=\"token punctuation\">,</span> startIndex<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span> shiftArr<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> lastIndex<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// return index of num within shiftArr</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">shiftedArrSearch</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> shiftArr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n  \n  <span class=\"token comment\">// find the pivot point using binary search</span>\n  <span class=\"token keyword\">int</span> pivot <span class=\"token operator\">=</span> <span class=\"token function\">findPivot</span><span class=\"token punctuation\">(</span>shiftArr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> shiftArr<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> lastIndex <span class=\"token operator\">=</span> shiftArr<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// if num is the pivot (smallest number in shiftArr)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">==</span> shiftArr<span class=\"token punctuation\">[</span>pivot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> pivot<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> \n  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// if num is larger than the last number,</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> shiftArr<span class=\"token punctuation\">[</span>lastIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// it is on the left side of the pivot</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>shiftArr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> pivot <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// else it is on the right side of the pivot</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>shiftArr<span class=\"token punctuation\">,</span> pivot<span class=\"token punctuation\">,</span> lastIndex<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token function\">shiftedArrSearch</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> result <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"path":"/interviewprep/pramp/1","title":"Pramp Mock Interview - Q 01","date":"2019-05-15","tags":["인터뷰"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}