{"data":{"markdownRemark":{"html":"<blockquote>\n<ul>\n<li>눈 여겨 볼 문제들은 링크가 걸려 있음</li>\n<li>중요한 유형들은 중요 표시가 되어 있음\nBFS/DFS를 응용하여 문제를 푸는 방식이 대다수!</li>\n</ul>\n</blockquote>\n<ol>\n<li><strong>그래프의 연결/분열</strong>: 연결요소 개수 찾기, 이분그래프 파악 문제</li>\n<li><strong>사이클 찾기</strong>: 순열 사이클 개수 찾기</li>\n<li><strong>플러드 필</strong>: 어떤 위치와 연결된 모든 위치를 찾는 문제 (이차원 배열을 가지고 연결요소 찾기)</li>\n<li>\n<p><strong>최소 거리 찾기</strong>: BFS만 가능</p>\n<ul>\n<li>DFS는 길이 이어지는지 안 이어지는지 판단은 할 수 있으나, 최단 거리를 보장하지는 않음</li>\n<li>\n<p><strong>하나의 시작점에서 도착점까지의 최소 거리를 찾는 경우</strong>:</p>\n<ul>\n<li></li>\n<li>ex. 미로 탐색 문제</li>\n</ul>\n</li>\n<li>\n<p><strong>여러 시작점에서 방사형으로 뻗어나가 모든 칸이 채워질 때까지의 거리를 찾는 경우</strong>: </p>\n<ul>\n<li></li>\n<li>ex. 토마토 문제</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h4>주의해야 할 점</h4>\n<ol>\n<li>\n<p><strong>check[] 해야할 사항 분명히 알기!</strong></p>\n<ul>\n<li>check[]가 단순히 돌아보았는가, 안돌아보았는가를 체크하는 것뿐만 아니라 이분그래프처럼 <strong>어느 집합에 속하는지로 나누어 체크</strong> 를 할 수도 있음</li>\n<li><strong>사이클인지 아닌지를 체크하는 것으로도 확장 가능</strong></li>\n</ul>\n</li>\n<li>\n<p>단순히 한 정점에서 BFS/DFS 탐색을 해서는 안되고, <strong>모든 정점을 돌면서 BFS/DFS 탐색을 해야하는 문제인지 잘 파악할 것!</strong></p>\n<ul>\n<li>bcuz 시작정점과 분리된 연결요소가 있는 그래프일 수도 있음!</li>\n<li>만약, 모든 정점을 하나씩 BFS/DFS 탐색을 해야하는 경우, <strong>반드시 루프의 시작에서 큐 또는 정답 여부 등을 초기화해야 하는지</strong>, <strong>특정 결과값이 나오면 루프를 break하고 나와야하는지</strong> (값이 덮어씌워질 수 있기 때문) 등을 고려할 것!</li>\n</ul>\n</li>\n</ol>\n<h4>연결요소</h4>\n<ul>\n<li>연결요소(Connected Component): 이어진 그래프의 단위</li>\n<li>\n<p>DFS나 BFS 탐색을 이용하여 연결 요소의 개수를 이용하여 구할 수 있음</p>\n<ul>\n<li>bcuz DFS/BFS 목표 = 모든 정점 한 번씩 돌아보는 것</li>\n</ul>\n</li>\n</ul>\n<h4><a href=\"https://www.acmicpc.net/problem/1707\">이분그래프</a> (중요!)</h4>\n<ul>\n<li>이분그래프(Bipartite Graph): 한 정점 집합 내에 서로 연결된 간선이 없는 조건을 만족하는 두 집합으로 그래프를 나타낼 수 있음</li>\n<li>\n<p>풀이: check[node]의 값을 단순히 방문, 방문 X로만 나누어서 체크하는 것이 아니라, <strong>(방문, 방문 O - 1 그룹, 방문 O - 2 그룹) 세 가지의 경우로 나누어 체크</strong></p>\n<ul>\n<li>check[node] == 0: 방문 X -> DFS/BFS 실행</li>\n<li>check[node] == 1: 방문 O, 그룹 1 소속 -> 연결된 다음 정점들은 모두 그룹 2로 체크 </li>\n<li>check[node] == 2: 방문 O, 그룹 2 소속 -> 연결된 다음 정점들은 모두 그룹 1로 체크 </li>\n<li>다음 정점을 체크하는 과정에서 현재 그룹과 소속이 일치하면 이분그래프가 아니므로 바로 DFS/BFS 루프 실행 break하고 이분그래프가 아님을 출력</li>\n<li>끝까지 그룹이 겹치지 않고 모든 노드를 체크하게 되면 이분그래프임을 출력</li>\n<li>(+ 연결요소가 하나 이상인 그래프일 수 있기 때문에 모든 노드를 루프를 돌며 체크하지 않은 경우 처음부터 DFS/BFS 실행해야 함) </li>\n</ul>\n</li>\n<li>\n<p><strong>생각의 패러다임</strong>: <strong>그룹으로 나누어 체크하는 방식</strong></p>\n<ul>\n<li>1 그룹 -> 다음 정점을 2 그룹으로 체크 &#x26; vice-versa</li>\n<li><strong>방법</strong>: nextGroup = 3 - thisGroup</li>\n<li>ex. 현재 노드가 1 그룹이면, nextGroup = 3 - 1 = 2 그룹이 나옴, 반대로 2 그룹이면 1이 나옴</li>\n</ul>\n</li>\n</ul>\n<h4>순열 사이클, 반복 수열</h4>\n<ul>\n<li>문제: 사이클의 개수 세기 또는 사이클이 되는 지점까지의 차례번호 구하기</li>\n<li>어차피 <strong>한 정점이 다른 한 정점으로만 연결되는 방향이 있는 그래프</strong> 이기 때문에, 인접 행렬이나 인접 리스트 사용할 필요없이, <strong>일차원 행렬을 이용하여 그래프 표현 가능</strong></li>\n<li>재귀함수를 하나만 호출하기 때문에 비재귀방식으로 구현하는 것이 더 효율적</li>\n<li>풀이: <strong>check에 방문한 횟수를 기록</strong> 하여 (방문 횟수 > 0)인 경우마다 count++ 하면서 사이클의 개수를 세어나가면 됨</li>\n<li>\n<p><strong>생각의 패러다임</strong>: <strong>check의 의미 확장하여 방문 횟수로 사이클의 개수 세기</strong></p>\n<ul>\n<li>check[i] == 0 : 아직 방문 X</li>\n<li>check[i] != 0 : 방문 O -> 방문한 횟수</li>\n</ul>\n</li>\n</ul>\n<h4>텀 프로젝트</h4>\n<ul>\n<li>문제: </li>\n<li>\n<p>풀이: 하나의 탐색 내에서 사이클이 찾아지는 지 구하여 사이클에 포함된 모든 학생의 수를 전체 수에서 빼기\n-<strong>생각의 패러다임</strong>:</p>\n<ul>\n<li></li>\n</ul>\n</li>\n</ul>\n<h3>플러드 필 (Flood Fill) 문제유형</h3>\n<ul>\n<li>어떤 위치와 연결된 모든 위치를 찾는 알고리즘</li>\n</ul>\n<h4><a href=\"https://www.acmicpc.net/problem/2667\">단지 번호 붙이기</a>, 섬의 개수 (중요!)</h4>\n<ul>\n<li>문제: 이차원 행렬이 주어졌을 때 상하좌우로 1이 연결된 부분들의 개수 찾기</li>\n<li>풀이: 연결요소의 개수를 구하는 것과 유사</li>\n<li>\n<p><strong>생각의 패러다임</strong>: d[i][j] = (i, j)에 대한 정보값 저장</p>\n<ul>\n<li>d[i][j] == 0: (i, j) 방문 X</li>\n<li>d[i][j] != 0: (i, j)가 속한 단지의 번호 기록</li>\n<li>\n<p><strong>상하좌우 좌료 구하기</strong>: <strong>dx[4]와 dy[4] 배열을 정의해놓고 가져다 적용</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// (x, y) 좌표의 상하좌우 좌표 쉽게 구하기</span>\n<span class=\"token keyword\">int</span> dx<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> dy<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">int</span> nx <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> ny <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 위의 좌표가 그리드 범위에 포함되는지 확인</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> nx <span class=\"token operator\">&amp;&amp;</span> nx <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> ny <span class=\"token operator\">&amp;&amp;</span> ny <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h4><a href=\"https://www.acmicpc.net/problem/2178\">미로탐색</a> (중요!)</h4>\n<ul>\n<li>문제: N x M 배열의 미로에서 (1, 1) 부터 (N, M)까지 가는 최단 거리 구하기</li>\n<li>풀이: 시작점에서 BFS를 실행하여 도착점에 도달하기까지의 최단 거리 구하기</li>\n<li>\n<p><strong>생각의 패러다임</strong>: BFS를 실행하여 시작점으로부터 1칸씩, 2칸씩, 3칸씩 먼 거리를 구하기</p>\n<ul>\n<li>check[i][j] = 시작점으로부터 최단 거리 기록</li>\n<li><strong>BFS를 실행하여 각 level별로 거리를 계산할 수 있기 때문에, 최초로 계산을 진행하는 경우가 이미 최단 거리임</strong></li>\n<li>(그렇기 때문에 따로 중복되는 거리를 굳이 비교하여 최소거리를 구할 필요가 없음!)</li>\n</ul>\n</li>\n</ul>\n<h4><a href=\"https://www.acmicpc.net/problem/7576\">토마토</a> (매우 중요!!!)</h4>\n<ul>\n<li>\n<p>문제: N x M 배열에 들어있는 토마토가 익는지 안 익는지를 판단 + 익는다면, 익는데 걸리는 최소 날짜 구하기</p>\n<ul>\n<li>각 칸에 토마토가 익었거나 (1), 안 익었거나 (0), 아예 들어있지 않거나 (-1) 함 </li>\n</ul>\n</li>\n<li>\n<p>풀이: <strong>익은 토마토를 일단 BFS를 실행할 큐에 모두 저장한 후에 BFS 실행</strong></p>\n<ul>\n<li>(각 토마토에 대해 BFS를 일일히 실행하는 방법과 다름!!)</li>\n</ul>\n</li>\n<li>\n<p><strong>생각의 패러다임</strong>:  </p>\n<ul>\n<li>\n<p>미로탐색 문제와 다른점: </p>\n<ol>\n<li>익었는지 안 익었는지 판단이 추가되고</li>\n<li>시작점이 고정된 미로탐색과 달리 각 익은 토마토에서 <strong>방사형으로 날짜가 구해지기 때문에 각 익은 토마토에 대해 BFS 실행 (최소 날짜 비교하여 저장해야 함)</strong></li>\n</ol>\n</li>\n<li>각 익은 토마토에 대해 BFS를 따로 실행 &#x26; 완료 후, 다음 익은 토마토에 대해 BFS를 실행하게 되면 시간초과 + 문제가 매우 복잡해져 오류 날 확률이 높아짐ㅠㅜ</li>\n<li>대신, <strong>익은 토마토를 일단 모두 BFS를 돌릴 큐에 저장</strong>하여 <strong>각 회마다 거리 1, 2, .. N씩을 한꺼번에 계산하는 방법으로 진행</strong></li>\n<li>이러면 <strong>중복 체크를 없애면서 동시에 각 최소거리를 구할 수가 있음</strong></li>\n</ul>\n</li>\n</ul>\n<h4><a href=\"https://www.acmicpc.net/problem/2146\">다리 만들기</a> (중요!)</h4>\n<ul>\n<li>문제: N x N 배열에서 섬과 섬 사이의 최단거리 구하기</li>\n<li>\n<p>풀이: 먼저 각 섬을 그룹별로 묶은 다음 BFS를 통해 한 섬과 다른 섬까지의 거리 중 최소 거리 구하기</p>\n<ol>\n<li>먼저 BFS/DFS를 통해 섬을 그룹별로 묶음 (+해안선인 땅을 큐에 따로 또 저장)</li>\n<li>해안선인 땅을 중심으로 BFS를 실행하며 (토마토처럼 방사형으로 뻗어나가 각 회마다 거리 1, 2, ... N씩 계산) 바다가 있는 칸에 가장 가까운 섬과 그 섬으로부터 떨어진 거리를 기록해나감</li>\n<li>\n<p>거리가 기록된 바다와 인접한 칸의 경우, 서로 다른 섬과 가까운지를 체크</p>\n<ul>\n<li>만약 다르다면, 그 칸의 거리와 인접한 칸의 거리를 더하여 섬과 다른 섬 사이의 거리를 계산할 수 있음</li>\n<li>여기서 거리를 최대거리와 비교하여 최대거리를 업데이트  </li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>","frontmatter":{"path":"/algorithm/baekjoon_basic/graph/pset","title":"[백준] 풀이 06. 그래프 1","date":"2019-05-06","tags":["백준","알고리즘","C++","그래프"]}}},"pageContext":{}}