{"data":{"markdownRemark":{"html":"<blockquote>\n</blockquote>\n<p>2장 프로세스 &#x3C;-> 3장 스레드 분리</p>\n<p><a href=\"https://www.geeksforgeeks.org/difference-between-multitasking-multithreading-and-multiprocessing/\">https://www.geeksforgeeks.org/difference-between-multitasking-multithreading-and-multiprocessing/</a> 설명 순서대로!\n<a href=\"https://www.geeksforgeeks.org/process-based-and-thread-based-multitasking/\">https://www.geeksforgeeks.org/process-based-and-thread-based-multitasking/</a>\n<a href=\"https://www.geeksforgeeks.org/last-minute-notes-operating-systems/\">https://www.geeksforgeeks.org/last-minute-notes-operating-systems/</a></p>\n<ul>\n<li>\n<p>multiprogramming  = 여러 프로그램에 메모리에 올라와 있음 -> 여러 프로그램 동시에 사용 가능 (사실 번갈아가며; 한 프로그램이 i/o되었을 때 cpu idle 하지 않게 )</p>\n<ul>\n<li>멀티프로그래밍 (메모리 관점) = 멀티태스킹 (사용자 입장)</li>\n</ul>\n</li>\n<li>time sharing (시분할) = cpu의 시간을 분할하여 나누어 쓴다</li>\n<li>동시성: 싱글 코어에서 멀티 스레드를 동작시키기 위한 방식으로 멀티 태스킹을 위해 여러 개의 스레드가 번갈아가면서 실행되는 성질을 말한다. 동시성을 이용한 싱글 코어의 멀티 태스킹은 각 스레드들이 병렬적으로 실행되는 것처럼 보이지만 사실은 번갈아가면서 조금씩 실행되고 있는 것이다.</li>\n</ul>\n<p>=> 멀티 프로그래밍/멀티 태스크: 하나의 cpu에서 시분할을 바탕으로 동시성(프로세스, 정확히는 스레드 단위들을 번갈아가면서 실행하는 것)을 가지게끔 동작시키기\n- 어쨋든 스레드는 프로세스의 동작단위이기 때문에\n<a href=\"https://www.geeksforgeeks.org/process-based-and-thread-based-multitasking/\">https://www.geeksforgeeks.org/process-based-and-thread-based-multitasking/</a></p>\n<p>multi-tasking = multiprogramming + time sharing (정말 작은 시간 단위로 번갈아갈 수 있게 so 병렬의 illusion제공)</p>\n<ul>\n<li>병렬성은 멀티 코어에서 멀티 스레드를 동작시키는 방식으로, 한 개 이상의 스레드를 포함하는 각 코어들이 동시에 실행되는 성질을 말한다. 병렬성은 데이터 병렬성(Data parallelism)과 작업 병렬성(Task parallelism)으로 구분된다.</li>\n</ul>\n<h3>프로세스</h3>\n<p>프로세스는 컴퓨터에서 연속적으로 실행되고 있는 컴퓨터 프로그램을 말한다.</p>\n<ul>\n<li>프로세스마다 주소 공간이 코드, 데이터, 스택이 할당된다</li>\n<li></li>\n</ul>\n<h4>프로세스 context</h4>\n<p>프로세스의 현 상태를 스냅샷 찍은 것\ncontext-switching</p>\n<h3>프로세스 관리</h3>\n<ul>\n<li>필요한 작업: cpu 스케줄링 (ready 큐의 프로세스들 중 다음으로 어느 것을 running할지), 메모리 관리/스케줄링(어느 것을 쫓아낼지)</li>\n<li>pcb형태로 프로세스 차례/순서 기록</li>\n<li>각각을 위한 큐: pcb 구조체가 이어진 형태의 큐</li>\n<li>각각을 위한 스케줄러: cpu 스케줄러(단기 스케줄러), Swapper(중기 스케줄러)</li>\n</ul>\n<h3>pcb</h3>\n<p>커널은 각 프로세스를 관리하기 위해 pcb에 각 프로세스의 정보를 구조체로 저장하여 관리</p>\n<ul>\n<li>프로세스 스케줄링을 위한 큐에 순서를 기록하는 것이 실제로 pcb (pcb 구조체가 이어진 큐)</li>\n</ul>\n<h3>프로세스 관리 시스템 콜</h3>\n<p>fork(), exec(), wait(), exit()\n프로세스 생성 (부모 -> 자식) -> 종료 과정\n프로세스 상태도</p>\n<h3>ipc (inter-process communication)</h3>","frontmatter":{"title":"[OS] 2. 프로세스","date":"2019-09-26","tags":["운영체제"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/CS_Core/Operating_Systems/2/"}}