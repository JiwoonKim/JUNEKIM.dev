{"data":{"markdownRemark":{"html":"<h3>상속 (Inheritance)</h3>\n<p>기존의 클래스로부터 새로운 클래스를 유도하는 것</p>\n<ul>\n<li><strong>부모 클래스</strong> (<strong>parent class</strong>): 기존에 있는 클래스 (또는 super class라고도 함)</li>\n<li>\n<p><strong>자식 클래스</strong> (<strong>child class</strong>): 상속된 클래스 (또는 subclass라고도 함)</p>\n<ul>\n<li>자식 클래스는 부모 클래스의 데이터와 메소드를 <strong>기본적으로 모두 이어 받는다</strong></li>\n<li>상속 받은 클래스에는 <strong>변수와 메소드를 추가할 수 있다</strong></li>\n</ul>\n</li>\n<li>\n<p>상속을 통해 코드를 재사용하기 때문에 소프트웨어의 생산성을 높일 수 있다</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 부모 클래스: 스승 정의</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Master</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> String name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>talent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 자식 클래스: 제자 정의</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Apprentice</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Master</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// name, work()를 상속받음</span>\n    <span class=\"token comment\">// 변수와 함수 추가</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> isGreater<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">excedes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"청출어람\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h4>상속의 접근 범위</h4>\n<p>상속을 받더라도 접근 지정자의 종류와 상속 관계인 두 클래스의 상대적인 위치에 따라, 자식 클래스가 부모 클래스의 데이터와 함수에 접근이 가능한지의 여부가 달라진다</p>\n<ul>\n<li><code class=\"language-text\">public</code> &#x26; <code class=\"language-text\">protected</code>: <strong>언제든 상속받아 접근 가능</strong></li>\n<li><code class=\"language-text\">default</code>: 두 클래스가 <strong>동일한 패키지에 존재할 경우에만</strong>, 상속받아 접근 가능</li>\n<li>\n<p><code class=\"language-text\">private</code>: 절대 <strong>접근 불가</strong> (상속의 의미가 크게 없음)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> publicVal<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">int</span> protectedVal<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span> <span class=\"token keyword\">int</span> defaultVal<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> privateVal<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        publicVal <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        protectedVal <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        defaultVal <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 다른 패키지면, 컴파일 오류</span>\n        privateVal <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 무조건 컴파일 오류; getPrivateVal()을 통한 접근이 권장됨</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h4>Super 레퍼런스 (<code class=\"language-text\">super</code>)</h4>\n<p>해당 객체의 <strong>부모 클래스를 가르키는 레퍼런스</strong> </p>\n<ul>\n<li>\n<p>주로 부모로부터 상속받은 메소드를 자식이 수정(<strong>메소드 오버라이딩</strong>)할 때 있어, 자식 메소드와 구분하여 부모 메소드를 호출하는 경우에 사용된다</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Master</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>talent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Apprentice</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Master</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 기존의 </span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" 에는 제자가 더 뛰어났다!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>또, 생성자 메소드가 상속되지 않기 때문에, <strong>파라미터가 있는 부모 생성자를 기반으로 자식 생성자를 정의</strong> 하고자 할 때에도 사용된다</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Master</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Master</span><span class=\"token punctuation\">(</span>String name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Apprentice</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Master</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Apprentice</span><span class=\"token punctuation\">(</span>String name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> isGreater<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 부모의 기본 생성자 이외의 생성자 코드를 재사용</span>\n        <span class=\"token comment\">// (super가 없다면, 자동으로 Master()이 호출 됨)</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 그 외 부분 정의</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isGreater <span class=\"token operator\">=</span> isGreater<span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>기본적으로 모든 자식 생성자는 부모의 기본 생성자를 먼저 호출한 후,  자식 생성자를 호출하는 순서를 가진다 (만약 상위 생성자에 기본 생성자가 없다면, 컴파일 오류가 생김)</li>\n</ul>\n</li>\n</ul>\n<h4>메소드 오버라이딩 (Method Overriding)</h4>\n<p>부모 클래스의 메소드 수정</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Master</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>talent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Apprentice</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Master</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// </span>\n            <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" 에는 제자가 더 뛰어났다!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<h3>계층구조 이해하기</h3>\n<ul>\n<li>계층구조의 최상위에 있는 클래스는 java.lang.Object 클래스이다.\n-모든 클래스는 java.lang.Object 클래스를 자동으로 상속받는다.</li>\n</ul>","frontmatter":{"title":"[OOP] 04. 상속","date":"2019-09-25","tags":["Java","객체지향프로그래밍"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/CS_Fundamentals/OOP/4/"}}