{"data":{"markdownRemark":{"html":"<h3>상속 (Inheritance)</h3>\n<p>기존의 클래스로부터 새로운 클래스를 유도하는 것</p>\n<ul>\n<li><strong>부모 클래스</strong> (<strong>parent class</strong>): 기존에 있는 클래스 (또는 super class라고도 함)</li>\n<li>\n<p><strong>자식 클래스</strong> (<strong>child class</strong>): 상속된 클래스 (또는 subclass라고도 함)</p>\n<ul>\n<li>자식 클래스는 부모 클래스의 데이터와 메소드를 <strong>기본적으로 모두 이어 받는다</strong></li>\n<li>상속 받은 클래스에는 <strong>변수와 메소드를 추가할 수 있다</strong></li>\n</ul>\n</li>\n<li>\n<p>상속을 통해 코드를 재사용하기 때문에 소프트웨어의 생산성을 높일 수 있다</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 부모 클래스: 스승 정의</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Master</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> String name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>talent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 자식 클래스: 제자 정의</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Apprentice</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Master</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// name, work()를 상속받음</span>\n    <span class=\"token comment\">// 변수와 함수 추가</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> isGreater<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">excedes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"청출어람\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h4>상속의 접근 범위</h4>\n<p>상속을 받더라도 접근 지정자의 종류와 상속 관계인 두 클래스의 상대적인 위치에 따라, 자식 클래스가 부모 클래스의 데이터와 함수에 접근이 가능한지의 여부가 달라진다</p>\n<ul>\n<li><code class=\"language-text\">public</code> &#x26; <code class=\"language-text\">protected</code>: 언제든 상속받아 접근 가능</li>\n<li><code class=\"language-text\">default</code>: 두 클래스가 <strong>동일한 패키지에 존재할 경우에만</strong>, 상속받아 접근 가능</li>\n<li><code class=\"language-text\">private</code>: </li>\n</ul>\n<h4>Super 레퍼런스</h4>\n<p><code class=\"language-text\">super</code>는 부모 클래스를 가르키는 레퍼런스</p>\n<ul>\n<li>부모 클래스의 생성자는 자식 클래스에 상속이 되지 않는다</li>\n<li>\n<p>부모 클래스의 생성자를 재사용하기 위해서 <code class=\"language-text\">super</code> 레퍼런스를 사용한다</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 부모 클래스: 스승 정의</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Master</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Master</span><span class=\"token punctuation\">(</span>String name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 자식 클래스: 제자 정의</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Apprentice</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Master</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Apprentice</span><span class=\"token punctuation\">(</span>String name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> isGreater<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 부모 클래스의 생성자를 재사용</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 그 외 부분 초기화</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isGreater <span class=\"token operator\">=</span> isGreater<span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h4>오버라이딩 (Overriding)</h4>\n<p>부모 클래스의 메소드 수정도 가능하다 (오버라이딩 overriding)</p>\n<h4></h4>\n<h4>상위 클래스 접근</h4>\n<h3>계층구조 이해하기</h3>\n<ul>\n<li>계층구조의 최상위에 있는 클래스는 java.lang.Object 클래스이다.\n-모든 클래스는 java.lang.Object 클래스를 자동으로 상속받는다.</li>\n</ul>\n<h3>다형성 (Polymorphism)</h3>\n<p>동일한 이름의 다양한 형태의 객체를 만들 수 있는 것</p>\n<h4>메소드 오버로딩 (Method Overloading)</h4>\n<p>한 클래스 내에서 이름이 같은 두 개 이상의 메소드 작성\n 메소드의 인자 개수 또는 타입이 달라야 한다.\n 메소드의 리턴 타입만 달라서는 안된다. (컴파일 에러)</p>\n<p>생성자\nthis() 같은 클래스의\n다른 생성자\n호출 시 사용\n 생성자 내에서만\n사용 가능 (다른\n메소드에서는\n사용 불가)\n 반드시 생성자\n코드의 제일\n처음에 수행</p>","frontmatter":{"title":"[OOP] 04. 상속과 다형성","date":"2019-09-25","tags":["Java","객체지향프로그래밍"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/CS_Fundamentals/OOP/4/"}}