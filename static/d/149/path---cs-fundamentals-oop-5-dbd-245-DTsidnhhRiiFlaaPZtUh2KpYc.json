{"data":{"markdownRemark":{"html":"<h3>다형성 (Polymorphism)</h3>\n<p><code class=\"language-text\">poly</code>(many) + <code class=\"language-text\">morphs</code>(forms)가 합쳐진 뜻으로 <strong>한 객체가 여러 가지 형태를 취할 수 있음</strong> 을 의미</p>\n<ul>\n<li>\n<p><strong>한 클래스가 다른 클래스로부터 상속되었다면</strong>, 그 클래스의 <strong>객체는 다형성을 가진다</strong> 고 할 수 있다</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Deer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nDeer deerForm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Deer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 사슴 형태일 수도 있고</span>\nAnimal animalForm <span class=\"token operator\">=</span> deerForm<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 동물 형태일 수도 있다</span></code></pre></div>\n<ul>\n<li>모든 클래스는 Object 클래스로부터 상속되기 때문에 <strong>자바의 모든 클래스는 다형성을 가진다</strong> </li>\n</ul>\n</li>\n<li>다만, 단순히 다양한 형태를 가질 수 있다는 의미보다는, 주로 객체가 가진 <strong>한 행동이 다양한 형태로 표현될 수 있다</strong> 는 의미로 쓰인다 (즉, <strong>메소드와 관련</strong> 하여 주로 다형성이 얘기된다)</li>\n</ul>\n<h4>다형성의 종류</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">메소드 오버로딩 (method overloading)</th>\n<th align=\"left\">메소드 오버라이딩 (method overriding)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">같은 이름의 메소드를 여러 개 작성</td>\n<td align=\"left\">서브 클래스가 상속받은 메소드 재작성</td>\n</tr>\n<tr>\n<td align=\"left\">클래스 내 또는 상속 관계에서 가능</td>\n<td align=\"left\">서브 클래스에서 가능</td>\n</tr>\n<tr>\n<td align=\"left\">사용의 편리성 향상</td>\n<td align=\"left\">서브클래스에 맞게끔 상속받은 메소드를 재정의</td>\n</tr>\n<tr>\n<td align=\"left\">메소드 이름이 같되, 인자 개수와 타입은 달라야 함</td>\n<td align=\"left\">메소드의 이름, 인자 개수와 타입이 모두 동일해야 함</td>\n</tr>\n<tr>\n<td align=\"left\">정적 바인딩 (컴파일 시에 호출되는 메소드가 결정됨)</td>\n<td align=\"left\">동적 바인딩 (실행 시에 오버라이딩된 메소드 찾아 호출)</td>\n</tr>\n</tbody>\n</table>\n<h3>메소드 오버로딩 (Method Overloading)</h3>\n<p>한 클래스 내에서 이름이 같은 메소드가 여러 개 존재</p>\n<ul>\n<li>반드시 <strong>메소드의 인자 개수</strong> 또는 <strong>타입</strong> 이 <strong>달라야 한다</strong> (+ 리턴 타입이 추가로 달라져도 괜찮다)</li>\n<li>\n<p>컴파일 시에 중복된 메소드 중 호출되는 메소드가 결정된다 (정적 바인딩)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 생성자 메소드 오버로딩</span>\n<span class=\"token keyword\">public</span> <span class=\"token function\">Animal</span><span class=\"token punctuation\">(</span>String s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    name <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token function\">Animal</span><span class=\"token punctuation\">(</span>String s<span class=\"token punctuation\">,</span> String a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    action <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 메소드 오버로딩</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span>String action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 매개변수 변화</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>action <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> String <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span>String action<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> changeName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 매개변수 &amp; 리턴타입 변화</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> action <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h3>메소드 오버라이딩 (Method Overriding)</h3>\n<p><strong>부모 클래스의 메소드를</strong> 자식 클래스에서 <strong>재정의하는 것</strong></p>\n<ul>\n<li><strong>메소드 이름, 인자 타입 및 개수, 리턴 타입 등이 일치해야</strong> 된다 (하나라도 다르면 메소드 오버라이딩이 실패하고, 자식 클래스에 오버로딩된 메소드가 추가되기만 함)</li>\n<li>static, private 또는 final 메소드는 오버라이딩 될 수 없으며, 오버라이딩된 메소드의 접근 지정자는 상위 클래스 메소드의 접근 지정자보다 범위가 넓어야만 한다 </li>\n<li>\n<p>실행 시간에 오버라이딩된 메소드 찾아 호출한다 (동적 바인딩)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Master</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"스승은 뛰어났다!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Apprentice</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Master</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 메소드 오버라이딩</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"제자는 더 뛰어났다!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h4>동적 바인딩 (Dynamic Binding)</h4>\n<ul>\n<li>\n<p>오버라이딩 된 메소드는 무조건 실행되도록 <strong>동적 바인딩</strong> 된다 (부모 클래스의 메소드를 무시하고, 자식 클래스에서 새로 작성된 메소드가 실행됨)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Master</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"스승은 뛰어났다!\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Apprentice</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Master</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 오버라이딩된 메소드</span>\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"제자는 더 뛰어났다!\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 드라이버 코드</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Master blue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Master</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        blue<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"스승은 뛰어났다!\" 출력 </span>\n        Apprentice bluer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Apprentice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 동적 바인딩에 의해 오버라이딩된 work()가 호출됨</span>\n        bluer<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"제자가 더 뛰어났다!\" </span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 설명: bluer.show() -> 상속받은 show() -> work()</span>\n<span class=\"token comment\">// BUT, 동적 바인딩 때문에 Master.work() 대신, 오버라이딩된 Apprentice.work()를 무조건 호출됨</span></code></pre></div>\n</li>\n<li>\n<p>업캐스팅된 레퍼런스이더라도, 가르키는 객체의 오버라이딩된 메소드를 무조건 실행한다</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Master</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"스승은 뛰어났다!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Master</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"제자는 더 뛰어났다!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n    Master disguised <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Apprentice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 업캐스팅</span>\n    disguised<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"제자가 더 뛰어났다!\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 업캐스팅된 레퍼런스는 하위 클래스의 변수 및 메소드에 접근할 수 없는 것이 원칙이지만,</span>\n<span class=\"token comment\">// 동적 바인딩에 의해 객체의 오버라이딩된 메소드가 호출됨</span></code></pre></div>\n<p>cf) super로 접근한 메소드는 동적바인딩이 되지 않는다</p>\n</li>\n</ul>","frontmatter":{"title":"[OOP] 05. 다형성","date":"2019-10-01","tags":["Java","객체지향프로그래밍"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/CS_Fundamentals/OOP/5/"}}