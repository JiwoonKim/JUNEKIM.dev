{"data":{"markdownRemark":{"html":"<h3>문제 1: 짝 제거</h3>\n<p>주어진 문자열에서 짝(연속으로 반복된 두 문자)이 더 이상 없을 때까지 계속 제거해나갔을 때, 남는 문자가 없으면 1을, 있으면 0을 반환하기</p>\n<ul>\n<li>\n<p>ex. \"baabaa\" </p>\n<ul>\n<li>\"baabaa\" > \"bbaa\" > \"aa\" > \"\" (짝 제거)</li>\n<li>결과: 1 반환</li>\n</ul>\n</li>\n</ul>\n<h4>내가 푼 방법</h4>\n<p>시간복잡도 O(n^3), 공간복잡도 O(n)</p>\n<ul>\n<li>문자열</li>\n</ul>\n<h4>코드</h4>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 짝 제거 함수 코드 짜기</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 문자열이 존재하는 동안</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 반복되는 짝을 찾기 (문자열에서의 첫 인덱스)</span>\n        <span class=\"token keyword\">int</span> repeat_index <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                repeat_index <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 짝이 문자열이 존재하지 않는다면, 짝 제거 실패 </span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>repeat_index <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 짝 존재하면, 짝 제거하여 문자열 업데이트</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            s <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>repeat_index<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 짝 제거로 문자열을 모두 제거 성공</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>모범 답안과 비교</h4>\n<h4>문제 분석</h4>\n<h3>문제 2: 기능 배포</h3>\n<p>다수의 기능들의 진행현황과 진행속도가 각각 배열로 주어졌을 때, 각 기능들이 배포되는 날짜와 개수 구하기 (기능은 진행이 100인 경우에만 배포가 가능하며, 앞에서부터 순서대로만 배포될 수 있기 때문에 뒤에 기능이 더 빨리 완료된다고 하더라도 앞에 기능이 완료되는 날에 같이 배포된다)</p>\n<ul>\n<li>\n<p>ex. 진행현황 {93, 30, 55}, 진행속도 {1, 30, 5}</p>\n<ul>\n<li>진행되어야 할 양 (100 - 진행현황): {7, 70, 45}</li>\n<li>완료될 때까지 걸리는 날짜 (진행할 양 / 진행속도): {7, 3, 9}</li>\n<li>배포되는 날짜: 7일 째 - 2개, 9일째 - 1개</li>\n<li>결과: {2, 1}</li>\n</ul>\n</li>\n</ul>\n<h4>내가 푼 방법</h4>\n<p>시간복잡도 O(n), 공간복잡도 O(n)</p>\n<ol>\n<li>먼저 각 기능이 완료될 때까지 걸리는 날짜를 순서대로 구한다: { (100 - 진행현황) / 진행속도 }을 올림</li>\n<li>첫 날짜부터 시작하여, 그보다 더 큰 날짜가 나올 때까지 계속 개수를 카운트하여 출력</li>\n</ol>\n<h4>코드</h4>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cmath></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 기능 배포 함수 코드 짜기</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> progresses<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> speeds<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> answer<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 각 기능마다 며칠 뒤에 배포가 이루어지는지 계산하기</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">days</span><span class=\"token punctuation\">(</span>progresses<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> days<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> progress_left <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token operator\">-</span> progresses<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">float</span> day_left <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> progress_left <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> speeds<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        days<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>day_left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 배포되는 날짜들과 해당 날짜에 배포될 기능 개수 구하기</span>\n    <span class=\"token keyword\">int</span> d_day <span class=\"token operator\">=</span> days<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> days<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 정보 입력 그리고 새로운 배포날짜 업데이트</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> n <span class=\"token operator\">||</span> days<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> d_day<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            answer<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            d_day <span class=\"token operator\">=</span> days<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 해당 배포날짜에 기능 개수 카운트 </span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>모범 답안과 비교</h4>\n<p>시간복잡도 O(n), 공간복잡도 O(n)</p>\n<ul>\n<li>어쨋든 벡터에 있는 모든 값을 일일이 확인하고 배포할 날짜를 구해야 하므로, 적어도 시간복잡도 O(n)이 걸린다.</li>\n<li>마찬가지로, 벡터에 있는 모든 값의 날짜를 순서를 유지한 채로 구하고 비교해야 하므로, 적어도 공간복잡도 O(N)이 걸린다.\n최적화된 O(n)의 시간과 공간 복잡도를 가진 코드를 제출하여 통과</li>\n</ul>\n<h3>결과</h3>\n<ul>\n<li>\n<p>시간 배분:</p>\n<ul>\n<li>\n<p>첫 번째 문제: 모든 테스트 케이스를 통과하는 코드 30분 안에 작성</p>\n<ul>\n<li>But 시간 초과로 효율성 테스트 통과 실패</li>\n</ul>\n</li>\n<li>두 번째 문제: 모든 테스트 케이스를 통과하는 코드 20분 안에 작성</li>\n<li>나머지 10분 동안 첫 번째 문제 다시 풀려고 노력</li>\n</ul>\n</li>\n<li>\n<p>정확성:</p>\n<ul>\n<li></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"[프로그래머스] 스킬 체크 Level 2","date":"2019-07-18","tags":["알고리즘","코딩 테스트"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/Coding_Comps/Programmers/skill_check_2/"}}