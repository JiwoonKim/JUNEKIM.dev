{"data":{"markdownRemark":{"html":"<blockquote>\n<p>Standard Template Library (STL)는 알고리즘, 컨테이너, 함수, 이터레이터로 이루어져 있으며 그 중 컨테이너를 정리.</p>\n</blockquote>\n<ul>\n<li><a href=\"#%EC%88%9C%EC%B0%A8%20%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88\" title=\"Sequential Container\">순차 컨테이너</a>: vector, list, deque</li>\n<li><a href=\"#%EC%97%B0%EA%B4%80%20%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88\" title=\"Associative Containers\">연관 컨테이너</a>: set, map</li>\n<li><a href=\"%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%20%EC%96%B4%EB%8C%91%ED%84%B0\" title=\"Container Adaptors\">컨테이너 어댑터</a>: stack, queue, priority_queuq</li>\n</ul>\n<h3>컨테이너 (Container)</h3>\n<ul>\n<li>Pair, Tuple, Vector, Deque, List, Set, Map, Stack, Queue, Priority Queue, Bitset 등이 존재한다.</li>\n</ul>\n<h4>Pair</h4>\n<ul>\n<li>두 자료 T1과 T2를 묶어서 사용한다.</li>\n<li>Pair는 <utility> 헤더파일에 정의되지만, <algorithm>이나 <vector> 헤더파일에도 포함되어 있기 때문에 일반적으로 이 둘을 사용한다.</li>\n<li>선언: <code class=\"language-text\">make_pair</code> 또는 생성자를 이용한다.</li>\n<li>\n<p>접근: <code class=\"language-text\">pair.first</code>와 <code class=\"language-text\">pair.second</code> 또는 <code class=\"language-text\">tie</code>를 이용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span>\n<span class=\"token comment\">// 선언</span>\npair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> p<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 선언이 따로 없으면 0과 0으로 초기화된다</span>\np <span class=\"token operator\">=</span> <span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// make_pair를 통해 선언과 값 설정</span>\np <span class=\"token operator\">=</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 생성자를 통해 선언과 값 설정</span>\npair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// </span>\n<span class=\"token comment\">// 접근</span>\np<span class=\"token punctuation\">.</span>first <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\np<span class=\"token punctuation\">.</span>second <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">tie</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<p>tie(a, b) = make_pair(b, a) // 이러한 문법을 통해 변수에 들어가는 순서를 바꾸는 것도 가능</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#### Tuple\n- 둘 이상의 여러 개의 자료를 묶어 사용할 수 있다.\n- 선언: `make_tuple`을 이용한다.\n- 접근: `get&lt;&gt;` 또는 `tie`를 이용한다.\n```cpp\n#include &lt;tuple&gt;\ntuple&lt;int, int, int&gt; t1 = make_tuple(1, 2, 3);\n\ncout &lt;&lt; get&lt;0&gt;(t1);     // get을 이용하여 접근\ntie(x, y, z) = t1;      // tie를 통해 각 index에 접근\ntie(x, y, ignore) = t1  // tie에 ignore를 함께 사용하여 특정 index에 접근</code></pre></div>\n<h3>순차 컨테이너 (Sequential Container)</h3>\n<ul>\n<li>순서가 있는 컨테이너로 vector, list, deque, array, forward_list가 존재한다. </li>\n</ul>\n<h4>Vector</h4>\n<ul>\n<li>길이를 변경할 수 있는 배열이다.</li>\n<li>선언: 길이를 직접 지정하거나, 특정 값으로 초기화하는 옵션도 가능하다.</li>\n<li>접근: front와 back, 그리고 [] 또는 iterator를 이용한다.</li>\n<li>삽입: <code class=\"language-text\">push_back</code>을 통해 가장 뒤쪽에 삽입, <code class=\"language-text\">insert</code>를 통해 원하는 자리에 원소를 삽입한다.</li>\n<li>삭제: <code class=\"language-text\">pop_back</code>을 통해 가장 뒤쪽을 삭제, <code class=\"language-text\">erase</code>를 통해 원하는 자리의 원소를 제거, <code class=\"language-text\">clear</code>로 모든 원소 삭제한다.</li>\n<li>\n<p>크기: <code class=\"language-text\">size</code>를 통해 벡터의 크기를 알아보고, <code class=\"language-text\">empty</code>를 통해 벡터가 비었는지 안 비었는지를 알아본다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 길이가 0인 벡터 선언</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 길이가 10인 벡터 선언</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 길이가 15이고 1로 모두 초기화된 벡터 선언</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// list를 이용한 벡터 선언</span></code></pre></div>\n</li>\n</ul>\n<p>v.insert(인덱스, 값) // 인덱스에 값 추가\nv.insert(인덱스, 개수, 값) // 인덱스에 값 개수만큼 추가\nvv.insert(인덱스, v.begin(), v.end()) // 인덱스에 v 벡터의 값들을 모두 삽입</p>\n<p>v.erase(v.begin() + 인덱스) // 인덱스 + 1 자리 제거\nv.erase(v.begin() + 인덱스, v.begin() + 끝자리) // 인덱스 + 1부터 끝자리 바로 전까지 제거</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 순회: size와 [] 또는 iterator와 begin &amp; end의 조합을 이용한 다양한 방식이 있다.\n```cpp\nfor (int i = 0; i &lt; v.size(); i++) {\n    v[i];\n}\nfor (int &amp;x : v) {\n    x; // 인덱스 접근\n    *x; // 값 접근\n}\n\nfor(vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) {\n    cout &lt;&lt; *it;\n}\nfor (auto it = v.begin(); it != v.end(); it++) {\n    it - v.begin() // 인덱스 번호 접근\n    *it // 원소 자체의 값에 접근\n}</code></pre></div>\n<ul>\n<li>\n<p>cf) vector가 pair 자료로 이루어지는 경우, emplace<em>back을 push</em>back과 동일하게 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span>\nvector<span class=\"token operator\">&lt;</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> a<span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<h4>Deque</h4>\n<ul>\n<li>double-ended queue의 약자로 양쪽으로 삽입과 제거가 가능한 큐이다.</li>\n<li>선언: <deque> 헤더파일을 포함시킨 후에 deque&#x3C;자료> d를 통해 선언한다.</li>\n<li>삽입: <code class=\"language-text\">push_front</code>와 <code class=\"language-text\">push_back</code>을 이용한다.</li>\n<li>삭제: <code class=\"language-text\">pop_front</code>와 <code class=\"language-text\">pop_back</code>을 이용한다.</li>\n</ul>\n<h4>List</h4>\n<ul>\n<li>이중 연결 리스트(Doubly-linked list)를 의미한다.</li>\n<li>사실 프로그래밍 대회에서는 잘 사용하지 않는 컨테이너에 해당된다.</li>\n<li>삽입 &#x26; 삭제: <code class=\"language-text\">insert</code>와 <code class=\"language-text\">erase</code>를 사용하여 O(1)로 연산이 가능하다.</li>\n<li>\n<p>정렬: list 자체에 내장된 <code class=\"language-text\">sort</code>함수를 사용해야 한다 (<algorithm>에 포함된 sort 함수를 사용하지 못함)</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> l <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 리스트 선언과 초기화</span></code></pre></div>\n</li>\n</ul>\n<p>l.sort();               // 오름차순으로 정렬 {-2, -1, 0, 1, 2}\nl.sort(greater<int>()); // 알고리즘 greater를 사용하여 내림차순으로 정렬\nl.sort(<a href=\"int%20&#x26;u,%20int%20&#x26;v\"></a> {    // compare 함수를 사용하여 절대값 기준으로 정렬\nreturn abs(u) &#x3C; abs(v);\n});\nl.reverse();            // 현재 상태를 거꾸로 뒤집는다</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">### 연관 컨테이너 (Associative Containers)\n- 순서가 없는 자료구조들로 set, multiset, map, multimap이 존재한다.\n- Binary Search Tree로 구현이 되어 있어 삽입, 삭제, 탐색이 모두 O(logN)이 걸린다.\n\n#### Set\n- 집합을 나타낼 때 효과적인 자료구조이다. \n- 선언: &lt;set&gt; 헤더파일을 포함시킨 후에 set&lt;자료&gt; s를 통해 선언한다.\n- 접근: 순서가 없기 때문에 []나 begin() + i와 같은 표현이 불가능하며, 대신 iterator를 이용한다.\n- 삽입: `insert`를 이용하여 내부가 정렬된 상태로 유지된다 (중복된 값은 허용되지 않기에 삽입 성공 실패 여부와 더불어 삽입 위치를 return한다)\n- 삭제: `erase`를 이용한다.\n- 크기: `size`를 이용한다.\n- 탐색: `find`를 사용하여 set에 어떤 값이 들어가있는지 없는지, 있다면 위치가 어디인지를 알 수 있고, `count`를 이용하는 방법도 있다.\n- 순회: iterator와 begin &amp; end 조합을 사용한다 (순서가 없기 때문에 begin() + i와 같은 표현은 불가능)\n```cpp\n#include &lt;set&gt;\nset&lt;int&gt; s;\nset&lt;int&gt; s = {1, 1, 2, 3} // 중복된 값을 인정하지 않기에 {1, 2, 3}으로만 구성\n\npair&lt;set&lt;int&gt;::iterator, bool&gt; result = s.insert(4); // 정렬된 형태를 유지하며 삽입, 삽입위치와 성공여부를 return\ns.erase(s.begin()); // 첫 번째 인덱스 삭제\n\nauto it = s.find(5); // 없기 때문에 end()를 호출\nfor (int i = 1; i &lt; 9; i++) {\n    s.count(i);      // 일일히 find()를 하고 end()값과 비교하기보다는 수가 있는지 없는지 (1 or 0) 확인하는 방법이 효율적\n}\n\nfor (auto it = s.begin(); it != s.end(); it++) { // it++ 연산이 O(logN) 걸리므로 총 O(NlogN)이 걸림\n    *it;\n}\nfor (auto x : s) {\n    x;\n}</code></pre></div>\n<h5>Multiset</h5>\n<ul>\n<li>set과 완벽하게 동일하나 같은 수 여러 개를 저장할 수 있는 점이 추가된 자료구조이다.</li>\n</ul>\n<h4>Map</h4>\n<ul>\n<li>key와 value로 이루어진 자료구조이다.</li>\n<li>선언: <map> 헤더파일을 포함시킨 후에 map&#x3C;자료> m를 통해 선언한다.</li>\n<li>접근: [key값]을 이용하여 접근할 수 있다 (단, 없는 경우에는 key값을 생성하는 문제 조심!) pair형태처럼 first와 second로도 접근 가능하다.</li>\n<li>삽입: [key값]을 이용하여 value를 쌍으로 삽입한다.</li>\n<li>삭제: </li>\n<li>크기: <code class=\"language-text\">size</code>를 이용한다.</li>\n<li>\n<p>탐색: 자료가 있는지 없는지 확인하는 경우에는 [key값]보다는 <code class=\"language-text\">count</code>를 사용하는 방법이 더 알맞다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> m<span class=\"token punctuation\">;</span>\nmap<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span> m <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"슬라임\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"드래곤\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<p>cout &#x3C;&#x3C; m[1]; // \"슬라임\"이 출력\n// 존재하지 않는 경우 0을 반환한다 (트리구조이기에 O(logN)이 걸림)</p>\n<p>for (int i = 1; i &#x3C;= 10; i++) {\nif (m[i]) {...} // 없는 경우에는 key값을 생성하는 문제가 생김\n}\nfor (int i = 1; i &#x3C;= 10; i++) {\nif (m.count(i)) {...} // 자료가 있는지 없는지 확인하기 위해서는 이 방법이 더 알맞음\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">### 컨테이너 어댑터 (Container Adaptors)\n- 순차 컨테이너를 변형한 자료구조로 stack, queue, priority_queue가 존재한다.\n\n#### Stack\n- 한쪽으로만 삽입과 삭제가 가능한 자료구조이다. \n- 기본적으로, deque를 형태로 구현되었으나, list 형태를 명시하여 구현도 가능하다.\n- 선언: &lt;stack&gt; 헤더파일을 포함시킨 후에 stack&lt;자료&gt; s를 통해 선언한다.\n- 접근: `top`을 사용하여 O(1)로 연산이 가능하다.\n- 삽입 &amp; 삭제: `push`와 `pop`를 사용하여 O(1)로 연산이 가능하다.\n- 크기: `size`를 통해 크기를 알아보고, `empty`를 통해 스택이 비었는지 안 비었는지를 알아본다.\n```cpp\n#include &lt;stack&gt;\nstack&lt;int&gt; s;\ns.push(1); s.push(2); s.push(3); // 차례대로 쌓이게끔 삽입\ncout &lt;&lt; s.top(); // 제일 위의 데이터를 출력\ns.pop(); // 제일 위의 데이터를 삭제 </code></pre></div>\n<ul>\n<li>pair 자료형을 사용시 emplace를 사용할 수도 있다.</li>\n</ul>\n<h4>Queue</h4>\n<ul>\n<li>한쪽으로 삽입하고 반대쪽으로 삭제가 가능한 자료구조이다. </li>\n<li>기본적으로, deque를 형태로 구현되었으나, list 형태를 명시하여 구현도 가능하다.</li>\n<li>선언: <queue> 헤더파일을 포함시킨 후에 queue&#x3C;자료> q를 통해 선언한다.</li>\n<li>접근: <code class=\"language-text\">front</code>와 <code class=\"language-text\">back</code>을 사용하여 O(1)로 연산이 가능하다.</li>\n<li>삽입 &#x26; 삭제: <code class=\"language-text\">push</code>와 <code class=\"language-text\">pop</code>를 사용하여 O(1)로 연산이 가능하다.</li>\n<li>\n<p>크기: <code class=\"language-text\">size</code>를 통해 크기를 알아보고, <code class=\"language-text\">empty</code>를 통해 스택이 비었는지 안 비었는지를 알아본다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span>\nqueue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> q<span class=\"token punctuation\">;</span>\nq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 차례대로 쌓이게끔 삽입</span>\ncout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" : \"</span> <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 제일 앞과 뒤의 데이터를 출력</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 제일 앞의 데이터를 삭제 </span></code></pre></div>\n</li>\n<li>pair 자료형을 사용시 emplace를 사용할 수도 있다.</li>\n</ul>\n<h4>Priority Queue</h4>\n<ul>\n<li>큐와 똑같지만 가장 우선순위가 제일 높은 것(ex.숫자가 가장 큰 정수)이 먼저 나오는 자료구조이다.</li>\n<li>대표적으로 priority heap (최대힙)의 형태로 구현된다.</li>\n<li>삽입 &#x26; 삭제: <code class=\"language-text\">push</code>와 <code class=\"language-text\">pop</code>을 이용한다.</li>\n<li>접근: 큐이지만 <code class=\"language-text\">top</code>을 사용하여 가장 큰 수가 위로 올라온다.</li>\n<li>최대힙: 내림차순으로 정렬되어 삽입이 되고, 큰 순서대로 나온다.</li>\n<li>\n<p>최소힙: <code class=\"language-text\">priority_queue&lt;자료형, vector&lt;자료형&gt;, greater&lt;자료형&gt;&gt;</code>으로 선언하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<p>priority_queue<int> q1;\nfor (int x : v) { q1.push(x); } // 우선순위 큐에는 {3, 2, 1} 큰 순서대로 정렬이 됨 (최대힙)</p>\n<p>priority_queue&#x3C;int, vector<int>, greater<int>> q2; // 작은 순서대로 정렬이 됨 (최소힙)\nfor (int x : v) { q2.push(x); }</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#### Bitset\n- vector&lt;bool&gt;와 같은 형태의 자료구조이다.\n- 접근: [] 또는 `test`를 이용한다.\n- 값 바꾸기: `set`으로 1로 바꾸고, `reset`으로 0으로 바꾸고, `flip`으로 현재 인덱스의 값을 뒤집는다.\n- 값 확인: `all`로 모든 bit가 1인지를 확인하고, `any`로 1인 bit가 하나라도 존재하는지를 확인하고, `none`으로 모든 bit가 0인지를 확인할 수 있다.\n- 개수 세기: `count`로 1인 bit의 개수를 센다.\n- bit 연산: `&amp;`, `|`, `^`, `~`, `&lt;&lt;`, `&gt;&gt;`의 연산이 가능하다.\n```cpp\nbitset&lt;8&gt; b1 ; // 0, 0, 0, 0, 0, 0, 0, 0\nbitset&lt;10&gt; b2(88); // 0, 0, 0, 1, 0, 1, 1, 0, 0, 0\nbitset&lt;8&gt; b3(&quot;10110&quot;;) // 0, 0, 0, 1, 0, 1, 1, 0\n\ncout &lt;&lt; (b1 &amp; b2); // AND 연산\ncout &lt;&lt; (b1 | b2); // OR 연산\ncout &lt;&lt; (b1 ^ b2); // XOR 연산\ncout &lt;&lt; ~(b1);     // NOT 연산\ncout &lt;&lt; (b1 &lt;&lt; 2); // SHIFT LEFT 연산\ncout &lt;&lt; (b1 &gt;&gt; 2); // SHIFT RIGHT 연산</code></pre></div>","frontmatter":{"path":"/algorithm/baekjoon_STL/STL_container","title":"[백준] 프로그래밍 대회에서 사용하는 C++ STL 컨테이너","date":"2018-01-27","tags":["백준","C++","강의노트"]}}},"pageContext":{}}