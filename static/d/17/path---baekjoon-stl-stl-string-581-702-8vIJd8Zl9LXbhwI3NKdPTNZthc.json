{"data":{"markdownRemark":{"html":"<blockquote>\n<p>C와 C++의 문자열 정리</p>\n</blockquote>\n<h3>문자열 (String)</h3>\n<ul>\n<li>C 문자열: <code>char c[]</code>로 선언을 한다.</li>\n<li>\n<p>C++ 문자열: <code>string s</code>로 선언을 한다.</p>\n<pre><code class=\"language-cpp\">char c[] = \"c string\";    // C 문자열\nstring s = \"c++ string\"; // C++ 문자열 (NULL전까지만 할당)\nstring s = c;            // C 문자열을 담을 수도 있음 \nstring s(5, '#');        // \"#####\"\n</code></pre>\n</li>\n</ul>\n<h4>문자열 입출력</h4>\n<ul>\n<li><code>cin</code>와 <code>cout</code>, 그리고 <code>getline(cin, str)</code>사용이 편리하다.</li>\n<li>\n<p>printf를 사용해야 하는 경우, <code>str.c_str()</code>을 통해 C 문자열로 변환 후 출력해야 한다.</p>\n<pre><code class=\"language-cpp\">include &#x3C;string>\nstring str = \"hello\";\nprintf(\"%s\", str.c_str());\n</code></pre>\n</li>\n</ul>\n<h4>문자열 연산</h4>\n<ul>\n<li>\n<p>비교: </p>\n<ul>\n<li><code>==</code>와 <code>!=</code>로 같은지 확인할 수 있다.</li>\n<li><code>></code> 또는 <code>&#x3C;</code>로 사전순으로 앞서는지 뒤에 서는지 알아볼 수 있다.</li>\n</ul>\n</li>\n<li>추가: <code>+=</code>와 <code>append</code> 또는 <code>insert</code>를 통해 뒤에 문자열을 추가할 수 있다.</li>\n<li>\n<p>크기: <code>length</code>를 통해 크기를 알아보고, <code>empty</code>를 통해 빈 문자열인지 확인해본다. (단, size는 unsigned 형태이기 때문에 size() - 1와 같은 표현이 불가능함))</p>\n<pre><code class=\"language-cpp\">include &#x3C;string>\nstring str = \"h\";    // h\nstr += \"ello\";       // hello\nstr.append(\"world\"); // hello world\nstr.insert(10, \"!\"); // hello world! (10번째 index에 추가)\n</code></pre>\n</li>\n</ul>\n<h4>문자열 &#x3C;-> 숫자</h4>\n<ul>\n<li>\n<p>문자열 -> 숫자: <code>stoi()</code>, <code>stol</code>, <code>stof</code>, <code>stod</code>를 이용한다.</p>\n<ul>\n<li>0 ~ 9 한 자리수 문자열을 숫자로 변환시에는 <code>c - '0'</code> 도 사용 가능하다.</li>\n</ul>\n</li>\n<li>\n<p>숫자 -> 문자열: <code>to_string()</code>를 이용한다.</p>\n<pre><code class=\"language-cpp\">string str = \"10\";\nint num = stoi(str);   // 10 (기본으로 10진법으로 바꿈)\nnum = stoi(str, 0, 2); // 2 (2진법으로 숫자를 읽어 바꿈)\nnum = stoi(str, 0 16); // 16 (16진법으로 숫자를 읽어 바꿈)\n// 숫자와 혼합된 스트링 변환하기\nstr = \"21 Guns\";\nnum = stoi(str); // 21 (숫자가 있는 부분까지만 읽어 바꿈)\n</code></pre>\n</li>\n</ul>\n<h4>문자열 파싱 (string parsing)</h4>\n<ul>\n<li>\n<p><code>istringstream</code>을 사용하여 string을 표준 입출력처럼 사용할 수가 있다.</p>\n<pre><code class=\"language-cpp\">#include &#x3C;string>\n#include &#x3C;stringstream>\n// 일단 입력된 값을 스트링 형태로 저장\nstring str;\nstring line;\nwhile (cin >> line) s += line;\n// 스트림을 사용하여 문자열 파싱\nint num;\nistringstream sin(s); // 문자열 스트림을 생성\nwhile (getline(sin, num, ',')) {...}; \n// 문자열 스트림의 문자열을 ,로 구분하여 num에 저장\n</code></pre>\n</li>\n</ul>","frontmatter":{"path":"/baekjoon/STL/STL_string","title":"[백준] STL 04. 문자열","date":"2019-01-28","tags":["백준","Cpp","STL"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}