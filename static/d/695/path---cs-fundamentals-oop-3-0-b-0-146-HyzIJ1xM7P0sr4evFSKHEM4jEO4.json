{"data":{"markdownRemark":{"html":"<ul>\n<li><strong>자바 프로그램은 클래스 정의로 시작</strong> 하며, 클래스 내에서 모든 변수나 메소드를 정의한다</li>\n<li>\n<p>실행은 <strong>main() 메소드부터 시작</strong> 한다 (이를 포함한 프로그램을 드라이버 프로그램이라고 함)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 클래스 정의</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyProgram</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 메인 함수로부터 실행이 시작된다</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h3>자바 기본 문법</h3>\n<h4>1. 변수</h4>\n<h3>자바 데이터 타입</h3>\n<h4>1. 기본 데이터 타입</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">종류</th>\n<th align=\"left\">데이터 타입</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">논리</td>\n<td align=\"left\"><strong>boolean</strong> (1 byte)</td>\n</tr>\n<tr>\n<td align=\"left\">문자</td>\n<td align=\"left\"><strong>char</strong> (2 byte, unicode)</td>\n</tr>\n<tr>\n<td align=\"left\">정수</td>\n<td align=\"left\"><strong>byte</strong> (1 byte), <strong>short</strong> (2 byte), <strong>int</strong> (4 byte), <strong>long</strong> (8 byte)</td>\n</tr>\n<tr>\n<td align=\"left\">실수</td>\n<td align=\"left\"><strong>float</strong> (4 byte), <strong>double</strong> (8 byte)</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>\n<p><strong>변수</strong>: 접근 지정자 + 데이터 타입을 명시</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> number <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p><strong>상수</strong>: <code class=\"language-text\">final</code> 키워드를 앞에 붙이고 상수명은 반드시 전체 대문자로 명시</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> MAX <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<h4>2. 레퍼런스 타입</h4>\n<p>자바에서는 포인터를 사용하지 않고 대신 레퍼런스를 사용한다</p>\n<ul>\n<li>\n<p><strong>클래스</strong> 에 대한 <strong>레퍼런스</strong>: 객체 인스턴스를 만들려면 클래스의 레퍼런스 변수를 선언한 후, new 키워드와 함께 클래스의 객체 생성자를 호출해야 함</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">Circle c1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>객체의 치환은 객체가 복사되는 것이 아니며 레퍼런스가 복사된다</li>\n</ul>\n</li>\n<li>\n<p><strong>배열</strong> 에 대한 <strong>레퍼런스</strong>: 배열도 일종의 객체로 관리되기 때문에, 이를 레퍼런스로 참조</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 1차원 배열 레퍼런스 선언 및 생성</span>\n<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 동일한 배열 참조 (하나의 배열을 두 레퍼런스가 참조)</span>\n<span class=\"token keyword\">int</span> otherArr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 2차원 배열 레퍼런스 선언 및 생성</span>\n<span class=\"token keyword\">int</span> matrix<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p><strong>인터페이스</strong> 에 대한 <strong>레퍼런스</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"></code></pre></div>\n</li>\n<li>this 레퍼런스: 현재 객체 자기 자신을 가리킴\n 자기 자신에 대한 레퍼런스\n 같은 클래스 내에서 클래스 멤버, 변수를 접근할 때 객체 이름이\n없으면 묵시적으로 this로 가정\n this의 필요성\n 객체의 멤버 변수와 메소드 변수의 이름이 같은 경우\n 객체 자신을 메소드에 전달 또는 반환할 때</li>\n</ul>\n<h4>객체의 소멸과 Garbage Collection</h4>\n<p>객체 소멸</p>\n<ul>\n<li>new에 의해 생성된 객체에 할당되었던 메모리를 JVM에게\n되돌려 주는 것</li>\n<li>가용 메모리에 포함시킴\n자바는 객체 삭제 기능 없음</li>\n<li>개발자에게는 매우 다행스러운 것</li>\n<li>C/C++에서는 할당받은 객체를 개발자가 프로그램 내에서 삭제해야 함\nGarbage Collection</li>\n<li>객체에 대한 레퍼런스가 없어지면 객체는 가비지(garbage)가 됨</li>\n<li>JVM 의 garbage collector 가 garbage 를 반환\n자동 실행\n JVM 에 포함된 가비지 컬렉터(garbage collector)가 자동으로 실행\n 개발자가 강제로 실행하려는 경우\n System 또는 Runtime 객체의 gc( ) 메소드를 호출한다.\n 그러나~ garbage collection 시점은 JVM 이 전적으로 판단한다.</li>\n</ul>\n<h4>입출력</h4>\n<h4>함수</h4>\n<p>값 전달 &#x3C;-> 레퍼런스 전달 so 배열을 전달해도 값 변화가 전부 반영됨</p>","frontmatter":{"title":"[OOP] 03. 자바 기본 문법","date":"2019-09-24","tags":["Java","객체지향프로그래밍"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/CS_Fundamentals/OOP/3/"}}