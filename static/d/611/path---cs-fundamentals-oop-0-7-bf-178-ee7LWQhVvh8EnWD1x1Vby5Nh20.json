{"data":{"markdownRemark":{"html":"<h3>객체지향 프로그래밍이란 (Object-oriented Programming)</h3>\n<ul>\n<li>\n<p>프로그램이 복잡해질수록 <strong>데이터를 관리하는데 문제</strong> 가 생기기 시작</p>\n</li>\n<li>\n<p>ex. 프로그램 내의 서로 다른 함수가 하나의 데이터를 공유하여 사용해야 되어 전역변수를 사용하는 경우</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// 전역 변수</span>\n<span class=\"token keyword\">int</span> anyoneCanUse<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 전역 변수를 공유하는 함수들</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">function_1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> anyoneCanUse<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">function_2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> anyoneCanUse<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>프로그램이 복잡해지고 동일한 데이터를 접근하는 함수들이 많아질수록, 점점 그 데이터가 올바르게 조작되고 있는지를 관리하기가 힘들어진다. </li>\n<li>특히, 의도와 다르게 조작될 확률도 커지기 때문에 프로그램에 에러가 발생하는 큰 문제가 될 수 있다. </li>\n</ul>\n</li>\n<li>\n<p>그래서 구조체를 만들 듯이, 데이터와 함수들을 객체(Object) 단위로 묶어 관리하고자 함</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"></code></pre></div>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#### 캡슐화 (encapsulation)\n캡슐처럼 데이터와 함수들을 하나의 객체로 묶어 관리함으로써 해당 객체 이외의 조작으로부터 데이터를 보호하는 것\n- 클래스를 사용할 경우, 객체의 틀을 이루어 캡슐화를 이루며 클래스 내의 접근 한정자들을 통해 정보를 은닉(data hiding)이 가능\n\n#### 상속 (inheritance)\n다른 객체를 기반으로 객체를 만드는 것\n- class-based inheritance: 다른 클래스를 기반으로 클래스를 정의\n- prototype-based inheritance: 다른 객체를 기반으로 객체를 정의\n\n#### 다형성 (polymorphism)\n동일한 이름의 다양한 형태의 객체를 만들 수 있는 것\n\n### 자바 (Java) 언어\n__클래스 기반의 객체지향 프로그래밍 언어__\n- __클래스__ (class): 객체를 쉽게 만들기 위해 정의한 템플릿\n- 대다수 메모리 처리 작업이 자동으로 이루어짐\n  -&gt; garbage collector가 알아서 함\n- 메모리 포인터를 사용하지 않기에 위험성 제거\n- 분산시스템(distributed system) 지원\n  - 다른 컴퓨터와의 네트워크 연결이 중요해짐\n  - 주요한 프로토콜(http, ftp) 지원\n  - socket 통신 (tcp/ip)\n  - multi-threaded 지원 (다중 쓰레드 프로그램을 쉽게 만들 수 있다)\n  - dynamic: 동적으로 사용하는 지원들을 변화시켜서 작동할 수 있다\n- * architecture neutral\n    - write once, run anywhere\n    - 자바 프로그램-&gt; 컴파일 (javac) -&gt; 바이트 코드\n    - java virtual macine (jvm)이 바이트코드를 해석&amp;실행\n    - 같은 바이트 코드가 여러 플랫폼에서 실행가능\n      - bcuz 각 플랫폼에서 맞는 virtual machine을 가지고 있음\n\n자바 프로그램 구성\n- 여러 class로 구성\n- 하나의 class에는 여러 methods를 가짐\n- 여러 method는 여러 program 선언(statements)로 이루어짐\n- main함수로부터 시작함</code></pre></div>","frontmatter":{"title":"[객체지향 프로그래밍] 01. OOP개요와 자바 언어","date":"2019-09-23","tags":["Java","객체지향프로그래밍"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/CS_Fundamentals/OOP/0/"}}