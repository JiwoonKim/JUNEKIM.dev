{"data":{"markdownRemark":{"html":"<blockquote>\n<p>Standard Template Library (STL)는 알고리즘, 컨테이너, 함수, 이터레이터로 이루어져 있으며 그 중 컨테이너를 정리</p>\n</blockquote>\n<h3>컨테이너 (Container)</h3>\n<p>Pair, Tuple, Vector, Deque, List, Set, Map, Stack, Queue, Priority Queue, Bitset 등</p>\n<ul>\n<li><a href=\"#%EC%88%9C%EC%B0%A8-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-sequential-container\">순차 컨테이너</a>: vector, list, deque</li>\n<li><a href=\"#%EC%97%B0%EA%B4%80-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-associative-containers\">연관 컨테이너</a>: set, map</li>\n<li><a href=\"#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%96%B4%EB%8C%91%ED%84%B0-container-adaptors\">컨테이너 어댑터</a>: stack, queue, priority_queue</li>\n<li>그외: pair, tuple, bitset</li>\n</ul>\n<h4># Pair</h4>\n<ul>\n<li>두 자료 T1과 T2를 묶어서 사용한다.</li>\n<li>Pair는 <utility> 헤더파일에 정의되지만, <algorithm>이나 <vector> 헤더파일에도 포함되어 있기 때문에 일반적으로 이 둘을 사용한다.</li>\n<li>\n<p><strong>선언</strong>: <code class=\"language-text\">make_pair</code> 또는 생성자를 이용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span>\npair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> p<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 선언이 따로 없으면 0과 0으로 초기화</span>\np <span class=\"token operator\">=</span> <span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// make_pair를 통해 선언과 값 설정</span>\np <span class=\"token operator\">=</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 생성자를 통해 선언과 값 설정</span>\npair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 생성자를 이용한 또 다른 방법</span></code></pre></div>\n</li>\n<li>\n<p><strong>접근</strong>: <code class=\"language-text\">pair.first</code>와 <code class=\"language-text\">pair.second</code> 또는 <code class=\"language-text\">tie</code>를 이용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">p<span class=\"token punctuation\">.</span>first <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\np<span class=\"token punctuation\">.</span>second <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">tie</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n<span class=\"token function\">tie</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 순서 바꿈</span></code></pre></div>\n</li>\n</ul>\n<h4># Tuple</h4>\n<ul>\n<li>둘 이상의 여러 개의 자료를 묶어 사용할 수 있다.</li>\n<li>\n<p><strong>선언</strong>: <code class=\"language-text\">make_tuple</code>을 이용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;tuple></span></span>\ntuple<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> t1 <span class=\"token operator\">=</span> <span class=\"token function\">make_tuple</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p><strong>접근</strong>: <code class=\"language-text\">get&lt;&gt;</code> 또는 <code class=\"language-text\">tie</code>를 이용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">cout <span class=\"token operator\">&lt;&lt;</span> get<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// get을 이용하여 접근</span>\n<span class=\"token function\">tie</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> t1<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// tie를 통해 각 index에 접근</span>\n<span class=\"token function\">tie</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> ignore<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> t1  <span class=\"token comment\">// tie에 ignore를 함께 사용하여 특정 index에 접근</span></code></pre></div>\n</li>\n</ul>\n<h3>순차 컨테이너 (Sequential Container)</h3>\n<p>순서가 있는 컨테이너로 vector, list, deque, array, forward_list가 존재한다. </p>\n<h4># Vector</h4>\n<ul>\n<li>길이를 변경할 수 있는 배열이다.</li>\n<li>\n<p><strong>선언</strong>: 길이를 직접 지정하거나, 특정 값으로 초기화하는 옵션도 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 길이가 0인 벡터 선언</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 길이가 10인 벡터 선언</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 길이가 15이고 1로 모두 초기화된 벡터 선언</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// list를 이용한 벡터 선언</span></code></pre></div>\n</li>\n<li><strong>접근</strong>: <code class=\"language-text\">front()</code>와 <code class=\"language-text\">back()</code>, 그리고 <code class=\"language-text\">[]</code> 또는 iterator (<code class=\"language-text\">*v.begin()</code>, <code class=\"language-text\">*v.end()</code>)를 이용한다.</li>\n<li>\n<p><strong>삽입</strong>: <code class=\"language-text\">push_back()</code>을 통해 가장 뒤쪽에 삽입, <code class=\"language-text\">insert()</code>를 통해 원하는 자리에 원소를 삽입한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">v<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> 인덱스<span class=\"token punctuation\">,</span> 값<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 인덱스에 값 추가 (이터레이터 사용)</span>\nv<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">,</span> 개수<span class=\"token punctuation\">,</span> 값<span class=\"token punctuation\">)</span>            <span class=\"token comment\">// 이터레이터 자리에 값 개수만큼 추가</span>\nv<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 이터레이터에 v 벡터의 값들을 모두 삽입</span></code></pre></div>\n</li>\n<li>\n<p><strong>삭제</strong>: <code class=\"language-text\">pop_back()</code>을 통해 가장 뒤쪽을 삭제, <code class=\"language-text\">erase()</code>를 통해 원하는 자리의 원소를 제거, <code class=\"language-text\">clear()</code>로 모든 원소 삭제한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">v<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> 인덱스<span class=\"token punctuation\">)</span>                    <span class=\"token comment\">// 인덱스 + 1 자리 제거</span>\nv<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> 인덱스<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> 끝자리<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 인덱스 + 1부터 끝 바로 전까지 제거</span></code></pre></div>\n</li>\n<li><strong>크기</strong>: <code class=\"language-text\">size()</code>를 통해 벡터의 크기를 알아보고, <code class=\"language-text\">empty()</code>를 통해 벡터가 비었는지 안 비었는지를 알아본다.</li>\n<li>\n<p><strong>순회</strong>: 인덱스 (size와 <code class=\"language-text\">[]</code>의 조합) 또는 iterator (<code class=\"language-text\">begin</code> &#x26; <code class=\"language-text\">end</code>의 조합)을 이용한 다양한 방식이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// 순회접근</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>x <span class=\"token operator\">:</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    x<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 인덱스 접근</span>\n    <span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 값 접근</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 이터레이터 사용하여 순회 접근</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator it <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    it <span class=\"token operator\">-</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 인덱스 번호 접근</span>\n    <span class=\"token operator\">*</span>it<span class=\"token punctuation\">;</span>            <span class=\"token comment\">// 원소 자체의 값에 접근</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>cf) vector가 pair 자료로 이루어지는 경우, <code class=\"language-text\">emplace_back</code>을 <code class=\"language-text\">push_back</code>과 동일하게 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">vector<span class=\"token operator\">&lt;</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> a<span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<h4># Deque</h4>\n<ul>\n<li>double-ended queue의 약자로 양쪽으로 삽입과 제거가 가능한 큐이다.</li>\n<li><strong>선언</strong>: <deque> 헤더파일을 포함시킨 후에 deque&#x3C;자료> d를 통해 선언한다.</li>\n<li><strong>삽입</strong>: <code class=\"language-text\">push_front</code>와 <code class=\"language-text\">push_back</code>을 이용한다.</li>\n<li><strong>삭제</strong>: <code class=\"language-text\">pop_front</code>와 <code class=\"language-text\">pop_back</code>을 이용한다.</li>\n</ul>\n<h4># List</h4>\n<ul>\n<li>이중 연결 리스트(Doubly-linked list)를 의미한다.</li>\n<li>\n<p>사실 프로그래밍 대회에서는 잘 사용하지 않는 컨테이너에 해당된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// 리스트 선언과 초기화</span>\nlist<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> l <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li><strong>삽입</strong>: <code class=\"language-text\">push_back</code>과 <code class=\"language-text\">insert</code>을 이용한다: O(1)</li>\n<li><strong>삭제</strong>: <code class=\"language-text\">erase</code>를  이용한다: O(1)</li>\n<li>\n<p><strong>정렬</strong>: list 자체에 내장된 <code class=\"language-text\">sort</code>함수를 사용해야 한다 (&#x3C; algorithm>에 포함된 sort 함수를 사용하지 못함)</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">l<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                      <span class=\"token comment\">// 오름차순으로 정렬 {-2, -1, 0, 1, 2}</span>\nl<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>greater<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 알고리즘 greater를 사용하여 내림차순으로 정렬</span>\nl<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>u<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    <span class=\"token comment\">// compare 함수를 사용하여 절대값 기준으로 정렬</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nl<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// 현재 상태를 거꾸로 뒤집는다</span></code></pre></div>\n</li>\n</ul>\n<h3>연관 컨테이너 (Associative Containers)</h3>\n<p><strong>순서가 없는 자료구조</strong> 들로 set, multiset, map, multimap이 존재한다.</p>\n<ul>\n<li>Binary Search Tree로 구현이 되어 있어 <strong>삽입, 삭제, 탐색이 모두 O(logN)</strong> 이 걸린다.</li>\n</ul>\n<h4># Set</h4>\n<ul>\n<li>집합을 나타낼 때 효과적인 자료구조이다. </li>\n<li>\n<p><strong>선언</strong>: <set> 헤더파일을 포함시킨 후에 set&#x3C;자료> s를 통해 선언한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span>\nset<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span>\nset<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 중복된 값을 인정하지 않기에 {1, 2, 3}으로만 구성</span></code></pre></div>\n</li>\n<li><strong>접근</strong>: 순서가 없기 때문에 []나 begin() + i와 같은 표현이 불가능하며, 대신 iterator를 이용한다.</li>\n<li>\n<p><strong>삽입</strong>: <code class=\"language-text\">insert</code>를 이용하여 내부가 정렬된 상태로 유지된다 (중복된 값은 허용되지 않기에 삽입 성공 실패 여부와 더불어 삽입 위치를 return한다)</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// 삽입 (정렬된 상태를 유지한다)</span>\npair<span class=\"token operator\">&lt;</span>set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token operator\">></span> result <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 삽입위치와 성공여부를 return</span></code></pre></div>\n</li>\n<li>\n<p><strong>삭제</strong>: <code class=\"language-text\">erase</code>를 이용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// 삭제 (이터레이터로 접근하여 삭제)</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 첫 번째 인덱스 삭제</span></code></pre></div>\n</li>\n<li><strong>크기</strong>: <code class=\"language-text\">size</code>를 이용한다.</li>\n<li>\n<p><strong>탐색</strong>: <code class=\"language-text\">find</code>를 사용하여 set에 어떤 값이 들어가있는지 없는지, 있다면 위치가 어디인지를 알 수 있고, <code class=\"language-text\">count</code>를 이용하는 방법도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 없기 때문에 end()를 호출</span>\n<span class=\"token comment\">// 일일히 find()를 하기보다는 수가 있는지 없는지 (1 or 0) 확인이 효율적</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    s<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      \n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><strong>순회</strong>: iterator와 begin &#x26; end 조합을 사용한다 (순서가 없기 때문에 begin() + i와 같은 표현은 불가능)</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// 순회접근 (it++ 연산이 O(logN)으로 총 O(NlogN)이 걸림)</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token operator\">*</span>it<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> x <span class=\"token operator\">:</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h4># Multiset</h4>\n<ul>\n<li>set과 완벽하게 동일하나 같은 수 여러 개를 저장할 수 있는 점이 추가된 자료구조이다.</li>\n</ul>\n<h4># Map</h4>\n<ul>\n<li>key와 value로 이루어진 자료구조이다.</li>\n<li>\n<p><strong>선언</strong>: <map> 헤더파일을 포함시킨 후에 map&#x3C;자료> m를 통해 선언한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span>\nmap<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> m<span class=\"token punctuation\">;</span>\nmap<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span> m <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"슬라임\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"드래곤\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li><strong>삽입</strong>: <code class=\"language-text\">[key값]</code>을 이용하여 value를 쌍으로 삽입한다.</li>\n<li><strong>삭제</strong>: <code class=\"language-text\">erase(key값)</code>을 이용한다</li>\n<li><strong>크기</strong>: <code class=\"language-text\">size</code>를 이용한다.</li>\n<li><strong>접근</strong>: <code class=\"language-text\">[key값]</code>을 이용하여 접근할 수 있다 (단, 없는 경우에는 key값을 생성하는 문제 조심!) pair형태처럼 first와 second로도 접근 가능하다.</li>\n<li>\n<p><strong>탐색</strong>: 자료가 있는지 없는지 확인하는 경우에는 [key값]보다는 <code class=\"language-text\">count</code>를 사용하는 방법이 더 알맞다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// 접근</span>\ncout <span class=\"token operator\">&lt;&lt;</span> m<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"슬라임\"이 출력</span>\n              <span class=\"token comment\">// 존재하지 않는 경우 0을 반환한다 (트리구조이기에 O(logN)이 걸림)</span>\n<span class=\"token comment\">// 순회 접근</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 없는 경우에는 key값을 생성하는 문제가 생김 </span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 자료가 있는지 없는지 체크는 이 방법이 더 효율적</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h3>컨테이너 어댑터 (Container Adaptors)</h3>\n<p><strong>순차 컨테이너를 변형한 자료구조</strong> 로 stack, queue, priority_queue가 존재한다.</p>\n<h4># Stack</h4>\n<ul>\n<li>한쪽으로만 삽입과 삭제가 가능한 자료구조이다. </li>\n<li>기본적으로, deque를 형태로 구현되었으나, list 형태를 명시하여 구현도 가능하다.</li>\n<li><strong>선언</strong>: <stack> 헤더파일을 포함시킨 후에 stack&#x3C;자료> s를 통해 선언한다.</li>\n<li><strong>접근</strong>: <code class=\"language-text\">top</code>을 사용하여 O(1)로 연산이 가능하다.</li>\n<li><strong>삽입</strong> &#x26; <strong>삭제</strong>: <code class=\"language-text\">push</code>와 <code class=\"language-text\">pop</code>를 사용하여 O(1)로 연산이 가능하다.</li>\n<li>\n<p><strong>크기</strong>: <code class=\"language-text\">size</code>를 통해 크기를 알아보고, <code class=\"language-text\">empty</code>를 통해 스택이 비었는지 안 비었는지를 알아본다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stack></span></span>\nstack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 차례대로 쌓이게끔 삽입</span>\ncout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// 제일 위의 데이터를 출력</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                         <span class=\"token comment\">// 제일 위의 데이터를 삭제 </span></code></pre></div>\n</li>\n<li>pair 자료형을 사용시 emplace를 사용할 수도 있다.</li>\n</ul>\n<h4># Queue</h4>\n<ul>\n<li>한쪽으로 삽입하고 반대쪽으로 삭제가 가능한 자료구조이다. </li>\n<li>기본적으로, deque를 형태로 구현되었으나, list 형태를 명시하여 구현도 가능하다.</li>\n<li><strong>선언</strong>: <queue> 헤더파일을 포함시킨 후에 queue&#x3C;자료> q를 통해 선언한다.</li>\n<li><strong>접근</strong>: <code class=\"language-text\">front</code>와 <code class=\"language-text\">back</code>을 사용하여 O(1)로 연산이 가능하다.</li>\n<li><strong>삽입</strong> &#x26; <strong>삭제</strong>: <code class=\"language-text\">push</code>와 <code class=\"language-text\">pop</code>를 사용하여 O(1)로 연산이 가능하다.</li>\n<li>\n<p><strong>크기</strong>: <code class=\"language-text\">size</code>를 통해 크기를 알아보고, <code class=\"language-text\">empty</code>를 통해 스택이 비었는지 안 비었는지를 알아본다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span>\nqueue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> q<span class=\"token punctuation\">;</span>\nq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 차례대로 쌓이게끔 삽입</span>\ncout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" : \"</span> <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 제일 앞과 뒤의 데이터를 출력</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                                <span class=\"token comment\">// 제일 앞의 데이터를 삭제 </span></code></pre></div>\n</li>\n<li>pair 자료형을 사용시 emplace를 사용할 수도 있다.</li>\n</ul>\n<h4># Priority Queue</h4>\n<ul>\n<li>큐와 똑같지만 가장 우선순위가 제일 높은 것(ex.숫자가 가장 큰 정수)이 먼저 나오는 자료구조이다.</li>\n<li>대표적으로 <strong>priority heap (최대힙)의 형태로 구현</strong> 된다.</li>\n<li>삽입 &#x26; 삭제: <code class=\"language-text\">push</code>와 <code class=\"language-text\">pop</code>을 이용한다.</li>\n<li>접근: 큐이지만 <code class=\"language-text\">top</code>을 사용하여 가장 큰 수가 위로 올라온다.</li>\n<li>\n<p><strong>최대힙</strong>: 내림차순으로 정렬되어 삽입이 되고, 큰 순서대로 나온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 벡터에 있는 원소 우선순위 큐에도 삽입 (최대힙)</span>\npriority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> q1<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">:</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    q1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {3, 2, 1} 큰 순서대로 정렬이 됨</span>\n<span class=\"token punctuation\">}</span> </code></pre></div>\n</li>\n<li>\n<p><strong>최소힙</strong>: <code class=\"language-text\">priority_queue&lt;자료형, vector&lt;자료형&gt;, greater&lt;자료형&gt;&gt;</code>으로 선언하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// 작은 순서대로 정렬이 됨 (최소힙)</span>\npriority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> greater<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> q2<span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">:</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    q2<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h4># Bitset</h4>\n<ul>\n<li>vector<bool>와 같은 형태의 자료구조이다.</li>\n<li><strong>접근</strong>: <code class=\"language-text\">[]</code> 또는 <code class=\"language-text\">test</code>를 이용한다.</li>\n<li>\n<p><strong>값 바꾸기</strong>: </p>\n<ul>\n<li><code class=\"language-text\">set</code>으로 1로 바꾸기</li>\n<li><code class=\"language-text\">reset</code>으로 0으로 바꾸기</li>\n<li><code class=\"language-text\">flip</code>으로 현재 인덱스의 값을 뒤집기</li>\n</ul>\n</li>\n<li><strong>값 확인</strong>: <code class=\"language-text\">all</code>로 모든 bit가 1인지를 확인하고, <code class=\"language-text\">any</code>로 1인 bit가 하나라도 존재하는지를 확인하고, <code class=\"language-text\">none</code>으로 모든 bit가 0인지를 확인할 수 있다.</li>\n<li><strong>개수 세기</strong>: <code class=\"language-text\">count</code>로 1인 bit의 개수를 센다.</li>\n<li>\n<p><strong>bit 연산</strong>: <code class=\"language-text\">&amp;</code>, <code class=\"language-text\">|</code>, <code class=\"language-text\">^</code>, <code class=\"language-text\">~</code>, <code class=\"language-text\">&lt;&lt;</code>, <code class=\"language-text\">&gt;&gt;</code>의 연산이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">bitset<span class=\"token operator\">&lt;</span><span class=\"token number\">8</span><span class=\"token operator\">></span> b1 <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0, 0, 0, 0, 0, 0, 0, 0</span>\nbitset<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token operator\">></span> <span class=\"token function\">b2</span><span class=\"token punctuation\">(</span><span class=\"token number\">88</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0, 0, 0, 1, 0, 1, 1, 0, 0, 0</span>\nbitset<span class=\"token operator\">&lt;</span><span class=\"token number\">8</span><span class=\"token operator\">></span> <span class=\"token function\">b3</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10110\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0, 0, 0, 1, 0, 1, 1, 0</span>\n<span class=\"token comment\">// bit 연산</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>b1 <span class=\"token operator\">&amp;</span> b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// AND 연산</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>b1 <span class=\"token operator\">|</span> b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OR 연산</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>b1 <span class=\"token operator\">^</span> b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// XOR 연산</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// NOT 연산</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>b1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SHIFT LEFT 연산</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>b1 <span class=\"token operator\">>></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SHIFT RIGHT 연산</span></code></pre></div>\n</li>\n</ul>","frontmatter":{"title":"[백준] STL 03. 컨테이너","date":"2019-01-27","tags":["백준","Cpp","STL"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/Baekjoon/0_STL/3_stl_containers/"}}