{"data":{"markdownRemark":{"html":"<h3>추상화 (Abstraction)</h3>\n<p>내부 정보를 숨기고서 사용자에게 필요한 정보만을 제공하는 것</p>\n<ul>\n<li>추상 클래스</li>\n<li>인터페이스</li>\n</ul>\n<h3>추상 클래스 (Abstract Class)</h3>\n<p><strong>자식 클래스들의 공통 분모</strong> 를 추상적으로 정의한 클래스</p>\n<ul>\n<li>\n<p>추상 클래스에서는 <strong>추상 메소드를 사용하여 선언만</strong> 하고, 상속을 통해 서브 클래스에서 이를 <strong>오버라이딩함으로써 구체적인 구현 방법을 정의</strong> 한다.</p>\n<ul>\n<li><strong>추상 메소드</strong> (<strong>abstract method</strong>): 선언되어 있으나 구현되어 있지 않은 메소드</li>\n</ul>\n</li>\n<li>\n<p>실제로 객체를 만드는 용도가 아니기 때문에, 추상 클래스는 <strong>객체를 만들 수 없다</strong> (컴파일 오류만 남)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 추상 클래스: 포켓몬 </span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Pokemon</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 추상 클래스를 상속받는 실체 클래스들: 피카츄와 파이리</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Pikachu</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Pokemon</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> POKEDEX <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Charmander</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Pokemon</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> POKEDEX <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>선언: <code class=\"language-text\">abstract</code> 접근 지정자 + 리턴 타입 + 이름</li>\n<li>추상 메소드를 하나라도 가지고 있거나, 추상 클래스로 선언된 경우 모두 추상 클래스로 인정된다</li>\n</ul>\n</li>\n</ul>\n<h3>인터페이스 (Interface)</h3>\n<p>서로 관계가 없는 객체들이 상호 작용을 하기 위해서 사용하는 장치나 시스템\nused to specify a behavior that classes must implement\nInterfaces are used to encode similarities which the classes of various types share, but do not necessarily constitute a class relationship. For instance, a human and a parrot can both whistle; however, it would not make sense to represent Humans and Parrots as subclasses of a Whistler class. Rather they would most likely be subclasses of an Animal class (likely with intermediate classes), but both would implement the Whistler interface. </p>\n<ul>\n<li></li>\n<li>\n<p><strong>상수와 추상 메소드로만</strong> 이루어진 <strong>완전한 추상 클래스</strong> 형태이며, <strong>다중 상속을 지원</strong> 한다 (자바의 클래스는 다중 상속이 불가능하지만, 인터페이스를 이용해서 구현이 가능)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 전자기구를 </span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">pocketball</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">hit</span><span class=\"token punctuation\">(</span>Pokemon p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>선언: 접근 지정자 + <code class=\"language-text\">interface</code> + 이름</li>\n<li>모든 변수 및 메소드가 상수 및 추상 메소드이므로 <code class=\"language-text\">public static final</code>와 <code class=\"language-text\">public abstract</code> 생략 가능</li>\n</ul>\n</li>\n<li>\n<p>주로 한 클래스가 다른 클래스</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Trainer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">throwPokeball</span><span class=\"token punctuation\">(</span>Pokemon P<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>추상 클래스와 마찬가지로 상속을 통한 계층 구조를 만드는 목적으로 만들어졌기 때문에 객체를 생성할 수 없다 (단, 레퍼런스 변수 타입으로는 사용 가능)</li>\n</ul>\n<h4>인터페이스가 필요한 이유</h4>\n<ul>\n<li>\n<p>주로 한 클래스가 다른 클래스를\nZooKeeper클래스가 동물들의 종류에 의존적인 클래스에서 동물들의 종류와 상관없는 독립적인 클래스가 되었다는 점이다. 바로 이 점이 인터페이스의 핵심이다.\n이번에는 좀 더 개념적으로 인터페이스를 생각해 보자.\n아마도 여러분은 컴퓨터의 USB 포트에 대해서 알고 있을 것이다. USB 포트에 연결할 수 있는 기기는 하드디스크, 메모리스틱, 디지털카메라 등등 무척 많다.\n바로 이 USB포트가 물리적 세계의 인터페이스라고 할 수 있다.\nUSB포트의 규격만 알면 어떤 기기도 만들 수 있다. 또 컴퓨터는 USB 포트만 제공하고 어떤 기기가 만들어지는 지 신경쓸 필요가 없다. 바로 이 점이 인터페이스의 핵심이다.\n위에서 만든 사육사(ZooKeeper)가 어떤 육식동물(Tiger, Lion...)이던지 상관하지 않고 먹이를 주는 것처럼.. ^^</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// </span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Trainer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">useStone</span><span class=\"token punctuation\">(</span>Pikachu p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"use thunderstone\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">useStone</span><span class=\"token punctuation\">(</span>Charmander p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"use firestone\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> 수 없이 많은 포켓몬들에 대해 <span class=\"token function\">useStone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 정의 <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ElectricType</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span> String <span class=\"token function\">matchingStone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Pikachu</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Pokemon</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ElectricType</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span> String <span class=\"token function\">matchingStone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> evolutionStone<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Trainer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">useStone</span><span class=\"token punctuation\">(</span>ElectricType p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"use thunderstone\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Type</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span> String <span class=\"token function\">getStone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Fire</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Flying</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Pikachu</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Pokemon</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Electric</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Charizard</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Pokemon</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Fire</span><span class=\"token punctuation\">,</span> Flying <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Trainor</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">useStone</span><span class=\"token punctuation\">(</span>Electric p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"use thunderstone\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h4>인터페이스 상속 및 구현</h4>\n<ul>\n<li>인터페이스를 상속한 클래스를 정의함으로써 해당 클래스의 객체를 생성하여 사용할 수 있다.</li>\n<li>\n<p>상속된 클래스에서는 인터페이스의 추상 메소드 구현을 정의 (오버라이딩) 해야 사용이 가능하다 </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"></code></pre></div>\n</li>\n</ul>\n<h4>추상 클래스와 인터페이스 비교</h4>\n<ul>\n<li>추상 클래스: 일반 메소드 포함 가능, 상수, 변수 필드 포함 가능, 모든 서브 클래스에 공통된 메소드가 있는 경우, 추상 클래스가 적합</li>\n<li>인터페이스: 모든 메소드가 추상 메소드, 상수 필드만 포함 가능, 다중 상속 지원</li>\n</ul>\n<p>When we talk about abstract classes we are defining characteristics of an object type; specifying what an object is.\nWhen we talk about an interface and define capabilities that we promise to provide, we are talking about establishing a contract about what the object can do.</p>\n<p>Consider using abstract classes if :\nYou want to share code among several closely related classes.\nYou expect that classes that extend your abstract class have many common methods or fields, or require access modifiers other than public (such as protected and private).\nYou want to declare non-static or non-final fields.\nConsider using interfaces if :\nYou expect that unrelated classes would implement your interface. For example,many unrelated objects can implement Serializable interface.\nYou want to specify the behaviour of a particular data type, but not concerned about who implements its behaviour.\nYou want to take advantage of multiple inheritance of type.</p>\n<h3>인터페이스 레퍼런스</h3>\n<ul>\n<li>추상 클래스와 마찬가지로 상속을 통한 계층 구조를 만드는 목적으로 만들어졌기 때문에 객체를 생성할 수 없다</li>\n<li>\n<p>레퍼런스 변수 타입으로는 사용이 가능하다 </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"></code></pre></div>\n</li>\n</ul>","frontmatter":{"title":"[OOP] 06. 추상 클래스와 인터페이스","date":"2019-10-01","tags":["Java","객체지향프로그래밍"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/CS_Fundamentals/OOP/6/"}}