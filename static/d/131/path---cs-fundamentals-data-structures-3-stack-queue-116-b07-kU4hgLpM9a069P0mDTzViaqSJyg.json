{"data":{"markdownRemark":{"html":"<blockquote>\n<p>특정한 순서로 자료를 저장하는 스택과 큐 소개</p>\n</blockquote>\n<h3>스택과 큐</h3>\n<p>동일한 데이터 타입을 <strong>특정한 순서</strong> 로 저장하는 자료구조들</p>\n<img src=\"/3_stack_queue-6d48eda2f8d2fee4db6fa66b636439b8.png\" width=100%>\n<ul>\n<li>\n<p><strong>특정한 순서</strong> 를 <strong>기억해야 되는 경우</strong> 에 주로 사용된다.</p>\n<ul>\n<li>특히 <strong>제일 최근에 저장</strong> 하거나 <strong>마지막에 저장한 자료</strong> 에 접근하는데 매우 유용하다.</li>\n</ul>\n</li>\n<li><strong>배열</strong> 또는 <strong>연결 리스트</strong> 를 통해 구현이 가능하다.</li>\n</ul>\n<h3>스택 (Stack)</h3>\n<p>동일한 데이터 타입을 가장 최근 순서대로 (LIFO) 저장하는 자료구조</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// 스택 정의</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>                    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> stackArr<span class=\"token punctuation\">;</span>              <span class=\"token keyword\">int</span> <span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        size_t size<span class=\"token punctuation\">;</span>                    <span class=\"token keyword\">return</span> stackArr<span class=\"token punctuation\">[</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        size_t capacity<span class=\"token punctuation\">;</span>            <span class=\"token punctuation\">}</span>\n                                    <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                        stackArr<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n                                        size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                                    <span class=\"token punctuation\">}</span>\n                                    <span class=\"token keyword\">void</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                        size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                                    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><strong>LIFO</strong> (Last in First Out): <strong>가장 최근 순서</strong> 를 기억하는데 주로 사용된다</li>\n<li>\n<p>맨 위 <strong>top</strong> 데이터 값만 삽입, 삭제, 접근 등의 <strong>연산이 가능</strong> 하다: O(1)</p>\n<ul>\n<li>맨 위의 데이터에 대해 <code class=\"language-text\">push</code>, <code class=\"language-text\">pop</code>, <code class=\"language-text\">top</code> 연산이 가능하다.</li>\n<li>그 외의 데이터의 경우에는 위에서부터의 데이터를 차례대로 빼내어 따로 저장한 후 다시 삽입해주어야만 한다. 즉, 그 외의 데이터에 대한 연산은 탐색이 필요하므로 O(n)의 시간과 추가적인 공간이 필요하다.</li>\n</ul>\n</li>\n</ul>\n<h4>스택은 어디에 사용되는가</h4>\n<p>스택은 가장 최근 순서를 기억하는데 효율적인 구조이기 때문에 다음과 같은 목적으로 주로 사용되고 있다.</p>\n<ol>\n<li>\n<p><strong>백트래킹</strong>: 이전상태를 기록하고 다시 추적하여 되돌아가는데 사용</p>\n<ul>\n<li><strong>호출 스택</strong> (<strong>call stack</strong>) 구현: 함수 호출 순서를 기록하여 함수가 종료되면 다시 이전 함수로 되돌아갈 수 있게끔 한다 (특히, 재귀함수를 사용할 때 유용)</li>\n<li><strong>웹 브라우저 방문기록</strong>: 웹 브라우저에서 이전 페이지로 돌아가거나 (<strong>뒤로가기</strong>), 다시 다음 페이지로 넘어가기 (앞으로 가기)</li>\n<li><strong>실행취소</strong> (<strong>undo</strong>): 프로그램의 특정 실행 취소 또는 다시 실행 (redo)</li>\n<li><strong>깊이 우선 탐색</strong> (<strong>DFS</strong>): 그래프를 깊이 우선으로 탐색할 때, 자식 노드 방문 이후 부모 노드로 되돌아와야 하기 때문에 부모 노드들 기록한다 (명시적으로 스택을 선언하거나 재귀함수를 통해 호출 스택을 사용할 수도 있다)</li>\n</ul>\n</li>\n<li>\n<p><strong>수식 검사</strong> (<strong>expression evaluation</strong>): 수식에서 특정한 짝들을 맞추거나 대칭을 이루어지는지 검사하는데 사용</p>\n<ul>\n<li><strong>짝 맞추기</strong> (ex. <strong>괄호 체크</strong>): 샌드위치와 같은 대칭을 이루는 식에서 특정 짝들을 맞추는데 유용하다</li>\n<li><strong>계산기</strong>: 전기, 중위, 후위표기법 수식 계산하기</li>\n</ul>\n</li>\n<li>\n<p><strong>순서 바꾸기</strong>: 간혹 주어진 것들의 순서를 특정한 방식으로 바꾸는데도 사용된다</p>\n<ul>\n<li><strong>거꾸로 뒤집기</strong> (reverse), <strong>후위표기법/전위표기법 변환</strong> </li>\n</ul>\n</li>\n</ol>\n<h3>큐 (Queue)</h3>\n<p>동일한 데이터 타입을 가장 오래된 순서대로 (FIFO) 저장하는 자료구조</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// 큐 정의</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Queue</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>                    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> queueArr<span class=\"token punctuation\">;</span>              <span class=\"token keyword\">int</span> <span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> front<span class=\"token punctuation\">,</span> back<span class=\"token punctuation\">;</span>                <span class=\"token keyword\">return</span> queueArr<span class=\"token punctuation\">[</span>front<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        size_t size                 <span class=\"token punctuation\">}</span>\n        size_t capacity<span class=\"token punctuation\">;</span>            <span class=\"token keyword\">int</span> <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                        <span class=\"token keyword\">return</span> queueArr<span class=\"token punctuation\">[</span>back<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                                    <span class=\"token punctuation\">}</span>\n                                    <span class=\"token keyword\">void</span> <span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                        stackArr<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n                                        size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                                    <span class=\"token punctuation\">}</span>\n                                    <span class=\"token keyword\">void</span> <span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                        size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                                    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><strong>FIFO</strong> (First in First Out): <strong>가장 오래된 순서</strong> 를 기억하는데 주로 사용된다</li>\n<li>\n<p>맨 앞 <strong>front</strong> 와 <strong>back</strong> 데이터 값만 삽입, 삭제, 접근 등의 <strong>연산이 가능</strong> 하다: O(1)</p>\n<ul>\n<li><strong>맨 앞</strong> 의 데이터에 대해 <code class=\"language-text\">dequeue</code>과 <code class=\"language-text\">front</code> 연산이 가능하다.</li>\n<li><strong>맨 뒤</strong> 의 데이터에 대해 <code class=\"language-text\">enqueue</code>과 <code class=\"language-text\">back</code> 연산이 가능하다.</li>\n<li>그 외의 데이터의 경우에는 스택과 마찬가지로 차례대로 빼내어 다시 저장한 후 다시 삽입해야 되어 O(n)의 시간과 추가적인 공간이 필요하다.</li>\n</ul>\n</li>\n</ul>\n<h4>큐는 어디에 사용되는가</h4>\n<p>큐는 <strong>입력 순서대로 실행</strong> 하는데 효율적인 구조이기 때문에 우선순위가 같은 작업을 순서대로 실행하거나 우선순위 순서대로 작업을 실행하기 위해 대기열로 기록하여 사용하는 목적으로 사용된다.</p>\n<ul>\n<li><strong>작업 스케줄링</strong>: CPU 스케줄링, 하드디스크 스케줄링, 인쇄 및 다른 IO 대기열, 웹 서버 요청 대기열 등 동일한 자원을 차례대로 분배하기 위해 사용된다</li>\n<li><strong>너비 우선 탐색</strong> (<strong>BFS</strong>): 그래프를 너비 우선으로 탐색할 때, 형제들을 차례대로 방문해야 하므로, 다음으로 방문해야 할 형제 노드들을 기록해 놓는다 (명시적으로 큐를 선언하여 사용한다)</li>\n</ul>\n<h4>큐의 종류</h4>\n<ul>\n<li>선형 큐 (linear queue): 일반적으로 사용되는 시작과 끝이 분명한 큐</li>\n<li>원형 큐 (circular queue): 원형 모양으로 이어져 시작과 끝이 없는 큐</li>\n<li><strong>우선순위 큐</strong> (priority queue): 우선순위가 높은 순서대로 정렬되는 큐</li>\n</ul>\n<h3>(+) 덱 (Deque)</h3>\n<p>스택과 큐가 합쳐진 형태로 양 끝에서 자료를 넣고 뺄 수 있는 자료구조 (a.k.a double-ended queue)</p>\n<ul>\n<li>\n<p>맨 앞 <strong>front</strong> 와 <strong>back</strong> 데이터 값 모두 삽입, 삭제, 접근 등의 <strong>연산이 가능</strong> 하다: O(1)</p>\n<ul>\n<li><strong>맨 앞</strong> 의 데이터에 대해 <code class=\"language-text\">push_front</code>, <code class=\"language-text\">pop_front</code>, <code class=\"language-text\">front</code> 연산 가능하다.</li>\n<li><strong>맨 뒤</strong> 의 데이터에 대해 <code class=\"language-text\">push_back</code>, <code class=\"language-text\">pop_back</code>, <code class=\"language-text\">back</code> 연산 가능하다.</li>\n<li>그 외의 데이터 연산의 경우에는 O(n)의 시간과 추가적인 공간이 필요하다.</li>\n</ul>\n</li>\n</ul>\n<h3>C++ STL의 스택과 큐</h3>\n<p>C++ 언어에서 구현된 스택과 큐 자료구조</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// STL 스택               // STL 큐                 // STL 덱</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stack></span>      |   #<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span>      |   #<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>  <span class=\"token operator\">|</span>   <span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>  <span class=\"token operator\">|</span>   <span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\nstack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span>         <span class=\"token operator\">|</span>   queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> q<span class=\"token punctuation\">;</span>         <span class=\"token operator\">|</span>   deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> d<span class=\"token punctuation\">;</span></code></pre></div>\n<table>\n<thead>\n<tr>\n<th align=\"center\">연산</th>\n<th align=\"left\">스택 ( stack )</th>\n<th align=\"left\">큐 ( queue )</th>\n<th align=\"left\">덱 ( deque )</th>\n<th align=\"center\">시간복잡도</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><strong>접근</strong></td>\n<td align=\"left\">s.top()</td>\n<td align=\"left\">q.front(), q.back()</td>\n<td align=\"left\">d.front(), d.back()</td>\n<td align=\"center\">O(1)</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>삽입</strong></td>\n<td align=\"left\">s.push()</td>\n<td align=\"left\">q.push()</td>\n<td align=\"left\">d.push_ front(), d.push_back()</td>\n<td align=\"center\">O(1)</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>삭제</strong></td>\n<td align=\"left\">s.pop()</td>\n<td align=\"left\">q.pop()</td>\n<td align=\"left\">d.pop_ front(), d.pop_back()</td>\n<td align=\"center\">O(1)</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>크기</strong></td>\n<td align=\"left\">s.size()</td>\n<td align=\"left\">q.size()</td>\n<td align=\"left\">d.size()</td>\n<td align=\"center\">O(1)</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>비었나?</strong></td>\n<td align=\"left\">s.empty()</td>\n<td align=\"left\">q.empty()</td>\n<td align=\"left\">d.empty()</td>\n<td align=\"center\">O(1)</td>\n</tr>\n</tbody>\n</table>","frontmatter":{"title":"[자료구조] 03. 스택과 큐","date":"2019-08-07","tags":["자료구조","Cpp"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/CS_Fundamentals/Data_Structures/3_stack_queue/"}}